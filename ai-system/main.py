import json
import gradio as gr
import os
import logging
from typing import Dict
from dotenv import load_dotenv
from ai_system import AISystem

load_dotenv(".env")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
def load_file_map() -> Dict[str, str]:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–∞–ø–∏ —Ñ–∞–π–ª—ñ–≤ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    file_map = {}
    try:
        with open("data/gdrive_file_map.json", "r") as f:
            file_map = json.load(f)
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª file_map.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ—Ä–æ–∂–Ω—è –º–∞–ø–∞")
    return file_map
file_map = load_file_map()


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º–∏
ai_system = AISystem()

def chat_interface(message: str, history: list, mode: str) -> tuple:
    """–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç—É –¥–ª—è Gradio –∑ —Ä–µ–∂–∏–º–∞–º–∏ —Ä–æ–±–æ—Ç–∏"""
    try:
        result = ai_system.process_query(message, mode)
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        response = result['response']
        source_info = f"\n\n---\nüìç **–î–∂–µ—Ä–µ–ª–æ:** {result['source']}"
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–µ–∂–∏–º
        mode_emoji = {
            'rag_only': 'üìö',
            'hybrid': 'üîç', 
            'web_only': 'üåê',
            'research': 'üî¨'
        }
        source_info += f"\nüéØ **–†–µ–∂–∏–º:** {mode_emoji.get(mode, '‚ùì')} {mode}"
        
        # –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ —è–∫—â–æ —î
        if result['metadata']:
            metadata = result['metadata']
            if 'confidence' in metadata:
                source_info += f"\nüíØ **–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å:** {metadata['confidence']:.1%}"
            if 'functions' in metadata:
                source_info += f"\nüîß **–§—É–Ω–∫—Ü—ñ—ó:** {', '.join(metadata['functions'])}"
            if 'score' in metadata:
                source_info += f"\nüìä **–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—Å—Ç—å:** {metadata['score']:.1%}"
            if 'sources_analyzed' in metadata:
                source_info += f"\nüîç **–î–∂–µ—Ä–µ–ª –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ:** {metadata['sources_analyzed']}/{metadata.get('total_sources', 'N/A')}"
            if 'analysis_type' in metadata:
                source_info += f"\nüß† **–¢–∏–ø –∞–Ω–∞–ª—ñ–∑—É:** {metadata['analysis_type']}"
            if 'sources_count' in metadata:
                source_info += f"\nüìÑ **–í–µ–±-–¥–∂–µ—Ä–µ–ª:** {metadata['sources_count']}"
            if 'sources' in metadata and isinstance(metadata['sources'], list):
                source_info += f"\nüìö **RAG –¥–∂–µ—Ä–µ–ª:** {len(metadata['sources'])}"
                source_info += "\n\n**–î–∂–µ—Ä–µ–ª–∞:**"
                for src in metadata['sources']:
                    # –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—é—á–∞ –¥–ª—è file_map
                    source_key = src['source'].split('.')[0] if '.' in src['source'] else src['source']
                    
                    if source_key in file_map:
                        source_info += f"\n- <span style='color: #2563eb;'>[{src['title']}]({file_map[source_key]})</span>"
                    else:
                        source_info += f"\n- <span style='color: #dc2626;'>{src['title']}</span> (–¥–∂–µ—Ä–µ–ª–æ: {src['source']})"
            if 'context_quality' in metadata:
                quality = metadata['context_quality']
                quality_emoji = "‚úÖ" if quality['is_good'] else "‚ö†Ô∏è"
                source_info += f"\n{quality_emoji} **–Ø–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç—É:** {quality['reason']}"
        
        full_response = response + source_info
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –≤ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ "messages"
        new_message = {"role": "user", "content": message}
        assistant_message = {"role": "assistant", "content": full_response}
        
        # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
        history.append(new_message)
        history.append(assistant_message)
        
        return "", history
        
    except Exception as e:
        error_response = f"‚ùå –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}"
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–º–∏–ª–∫—É –≤ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        new_message = {"role": "user", "content": message}
        error_message = {"role": "assistant", "content": error_response}
        
        history.append(new_message)
        history.append(error_message)
        
        return "", history

def create_interface():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Gradio —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
    
    # –ö–∞—Å—Ç–æ–º–Ω–∏–π CSS
    css = """
    .gradio-container {
        max-width: 1200px !important;
        margin: 0 auto;
        width: 100% !important;
        height: 100% !important;
    }
    .chat-message {
        padding: 10px;
        margin: 5px 0;
        border-radius: 10px;
    }
    """
    
    with gr.Blocks(title="ü§ñ AI Assistant", css=css, theme=gr.themes.Soft(), fill_height=True, fill_width=True) as app:
        gr.Markdown(
            """
            # ü§ñ AI Assistant ### RAG + Function Calling + Google Search
            –°–∏—Å—Ç–µ–º–∞ –ø–æ—î–¥–Ω—É—î: üìö **RAG**, üîß **Function Calling**, üîç **Google Search** 
            """
        )
        with gr.Row(scale=2):
            with gr.Column():
                chatbot = gr.Chatbot(
                    height=500,
                    placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç —ñ —è –¥–æ–ø–æ–º–æ–∂—É –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...",
                    avatar_images=(
                        "https://cdn-icons-png.flaticon.com/512/3135/3135715.png",  # –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
                        "https://cdn-icons-png.flaticon.com/512/4712/4712027.png"   # –±–æ—Ç
                    ),
                    type="messages"
                )

                with gr.Row():
                    msg = gr.Textbox(
                        placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç —Ç—É—Ç...",
                        container=False,
                        scale=4
                    )
                    send_btn = gr.Button("–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", variant="primary", scale=1)

                # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è
                clear_btn = gr.ClearButton([msg, chatbot], value="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏")
        with gr.Sidebar(position="left"):
            with gr.Column(scale=1):
                gr.Markdown("### üí° –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤:")
                
                examples = [
                    "üéØ –∑–∞–≤–¥–∞–Ω–Ω—è #12345",
                    "üìÖ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", 
                    "‚è∞ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ 4 –≥–æ–¥–∏–Ω–∏ –¥–ª—è #12345",
                    "üìä —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è Bug 123",
                    "üë§ –º–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è",
                    "üîç –ø–æ—à—É–∫ —É Redmine API",
                    "üìö wiki —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–µ–∫—Ç",
                    "‚ùì —â–æ —Ç–∞–∫–µ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç?"
                ]
                
                for example in examples:
                    gr.Button(
                        example, 
                        size="sm"
                    ).click(
                        lambda x=example: (x, []),
                        outputs=[msg, chatbot],
                        queue=False
                    )
                with gr.Group():
                    gr.Markdown("### üöÄ –®–≤–∏–¥–∫—ñ —Ä–µ–∂–∏–º–∏:")
                    
                    mode_buttons = gr.Radio(
                        choices=[
                            ("üìö –¢—ñ–ª—å–∫–∏ –±–∞–∑–∞ –∑–Ω–∞–Ω—å", "rag_only"),
                            ("üîç –ë–∞–∑–∞ + –≤–µ–±-–ø–æ—à—É–∫", "hybrid"),
                            ("üåê –¢—ñ–ª—å–∫–∏ –≤–µ–±-–ø–æ—à—É–∫", "web_only"),
                            # ("üî¨ –î–æ—Å–ª—ñ–¥–Ω–∏—Ü—å–∫–∏–π —Ä–µ–∂–∏–º", "research")
                        ],
                        value="hybrid",
                        label="–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:",
                        info="–û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é –ø–æ—à—É–∫—É"
                    )
                gr.Markdown("### ‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏:")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
                status_info = []
                
                # Pinecone
                pinecone_status = "‚úÖ" if os.getenv("PINECONE_API_KEY") else "‚ùå"
                status_info.append(f"{pinecone_status} Pinecone RAG")
                
                # OpenAI
                openai_status = "‚úÖ" if os.getenv("OPENAI_API_KEY") else "‚ùå"
                status_info.append(f"{openai_status} OpenAI")
                
                # Redmine
                redmine_status = "‚úÖ" if os.getenv("REDMINE_API_KEY") else "‚ùå"
                status_info.append(f"{redmine_status} Redmine API")
                
                # Google
                google_status = "‚úÖ" if os.getenv("GOOGLE_API_KEY") else "‚ùå"
                status_info.append(f"{google_status} Google Search")
                
                gr.Markdown("\n\n".join(status_info))
        
        # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –ø–æ–¥—ñ—ó –∑ —Ä–µ–∂–∏–º–æ–º
        msg.submit(chat_interface, [msg, chatbot, mode_buttons], [msg, chatbot], queue=True)
        send_btn.click(chat_interface, [msg, chatbot, mode_buttons], [msg, chatbot], queue=True)
    
    return app

if __name__ == "__main__":
    required_vars = [
        "OPENAI_API_KEY",
        "PINECONE_API_KEY", 
        "PINECONE_ENV",
        "PINECONE_INDEX_NAME"
    ]
    
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    app = create_interface()
    app.queue(max_size=20)
    app.launch(
        server_name="0.0.0.0",
        server_port=7861,
        share=False,
        show_error=True
    )