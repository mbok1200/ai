#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Ollama Gemma LoRA API
"""

import requests
import json
import time
import sys
from typing import Dict, Any

class APITester:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
    
    def print_status(self, message: str):
        print(f"üîç {message}")
    
    def print_success(self, message: str):
        print(f"‚úÖ {message}")
    
    def print_error(self, message: str):
        print(f"‚ùå {message}")
    
    def print_warning(self, message: str):
        print(f"‚ö†Ô∏è  {message}")
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API"""
        self.print_status("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...")
        
        try:
            response = self.session.get(f"{self.base_url}/")
            if response.status_code == 200:
                self.print_success("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!")
                return True
            else:
                self.print_error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {response.status_code}")
                return False
        except Exception as e:
            self.print_error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è: {e}")
            return False
    
    def test_health(self) -> bool:
        """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É"""
        self.print_status("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É...")
        
        try:
            response = self.session.get(f"{self.base_url}/health")
            if response.status_code == 200:
                data = response.json()
                print(f"üìä –°—Ç–∞—Ç—É—Å: {data.get('status')}")
                print(f"ü§ñ Ollama –≥–æ—Ç–æ–≤–∏–π: {data.get('ollama_ready')}")
                print(f"üîß LoRA –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π: {data.get('lora_loaded')}")
                
                if data.get('status') == 'healthy':
                    self.print_success("–°–µ—Ä–≤—ñ—Å –∑–¥–æ—Ä–æ–≤–∏–π!")
                    return True
                else:
                    self.print_warning("–°–µ—Ä–≤—ñ—Å –Ω–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –≥–æ—Ç–æ–≤–∏–π")
                    return False
            else:
                self.print_error(f"–ü–æ–º–∏–ª–∫–∞ health check: {response.status_code}")
                return False
        except Exception as e:
            self.print_error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∑–¥–æ—Ä–æ–≤'—è: {e}")
            return False
    
    def test_models(self) -> bool:
        """–¢–µ—Å—Ç —Å–ø–∏—Å–∫—É –º–æ–¥–µ–ª–µ–π"""
        self.print_status("–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–æ–¥–µ–ª–µ–π...")
        
        try:
            response = self.session.get(f"{self.base_url}/models")
            if response.status_code == 200:
                data = response.json()
                models = data.get('models', [])
                
                print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
                for i, model in enumerate(models, 1):
                    name = model.get('name', '–ù–µ–≤—ñ–¥–æ–º–∞')
                    size = model.get('size', 0)
                    print(f"   {i}. {name} ({size // (1024**3):.1f}GB)")
                
                self.print_success("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –æ—Ç—Ä–∏–º–∞–Ω–æ!")
                return True
            else:
                self.print_error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π: {response.status_code}")
                return False
        except Exception as e:
            self.print_error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º–æ–¥–µ–ª–µ–π: {e}")
            return False
    
    def test_simple_chat(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∞—Ç—É"""
        self.print_status("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∞—Ç—É...")
        
        test_message = "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?"
        
        try:
            payload = {
                "message": test_message,
                "temperature": 0.7,
                "max_tokens": 100
            }
            
            start_time = time.time()
            response = self.session.post(f"{self.base_url}/chat", json=payload)
            end_time = time.time()
            
            if response.status_code == 200:
                data = response.json()
                response_text = data.get('response', '')
                model_name = data.get('model', '')
                tokens_used = data.get('tokens_used', 0)
                
                print(f"üí¨ –ó–∞–ø–∏—Ç: {test_message}")
                print(f"ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response_text}")
                print(f"üìä –ú–æ–¥–µ–ª—å: {model_name}")
                print(f"üî¢ –¢–æ–∫–µ–Ω—ñ–≤: {tokens_used}")
                print(f"‚è±Ô∏è  –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {end_time - start_time:.2f}—Å")
                
                self.print_success("–ü—Ä–æ—Å—Ç–∏–π —á–∞—Ç –ø—Ä–∞—Ü—é—î!")
                return True
            else:
                self.print_error(f"–ü–æ–º–∏–ª–∫–∞ —á–∞—Ç—É: {response.status_code}")
                print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")
                return False
        except Exception as e:
            self.print_error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ —á–∞—Ç—É: {e}")
            return False
    
    def test_streaming_chat(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ç—Ä—ñ–º—ñ–Ω–≥ —á–∞—Ç—É"""
        self.print_status("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—ñ–º—ñ–Ω–≥ —á–∞—Ç—É...")
        
        test_message = "–†–æ–∑–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–µ –ª—ñ–¥–µ—Ä—Å—Ç–≤–æ"
        
        try:
            payload = {
                "message": test_message,
                "temperature": 0.7,
                "stream": True
            }
            
            response = self.session.post(
                f"{self.base_url}/chat",
                json=payload,
                stream=True
            )
            
            if response.status_code == 200:
                print(f"üí¨ –ó–∞–ø–∏—Ç: {test_message}")
                print("üîÑ –°—Ç—Ä—ñ–º—ñ–Ω–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:")
                
                full_response = ""
                for line in response.iter_lines():
                    if line:
                        try:
                            line_text = line.decode('utf-8')
                            if line_text.startswith('data: '):
                                data = json.loads(line_text[6:])
                                if 'response' in data:
                                    chunk = data['response']
                                    print(chunk, end='', flush=True)
                                    full_response += chunk
                        except json.JSONDecodeError:
                            continue
                
                print("\n")
                self.print_success("–°—Ç—Ä—ñ–º—ñ–Ω–≥ —á–∞—Ç –ø—Ä–∞—Ü—é—î!")
                return True
            else:
                self.print_error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç—Ä—ñ–º—ñ–Ω–≥ —á–∞—Ç—É: {response.status_code}")
                return False
        except Exception as e:
            self.print_error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ —Å—Ç—Ä—ñ–º—ñ–Ω–≥ —á–∞—Ç—É: {e}")
            return False
    
    def test_hr_domain_questions(self) -> bool:
        """–¢–µ—Å—Ç –ø–∏—Ç–∞–Ω—å –∑ HR –¥–æ–º–µ–Ω—É"""
        self.print_status("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –∑ HR –¥–æ–º–µ–Ω—É...")
        
        hr_questions = [
            "–©–æ —Ç–∞–∫–µ agile –∫–æ—É—á–∏–Ω–≥?",
            "–Ø–∫ –º–æ—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É?",
            "–ü—Ä–∏–Ω—Ü–∏–ø–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ª—ñ–¥–µ—Ä—Å—Ç–≤–∞",
            "–Ø–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—É –∑—É—Å—Ç—Ä—ñ—á?",
            "–©–æ —Ç–∞–∫–µ lean –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç?"
        ]
        
        successful_tests = 0
        
        for i, question in enumerate(hr_questions, 1):
            print(f"\nüìù –¢–µ—Å—Ç {i}/{len(hr_questions)}: {question}")
            
            try:
                payload = {
                    "message": question,
                    "temperature": 0.8,
                    "max_tokens": 200
                }
                
                response = self.session.post(f"{self.base_url}/chat", json=payload)
                
                if response.status_code == 200:
                    data = response.json()
                    answer = data.get('response', '')
                    
                    print(f"ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {answer[:200]}{'...' if len(answer) > 200 else ''}")
                    print(f"‚úÖ –¢–µ—Å—Ç {i} –ø—Ä–æ–π–¥–µ–Ω–∏–π")
                    successful_tests += 1
                else:
                    print(f"‚ùå –¢–µ—Å—Ç {i} –ø—Ä–æ–≤–∞–ª–µ–Ω–∏–π: {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå –¢–µ—Å—Ç {i} –ø—Ä–æ–≤–∞–ª–µ–Ω–∏–π: {e}")
        
        success_rate = (successful_tests / len(hr_questions)) * 100
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç HR —Ç–µ—Å—Ç—ñ–≤: {successful_tests}/{len(hr_questions)} ({success_rate:.1f}%)")
        
        if success_rate >= 80:
            self.print_success("HR –¥–æ–º–µ–Ω —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
            return True
        else:
            self.print_warning("–î–µ—è–∫—ñ HR —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—è")
            return False
    
    def run_all_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤"""
        print("üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Ollama Gemma LoRA API")
        print("=" * 50)
        
        tests = [
            ("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", self.test_connection),
            ("–ó–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É", self.test_health),
            ("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π", self.test_models),
            ("–ü—Ä–æ—Å—Ç–∏–π —á–∞—Ç", self.test_simple_chat),
            ("–°—Ç—Ä—ñ–º—ñ–Ω–≥ —á–∞—Ç", self.test_streaming_chat),
            ("HR –¥–æ–º–µ–Ω", self.test_hr_domain_questions)
        ]
        
        passed_tests = 0
        
        for test_name, test_func in tests:
            print(f"\n{'='*20} {test_name} {'='*20}")
            
            try:
                if test_func():
                    passed_tests += 1
                    time.sleep(1)  # –ü–∞—É–∑–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
                else:
                    print(f"‚ö†Ô∏è  –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω–∏–π")
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ '{test_name}': {e}")
        
        print(f"\n{'='*50}")
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
        print(f"{'='*50}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}/{len(tests)}")
        print(f"üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {(passed_tests/len(tests)*100):.1f}%")
        
        if passed_tests == len(tests):
            print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
            return True
        elif passed_tests >= len(tests) * 0.8:
            print("‚ö†Ô∏è  –ë—ñ–ª—å—à—ñ—Å—Ç—å —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–∞, –∞–ª–µ —î –ø—Ä–æ–±–ª–µ–º–∏")
            return False
        else:
            print("‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ - –±–∞–≥–∞—Ç–æ —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
            return False

def main():
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    else:
        base_url = "http://localhost:8000"
    
    print(f"üéØ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API: {base_url}")
    
    tester = APITester(base_url)
    success = tester.run_all_tests()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
