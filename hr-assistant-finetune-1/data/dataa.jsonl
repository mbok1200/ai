j{"instruction": "Проаналізуй цей запит", "input": "CHAPTER 1: SCALE FROM ZERO TO MILLIONS OF\nUSERS\nDesigning a system that supports millions of users is challenging, and it is a journey that\nrequires continuous refinement and endless improvement. In this chapter, we build a system\nthat supports a single user and gradually scale it up to serve millions of users. After reading\nthis chapter, you will master a handful of techniques that will help you to crack the system\ndesign interview questions.", "output": {"text": "Single server setup\nA journey of a thousand miles begins with a single step, and building a complex system is no\ndifferent. To start with something simple, everything is running on a single server. Figure 1-1\nshows the illustration of a single server setup where everything is running on one server: web\napp, database, cache, etc.\nTo understand this setup, it is helpful to investigate the request flow and traffic source. Let us\nfirst look at the request flow (Figure 1-2).", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "SCALE", "subcategory": "FROM ZERO TO MILLIONS OF"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "SCALE", "subcategory": "FROM ZERO TO MILLIONS OF"}}
{"instruction": "Проаналізуй цей запит", "input": "Estimate Twitter QPS and storage requirements", "output": {"text": "Please note the following numbers are for this exercise only as they are not real numbers\nfrom Twitter.\nAssumptions:\n•  300 million monthly active users.\n•  50% of users use Twitter daily.\n•  Users post 2 tweets per day on average.\n•  10% of tweets contain media.\n•  Data is stored for 5 years.\nEstimations:\nQuery per second (QPS) estimate:\n•  Daily active users (DAU) = 300 million * 50% = 150 million\n•  Tweets QPS = 150 million * 2 tweets / 24 hour / 3600 seconds = ~3500\n•  Peek QPS = 2 * QPS = ~7000\nWe will only estimate media storage here.\n•  Average tweet size:\n•  tweet_id   64 bytes\n•  text           140 bytes\n•  media       1 MB\n•  Media storage: 150 million * 2 * 10% * 1 MB = 30 TB per day\n•  5-year media storage: 30 TB * 365 * 5 = ~55 PB", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "BACK-OF-THE-ENVELOPE", "subcategory": "ESTIMATION"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "BACK-OF-THE-ENVELOPE", "subcategory": "ESTIMATION"}}
{"instruction": "Проаналізуй цей запит", "input": "CHAPTER 3: A FRAMEWORK FOR SYSTEM DESIGN\nINTERVIEWS\nYou have just landed a coveted on-site interview at your dream company. The hiring\ncoordinator sends you a schedule for that day. Scanning down the list, you feel pretty good\nabout it until your eyes land on this interview session - System Design Interview.\nSystem design interviews are often intimidating. It could be as vague as “designing a well-\nknown product X?”. The questions are ambiguous and seem unreasonably broad. Your\nweariness is understandable. After all, how could anyone design a popular product in an hour\nthat has taken hundreds if not thousands of engineers to build?\nThe good news is that no one expects you to. Real-world system design is extremely\ncomplicated. For example, Google search is deceptively simple; however, the amount of\ntechnology that underpins that simplicity is truly astonishing. If no one expects you to design\na real-world system in an hour, what is the benefit of a system design interview?\nThe system design interview simulates real-life problem solving where two co-workers\ncollaborate on an ambiguous problem and come up with a solution that meets their goals. The\nproblem is open-ended, and there is no perfect answer. The final design is less important\ncompared to the work you put in the design process. This allows you to demonstrate your\ndesign skill, defend your design choices, and respond to feedback in a constructive manner.\nLet us flip the table and consider what goes through the interviewer’s head as she walks into\nthe conference room to meet you. The primary goal of the interviewer is to accurately assess\nyour abilities. The last thing she wants is to give an inconclusive evaluation because the\nsession has gone poorly and there are not enough signals. What is an interviewer looking for\nin a system design interview?\nMany think that system design interview is all about a person's technical design skills. It is\nmuch more than that. An effective system design interview gives strong signals about a\nperson's ability to collaborate, to work under pressure, and to resolve ambiguity\nconstructively. The ability to ask good questions is also an essential skill, and many\ninterviewers specifically look for this skill.\nA good interviewer also looks for red flags. Over-engineering is a real disease of many\nengineers as they delight in design purity and ignore tradeoffs. They are often unaware of the\ncompounding costs of over-engineered systems, and many companies pay a high price for\nthat ignorance. You certainly do not want to demonstrate this tendency in a system design\ninterview. Other red flags include narrow mindedness, stubbornness, etc.\nIn this chapter, we will go over some useful tips and introduce a simple and effective\nframework to solve system design interview problems.", "output": {"text": "A 4-step process for effective system design interview\nEvery system design interview is different. A great system design interview is open-ended\nand there is no one-size-fits-all solution. However, there are steps and common ground to\ncover in every system design interview.\nStep 1 - Understand the problem and establish design scope\n\"Why did the tiger roar?\"\nA hand shot up in the back of the class.\n\"Yes, Jimmy?\", the teacher responded.\n\"Because he was HUNGRY\".\n\"Very good Jimmy.\"\nThroughout his childhood, Jimmy has always been the first to answer questions in the class.\nWhenever the teacher asks a question, there is always a kid in the classroom who loves to\ntake a crack at the question, no matter if he knows the answer or not. That is Jimmy.\nJimmy is an ace student. He takes pride in knowing all the answers fast. In exams, he is\nusually the first person to finish the questions. He is a teacher's top choice for any academic\ncompetition.\nDON'T be like Jimmy.\nIn a system design interview, giving out an answer quickly without thinking gives you no\nbonus points. Answering without a thorough understanding of the requirements is a huge red\nflag as the interview is not a trivia contest. There is no right answer.\nSo, do not jump right in to give a solution. Slow down. Think deeply and ask questions to\nclarify requirements and assumptions. This is extremely important.\nAs an engineer, we like to solve hard problems and jump into the final design; however, this\napproach is likely to lead you to design the wrong system. One of the most important skills as\nan engineer is to ask the right questions, make the proper assumptions, and gather all the\ninformation needed to build a system. So, do not be afraid to ask questions.\nWhen you ask a question, the interviewer either answers your question directly or asks you to\nmake your assumptions. If the latter happens, write down your assumptions on the\nwhiteboard or paper. You might need them later.\nWhat kind of questions to ask? Ask questions to understand the exact requirements. Here is a\nlist of questions to help you get started:\n• What specific features are we going to build?\n• How many users does the product have?\n• How fast does the company anticipate to scale up? What are the anticipated scales in 3\nmonths, 6 months, and a year?\n• What is the company’s technology stack? What existing services you might leverage to\nsimplify the design?\nExample\nIf you are asked to design a news feed system, you want to ask questions that help you clarify\nthe requirements. The conversation between you and the interviewer might look like this:\nCandidate: Is this a mobile app? Or a web app? Or both?", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "A", "subcategory": "FRAMEWORK FOR SYSTEM DESIGN"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "A", "subcategory": "FRAMEWORK FOR SYSTEM DESIGN"}}
{"instruction": "Проаналізуй цей запит", "input": "CHAPTER 4: DESIGN A RATE LIMITER\nIn a network system, a rate limiter is used to control the rate of traffic sent by a client or a\nservice. In the HTTP world, a rate limiter limits the number of client requests allowed to be\nsent over a specified period. If the API request count exceeds the threshold defined by the\nrate limiter, all the excess calls are blocked. Here are a few examples:\n• A user can write no more than 2 posts per second.\n• You can create a maximum of 10 accounts per day from the same IP address.\n• You can claim rewards no more than 5 times per week from the same device.\nIn this chapter, you are asked to design a rate limiter. Before starting the design, we first look\nat the benefits of using an API rate limiter:\n• Prevent resource starvation caused by Denial of Service (DoS) attack [1]. Almost all\nAPIs published by large tech companies enforce some form of rate limiting. For example,\nTwitter limits the number of tweets to 300 per 3 hours [2]. Google docs APIs have the\nfollowing default limit: 300 per user per 60 seconds for read requests [3]. A rate limiter\nprevents DoS attacks, either intentional or unintentional, by blocking the excess calls.\n• Reduce cost. Limiting excess requests means fewer servers and allocating more\nresources to high priority APIs. Rate limiting is extremely important for companies that\nuse paid third party APIs. For example, you are charged on a per-call basis for the\nfollowing external APIs: check credit, make a payment, retrieve health records, etc.\nLimiting the number of calls is essential to reduce costs.\n• Prevent servers from being overloaded. To reduce server load, a rate limiter is used to\nfilter out excess requests caused by bots or users’ misbehavior.", "output": {"text": "Step 1 - Understand the problem and establish design scope\nRate limiting can be implemented using different algorithms, each with its pros and cons. The\ninteractions between an interviewer and a candidate help to clarify the type of rate limiters we\nare trying to build.\nCandidate: What kind of rate limiter are we going to design? Is it a client-side rate limiter or\nserver-side API rate limiter?\nInterviewer: Great question. We focus on the server-side API rate limiter.\nCandidate: Does the rate limiter throttle API requests based on IP, the user ID, or other\nproperties?\nInterviewer: The rate limiter should be flexible enough to support different sets of throttle\nrules.\nCandidate: What is the scale of the system? Is it built for a startup or a big company with a\nlarge user base?\nInterviewer: The system must be able to handle a large number of requests.\nCandidate: Will the system work in a distributed environment?\nInterviewer: Yes.\nCandidate: Is the rate limiter a separate service or should it be implemented in application\ncode?\nInterviewer: It is a design decision up to you.\nCandidate: Do we need to inform users who are throttled?\nInterviewer: Yes.\nRequirements\nHere is a summary of the requirements for the system:\n• Accurately limit excessive requests.\n• Low latency. The rate limiter should not slow down HTTP response time.\n• Use as little memory as possible.\n• Distributed rate limiting. The rate limiter can be shared across multiple servers or\nprocesses.\n• Exception handling. Show clear exceptions to users when their requests are throttled.\n• High fault tolerance. If there are any problems with the rate limiter (for example, a cache\nserver goes offline), it does not affect the entire system.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "A RATE LIMITER"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "A RATE LIMITER"}}
{"instruction": "Проаналізуй цей запит", "input": "CHAPTER 5: DESIGN CONSISTENT HASHING\nTo achieve horizontal scaling, it is important to distribute requests/data efficiently and evenly\nacross servers. Consistent hashing is a commonly used technique to achieve this goal. But\nfirst, let us take an in-depth look at the problem.", "output": {"text": "The rehashing problem\nIf you have n  cache servers, a common way to balance the load is to use the following hash\nmethod:\nserverIndex = hash(key) % N, where N is the size of the server pool.\nLet us use an example to illustrate how it works. As shown in Table 5-1, we have 4 servers\nand 8 string keys with their hashes.\nTo fetch the server where a key is stored, we perform the modular operation f(key) % 4. For\ninstance, hash(key0) % 4 = 1 means a client must contact server 1 to fetch the cached data.\nFigure 5-1 shows the distribution of keys based on Table 5-1.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "CONSISTENT HASHING"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "CONSISTENT HASHING"}}
{"instruction": "Проаналізуй цей запит", "input": "CHAPTER 6: DESIGN A KEY-VALUE STORE\nA key-value store, also referred to as a key-value database, is a non-relational database. Each\nunique identifier is stored as a key with its associated value. This data pairing is known as a\n“key-value” pair.\nIn a key-value pair, the key must be unique, and the value associated with the key can be\naccessed through the key. Keys can be plain text or hashed values. For performance reasons,\na short key works better. What do keys look like? Here are a few examples:\n• Plain text key: “last_logged_in_at”\n• Hashed key: 253DDEC4\nThe value in a key-value pair can be strings, lists, objects, etc. The value is usually treated as\nan opaque object in key-value stores, such as Amazon dynamo [1], Memcached [2], Redis\n[3], etc.\nHere is a data snippet in a key-value store:\nIn this chapter, you are asked to design a key-value store that supports the following\noperations:\n- put(key, value)  // insert “value” associated with “key”\n- get(key)  // get “value” associated with “key”", "output": {"text": "Understand the problem and establish design scope\nThere is no perfect design. Each design achieves a specific balance regarding the tradeoffs of\nthe read, write, and memory usage. Another tradeoff has to be made was between consistency\nand availability. In this chapter, we design a key-value store that comprises of the following\ncharacteristics:\n• The size of a key-value pair is small: less than 10 KB.\n• Ability to store big data.\n• High availability: The system responds quickly, even during failures.\n• High scalability: The system can be scaled to support large data set.\n• Automatic scaling: The addition/deletion of servers should be automatic based on traffic.\n• Tunable consistency.\n• Low latency.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "A KEY-VALUE STORE"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "A KEY-VALUE STORE"}}
{"instruction": "Проаналізуй цей запит", "input": "CHAPTER 7: DESIGN A UNIQUE ID GENERATOR IN\nDISTRIBUTED SYSTEMS\nIn this chapter, you are asked to design a unique ID generator in distributed systems. Your\nfirst thought might be to use a primary key with the auto_increment attribute in a traditional\ndatabase. However, auto_increment does not work in a distributed environment because a\nsingle database server is not large enough and generating unique IDs across multiple\ndatabases with minimal delay is challenging.\nHere are a few examples of unique IDs:", "output": {"text": "Step 1 - Understand the problem and establish design scope\nAsking clarification questions is the first step to tackle any system design interview question.\nHere is an example of candidate-interviewer interaction:\nCandidate: What are the characteristics of unique IDs?\nInterviewer: IDs must be unique and sortable.\nCandidate: For each new record, does ID increment by 1?\nInterviewer: The ID increments by time but not necessarily only increments by 1. IDs\ncreated in the evening are larger than those created in the morning on the same day.\nCandidate: Do IDs only contain numerical values?\nInterviewer: Yes, that is correct.\nCandidate: What is the ID length requirement?\nInterviewer: IDs should fit into 64-bit.\nCandidate: What is the scale of the system?\nInterviewer: The system should be able to generate 10,000 IDs per second.\nAbove are some of the sample questions that you can ask your interviewer. It is important to\nunderstand the requirements and clarify ambiguities. For this interview question, the\nrequirements are listed as follows:\n• IDs must be unique.\n• IDs are numerical values only.\n• IDs fit into 64-bit.\n• IDs are ordered by date.\n• Ability to generate over 10,000 unique IDs per second.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "A UNIQUE ID GENERATOR IN"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "A UNIQUE ID GENERATOR IN"}}
{"instruction": "Проаналізуй цей запит", "input": "CHAPTER 8: DESIGN A URL SHORTENER\nIn this chapter, we will tackle an interesting and classic system design interview question:\ndesigning a URL shortening service like tinyurl.", "output": {"text": "Step 1 - Understand the problem and establish design scope\nSystem design interview questions are intentionally left open-ended. To design a well-crafted\nsystem, it is critical to ask clarification questions.\nCandidate: Can you give an example of how a URL shortener work?\nInterviewer: Assume URL\nhttps://www.systeminterview.com/q=chatsystem&c=loggedin&v=v3&l=long is the original\nURL. Your service creates an alias with shorter length: https://tinyurl.com/ y7keocwj. If you\nclick the alias, it redirects you to the original URL.\nCandidate: What is the traffic volume?\nInterviewer: 100 million URLs are generated per day.\nCandidate: How long is the shortened URL?\nInterviewer: As short as possible.\nCandidate: What characters are allowed in the shortened URL?\nInterviewer: Shortened URL can be a combination of numbers (0-9) and characters (a-z, A-).\nCandidate: Can shortened URLs be deleted or updated?\nInterviewer: For simplicity, let us assume shortened URLs cannot be deleted or updated.\nHere are the basic use cases:\n1.URL shortening: given a long URL => return a much shorter URL\n2.URL redirecting: given a shorter URL => redirect to the original URL\n3.High availability, scalability, and fault tolerance considerations\nBack of the envelope estimation\n• Write operation: 100 million URLs are generated per day.\n• Write operation per second: 100 million / 24 /3600 = 1160\n• Read operation: Assuming ratio of read operation to write operation is 10:1, read\noperation per second: 1160 * 10 = 11,600\n• Assuming the URL shortener service will run for 10 years, this means we must support\n100 million * 365 * 10 = 365 billion records.\n• Assume average URL length is 100.\n• Storage requirement over 10 years: 365 billion * 100 bytes * 10 years = 365 TB\nIt is important for you to walk through the assumptions and calculations with your\ninterviewer so that both of you are on the same page.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "A URL SHORTENER"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "A URL SHORTENER"}}
{"instruction": "Проаналізуй цей запит", "input": "CHAPTER 9: DESIGN A WEB CRAWLER\nIn this chapter, we focus on web crawler design: an interesting and classic system design\ninterview question.\nA web crawler is known as a robot or spider. It is widely used by search engines to discover\nnew or updated content on the web. Content can be a web page, an image, a video, a PDF\nfile, etc. A web crawler starts by collecting a few web pages and then follows links on those\npages to collect new content. Figure 9-1 shows a visual example of the crawl process.\nA crawler is used for many purposes:\n• Search engine indexing: This is the most common use case.  A crawler collects web\npages to create a local index for search engines. For example, Googlebot is the web\ncrawler behind the Google search engine.\n• Web archiving: This is the process of collecting information from the web to preserve\ndata for future uses. For instance, many national libraries run crawlers to archive web\nsites. Notable examples are the US Library of Congress [1] and the EU web archive [2].\n• Web mining: The explosive growth of the web presents an unprecedented opportunity for", "output": {"text": "data mining. Web mining helps to discover useful knowledge from the internet. For\nexample, top financial firms use crawlers to download shareholder meetings and annual\nreports to learn key company initiatives.\n• Web monitoring. The crawlers help to monitor copyright and trademark infringements\nover the Internet. For example, Digimarc [3] utilizes crawlers to discover pirated works\nand reports.\nThe complexity of developing a web crawler depends on the scale we intend to support. It\ncould be either a small school project, which takes only a few hours to complete or a gigantic\nproject that requires continuous improvement from a dedicated engineering team. Thus, we\nwill explore the scale and features to support below.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "A WEB CRAWLER"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "A WEB CRAWLER"}}
{"instruction": "Проаналізуй цей запит", "input": "CHAPTER 10: DESIGN A NOTIFICATION SYSTEM\nA notification system has already become a very popular feature for many applications in\nrecent years. A notification alerts a user with important information like breaking news,\nproduct updates, events, offerings, etc. It has become an indispensable part of our daily life.\nIn this chapter, you are asked to design a notification system.\nA notification is more than just mobile push notification. Three types of notification formats\nare: mobile push notification, SMS message, and Email. Figure 10-1 shows an example of\neach of these notifications.", "output": {"text": "Step 1 - Understand the problem and establish design scope\nBuilding a scalable system that sends out millions of notifications a day is not an easy task. It\nrequires a deep understanding of the notification ecosystem. The interview question is\npurposely designed to be open-ended and ambiguous, and it is your responsibility to ask\nquestions to clarify the requirements.\nCandidate: What types of notifications does the system support?\nInterviewer: Push notification, SMS message, and email.\nCandidate: Is it a real-time system?\nInterviewer: Let us say it is a soft real-time system. We want a user to receive notifications\nas soon as possible. However, if the system is under a high workload, a slight delay is\nacceptable.\nCandidate: What are the supported devices?\nInterviewer: iOS devices, android devices, and laptop/desktop.\nCandidate: What triggers notifications?\nInterviewer: Notifications can be triggered by client applications. They can also be\nscheduled on the server-side.\nCandidate: Will users be able to opt-out?\nInterviewer: Yes, users who choose to opt-out will no longer receive notifications.\nCandidate: How many notifications are sent out each day?\nInterviewer: 10 million mobile push notifications, 1 million SMS messages, and 5 million\nemails.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "A NOTIFICATION SYSTEM"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "A NOTIFICATION SYSTEM"}}
{"instruction": "Проаналізуй цей запит", "input": "CHAPTER 11: DESIGN A NEWS FEED SYSTEM\nIn this chapter, you are asked to design a news feed system. What is news feed? According to\nthe Facebook help page, “News feed is the constantly updating list of stories in the middle of\nyour home page. News Feed includes status updates, photos, videos, links, app activity, and\nlikes from people, pages, and groups that you follow on Facebook” [1]. This is a popular\ninterview question. Similar questions commonly asked are: design Facebook news feed,\nInstagram feed, Twitter timeline, etc.", "output": {"text": "Step 1 - Understand the problem and establish design scope\nThe first set of clarification questions are to understand what the interviewer has in mind\nwhen she asks you to design a news feed system. At the very least, you should figure out\nwhat features to support. Here is an example of candidate-interviewer interaction:\nCandidate: Is this a mobile app? Or a web app? Or both?\nInterviewer: Both\nCandidate: What are the important features?\nInterview: A user can publish a post and see her friends’ posts on the news feed page.\nCandidate: Is the news feed sorted by reverse chronological order or any particular order\nsuch as topic scores? For instance, posts from your close friends have higher scores.\nInterviewer: To keep things simple, let us assume the feed is sorted by reverse chronological\norder.\nCandidate: How many friends can a user have?\nInterviewer: 5000\nCandidate: What is the traffic volume?\nInterviewer: 10 million DAU\nCandidate: Can feed contain images, videos, or just text?\nInterviewer: It can contain media files, including both images and videos.\nNow you have gathered the requirements, we focus on designing the system.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "A NEWS FEED SYSTEM"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "A NEWS FEED SYSTEM"}}
{"instruction": "Проаналізуй цей запит", "input": "CHAPTER 12: DESIGN A CHAT SYSTEM\nIn this chapter we explore the design of a chat system. Almost everyone uses a chat app.\nFigure 12-1 shows some of the most popular apps in the marketplace.\nA chat app performs different functions for different people. It is extremely important to nail\ndown the exact requirements. For example, you do not want to design a system that focuses\non group chat when the interviewer has one-on-one chat in mind. It is important to explore\nthe feature requirements.", "output": {"text": "Step 1 - Understand the problem and establish design scope\nIt is vital to agree on the type of chat app to design. In the marketplace, there are one-on-one\nchat apps like Facebook Messenger, WeChat, and WhatsApp, office chat apps that focus on\ngroup chat like Slack, or game chat apps, like Discord, that focus on large group interaction\nand low voice chat latency.\nThe first set of clarification questions should nail down what the interviewer has in mind\nexactly when she asks you to design a chat system. At the very least, figure out if you should\nfocus on a one-on-one chat or group chat app. Some questions you might ask are as follows:\nCandidate: What kind of chat app shall we design? 1 on 1 or group based?\nInterviewer: It should support both 1 on 1 and group chat.\nCandidate: Is this a mobile app? Or a web app? Or both?\nInterviewer: Both.\nCandidate: What is the scale of this app? A startup app or massive scale?\nInterviewer: It should support 50 million daily active users (DAU).\nCandidate: For group chat, what is the group member limit?\nInterviewer: A maximum of 100 people\nCandidate: What features are important for the chat app? Can it support attachment?\nInterviewer: 1 on 1 chat, group chat, online indicator. The system only supports text\nmessages.\nCandidate: Is there a message size limit?\nInterviewer: Yes, text length should be less than 100,000 characters long.\nCandidate: Is end-to-end encryption required?\nInterviewer: Not required for now but we will discuss that if time allows.\nCandidate: How long shall we store the chat history?\nInterviewer: Forever.\nIn the chapter, we focus on designing a chat app like Facebook messenger, with an emphasis\non the following features:\n• A one-on-one chat with low delivery latency\n• Small group chat (max of 100 people)\n• Online presence\n• Multiple device support. The same account can be logged in to multiple accounts at the\nsame time.\n• Push notifications\nIt is also important to agree on the design scale. We will design a system that supports 50\nmillion DAU.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "A CHAT SYSTEM"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "A CHAT SYSTEM"}}
{"instruction": "Проаналізуй цей запит", "input": "CHAPTER 13: DESIGN A SEARCH AUTOCOMPLETE\nSYSTEM\nWhen searching on Google or shopping at Amazon, as you type in the search box, one or\nmore matches for the search term are presented to you. This feature is referred to as\nautocomplete, typeahead, search-as-you-type, or incremental search. Figure 13-1 presents an\nexample of a Google search showing a list of autocompleted results when “dinner” is typed\ninto the search box. Search autocomplete is an important feature of many products. This leads\nus to the interview question: design a search autocomplete system, also called “design top k”\nor “design top k most searched queries”.", "output": {"text": "Step 1 - Understand the problem and establish design scope\nThe first step to tackle any system design interview question is to ask enough questions to\nclarify requirements. Here is an example of candidate-interviewer interaction:\nCandidate: Is the matching only supported at the beginning of a search query or in the\nmiddle as well?\nInterviewer: Only at the beginning of a search query.\nCandidate: How many autocomplete suggestions should the system return?\nInterviewer: 5\nCandidate: How does the system know which 5 suggestions to return?\nInterviewer: This is determined by popularity, decided by the historical query frequency.\nCandidate: Does the system support spell check?\nInterviewer: No, spell check or autocorrect is not supported.\nCandidate: Are search queries in English?\nInterviewer: Yes. If time allows at the end, we can discuss multi-language support.\nCandidate: Do we allow capitalization and special characters?\nInterviewer: No, we assume all search queries have lowercase alphabetic characters.\nCandidate: How many users use the product?\nInterviewer: 10 million DAU.\nRequirements\nHere is a summary of the requirements:\n• Fast response time: As a user types a search query, autocomplete suggestions must show\nup fast enough. An article about Facebook’s autocomplete system [1] reveals that the\nsystem needs to return results within 100 milliseconds. Otherwise it will cause stuttering.\n• Relevant: Autocomplete suggestions should be relevant to the search term.\n• Sorted: Results returned by the system must be sorted by popularity or other ranking\nmodels.\n• Scalable: The system can handle high traffic volume.\n• Highly available: The system should remain available and accessible when part of the\nsystem is offline, slows down, or experiences unexpected network errors.\nBack of the envelope estimation\n• Assume 10 million daily active users (DAU).\n• An average person performs 10 searches per day.\n• 20 bytes of data per query string:\n• Assume we use ASCII character encoding. 1 character = 1 byte\n• Assume a query contains 4 words, and each word contains 5 characters on average.\n• That is 4 x 5 = 20 bytes per query.\n• For every character entered into the search box, a client sends a request to the backend\nfor autocomplete suggestions. On average, 20 requests are sent for each search query. For\nexample, the following 6 requests are sent to the backend by the time you finish typing\n“dinner”.\nsearch?q=d", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "A SEARCH AUTOCOMPLETE"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "A SEARCH AUTOCOMPLETE"}}
{"instruction": "Проаналізуй цей запит", "input": "CHAPTER 14: DESIGN YOUTUBE\nIn this chapter, you are asked to design YouTube. The solution to this question can be applied\nto other interview questions like designing a video sharing platform such as Netflix and Hulu.\nFigure 14-1 shows the YouTube homepage.\nYouTube looks simple: content creators upload videos and viewers click play. Is it really that\nsimple? Not really. There are lots of complex technologies underneath the simplicity. Let us\nlook at some impressive statistics, demographics, and fun facts of YouTube in 2020 [1] [2].\n• Total number of monthly active users: 2 billion.\n• Number of videos watched per day: 5 billion.\n• 73% of US adults use YouTube.\n• 50 million creators on YouTube.\n• YouTube’s Ad revenue was $15.1 billion for the full year 2019, up 36% from 2018.\n• YouTube is responsible for 37% of all mobile internet traffic.\n• YouTube is available in 80 different languages.\nFrom these statistics, we know YouTube is enormous, global and makes a lot of money.", "output": {"text": "Step 1 - Understand the problem and establish design scope\nAs revealed in Figure 14-1, besides watching a video, you can do a lot more on YouTube. For\nexample, comment, share, or like a video, save a video to playlists, subscribe to a channel,\netc. It is impossible to design everything within a 45- or 60-minute interview. Thus, it is\nimportant to ask questions to narrow down the scope.\nCandidate: What features are important?\nInterviewer: Ability to upload a video and watch a video.\nCandidate: What clients do we need to support?\nInterviewer: Mobile apps, web browsers, and smart TV.\nCandidate: How many daily active users do we have?\nInterviewer: 5 million\nCandidate: What is the average daily time spent on the product?\nInterviewer: 30 minutes.\nCandidate: Do we need to support international users?\nInterviewer: Yes, a large percentage of users are international users.\nCandidate: What are the supported video resolutions?\nInterviewer: The system accepts most of the video resolutions and formats.\nCandidate: Is encryption required?\nInterviewer: Yes\nCandidate: Any file size requirement for videos?\nInterviewer: Our platform focuses on small and medium-sized videos. The maximum\nallowed video size is 1GB.\nCandidate: Can we leverage some of the existing cloud infrastructures provided by Amazon,\nGoogle, or Microsoft?\nInterviewer: That is a great question. Building everything from scratch is unrealistic for most\ncompanies, it is recommended to leverage some of the existing cloud services.\nIn the chapter, we focus on designing a video streaming service with the following features:\n• Ability to upload videos fast\n• Smooth video streaming\n• Ability to change video quality\n• Low infrastructure cost\n• High availability, scalability, and reliability requirements\n• Clients supported: mobile apps, web browser, and smart TV\nBack of the envelope estimation\nThe following estimations are based on many assumptions, so it is important to communicate\nwith the interviewer to make sure she is on the same page.\n• Assume the product has 5 million daily active users (DAU).\n• Users watch 5 videos per day.\n• 10% of users upload 1 video per day.\n• Assume the average video size is 300 MB.\n• Total daily storage space needed: 5 million * 10% * 300 MB = 150TB", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "YOUTUBE"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "YOUTUBE"}}
{"instruction": "Проаналізуй цей запит", "input": "CHAPTER 15: DESIGN GOOGLE DRIVE\nIn recent years, cloud storage services such as Google Drive, Dropbox, Microsoft OneDrive,\nand Apple iCloud have become very popular. In this chapter, you are asked to design Google\nDrive.\nLet us take a moment to understand Google Drive before jumping into the design. Google\nDrive is a file storage and synchronization service that helps you store documents, photos,\nvideos, and other files in the cloud. You can access your files from any computer,\nsmartphone, and tablet. You can easily share those files with friends, family, and coworkers\n[1]. Figure 15-1 and 15-2 show what Google drive looks like on a browser and mobile\napplication, respectively.", "output": {"text": "Step 1 - Understand the problem and establish design scope\nDesigning a Google drive is a big project, so it is important to ask questions to narrow down\nthe scope.\nCandidate: What are the most important features?\nInterviewer: Upload and download files, file sync, and notifications.\nCandidate: Is this a mobile app, a web app, or both?\nInterviewer: Both.\nCandidate: What are the supported file formats?\nInterviewer: Any file type.\nCandidate: Do files need to be encrypted?\nInterview: Yes, files in the storage must be encrypted.\nCandidate: Is there a file size limit?\nInterview: Yes, files must be 10 GB or smaller.\nCandidate: How many users does the product have?\nInterviewer: 10M DAU.\nIn this chapter, we focus on the following features:\n• Add files. The easiest way to add a file is to drag and drop a file into Google drive.\n• Download files.\n• Sync files across multiple devices. When a file is added to one device, it is automatically\nsynced to other devices.\n•  See file revisions.\n• Share files with your friends, family, and coworkers\n• Send a notification when a file is edited, deleted, or shared with you.\nFeatures not discussed in this chapter include:\n• Google doc editing and collaboration. Google doc allows multiple people to edit the\nsame document simultaneously. This is out of our design scope.\nOther than clarifying requirements, it is important to understand non-functional requirements:\n• Reliability. Reliability is extremely important for a storage system. Data loss is\nunacceptable.\n• Fast sync speed. If file sync takes too much time, users will become impatient and\nabandon the product.\n• Bandwidth usage. If a product takes a lot of unnecessary network bandwidth, users will\nbe unhappy, especially when they are on a mobile data plan.\n• Scalability. The system should be able to handle high volumes of traffic.\n• High availability. Users should still be able to use the system when some servers are\noffline, slowed down, or have unexpected network errors.\nBack of the envelope estimation\n• Assume the application has 50 million signed up users and 10 million DAU.\n• Users get 10 GB free space.\n• Assume users upload 2 files per day. The average file size is 500 KB.\n• 1:1 read to write ratio.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "GOOGLE DRIVE"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "DESIGN", "subcategory": "GOOGLE DRIVE"}}
{"instruction": "Проаналізуй цей запит", "input": "CHAPTER 16: THE LEARNING CONTINUES\nDesigning good systems requires years of accumulation of knowledge. One shortcut is to dive\ninto real-world system architectures. Below is a collection of helpful reading materials. We\nhighly recommend you pay attention to both the shared principles and the underlying\ntechnologies. Researching each technology and understanding what problems it solves is a\ngreat way to strengthen your knowledge base and refine the design process.", "output": {"text": "Real-world systems\nThe following materials can help you understand general design ideas of real system\narchitectures behind different companies.\nFacebook Timeline: Brought To You By The Power Of Denormalization:\nhttps://goo.gl/FCNrbm\nScale at Facebook: https://goo.gl/NGTdCs\nBuilding Timeline: Scaling up to hold your life story: https://goo.gl/8p5wDV\nErlang at Facebook (Facebook chat): https://goo.gl/zSLHrj\nFacebook Chat: https://goo.gl/qzSiWC\nFinding a needle in Haystack: Facebook’s photo storage: https://goo.gl/edj4FL\nServing Facebook Multifeed: Efficiency, performance gains through redesign:\nhttps://goo.gl/adFVMQ\nScaling Memcache at Facebook: https://goo.gl/rZiAhX\nTAO: Facebook’s Distributed Data Store for the Social Graph: https://goo.gl/Tk1DyH\nAmazon Architecture: https://goo.gl/k4feoW\nDynamo: Amazon’s Highly Available Key-value Store: https://goo.gl/C7zxDL\nA 360 Degree View Of The Entire Netflix Stack: https://goo.gl/rYSDTz\nIt’s All A/Bout Testing: The Netflix Experimentation Platform: https://goo.gl/agbA4K\nNetflix Recommendations: Beyond the 5 stars (Part 1): https://goo.gl/A4FkYi\nNetflix Recommendations: Beyond the 5 stars (Part 2): https://goo.gl/XNPMXm\nGoogle Architecture: https://goo.gl/dvkDiY\nThe Google File System (Google Docs): https://goo.gl/xj5n9R\nDifferential Synchronization (Google Docs): https://goo.gl/9zqG7x\nYouTube Architecture: https://goo.gl/mCPRUF\nSeattle Conference on Scalability: YouTube Scalability: https://goo.gl/dH3zYq\nBigtable: A Distributed Storage System for Structured Data: https://goo.gl/6NaZca\nInstagram Architecture: 14 Million Users, Terabytes Of Photos, 100s Of Instances, Dozens\nOf Technologies: https://goo.gl/s1VcW5\nThe Architecture Twitter Uses To Deal With 150M Active Users: https://goo.gl/EwvfRd\nScaling Twitter: Making Twitter 10000 Percent Faster: https://goo.gl/nYGC1k\nAnnouncing Snowflake (Snowflake is a network service for generating unique ID numbers at\nhigh scale with some simple guarantees): https://goo.gl/GzVWYm\nTimelines at Scale: https://goo.gl/8KbqTy\nHow Uber Scales Their Real-Time Market Platform: https://goo.gl/kGZuVy\nScaling Pinterest: https://goo.gl/KtmjW3\nPinterest Architecture Update: https://goo.gl/w6rRsf", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "THE", "subcategory": "LEARNING CONTINUES"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=sharing", "category": "THE", "subcategory": "LEARNING CONTINUES"}}
{"instruction": "Проаналізуй цей запит", "input": "ПО, Схема Уинстона Ройса, которая стала источником", "output": {"text": "вдохновения для разработки каскадной модели\nсхемы и не продвигал ее в качестве плана. В действительности\nграфик представлял собой изображение соломенного человечка\nи помогал Ройсу ориентироваться в последующих страницах сво­\nего труда.\nСхема была расположена на видном месте. А учитывая, что люди\nделают логические выводы о содержании статьи, посмотрев схему\nна первой или второй странице, это привело к резкому сдвигу в от­\nрасли программного обеспечения.\nСхема, первоначально составленная Ройсом, гораздо больше на­\nпоминала ручей, стекающий вниз со скалистого хребта, чем ныне\nизвестную каскадную модель.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "Agile - Каскадная модель стала логическим продолжением научной", "output": {"text": "Каскадная модель стала логическим продолжением научной орга­\nнизации труда. При использовании этой модели на первый план\nставится тщательный анализ, составление подробного плана, а за­\nтем уже доведение этого плана до завершения. Хотя Ройс и не\nрекомендовал такой подход, но именно эту концепцию вынесли\nиз его работы. А потом эта концепция главенствовала в отрасли\nболее трех десятков лет1.\nКак раз тогда и начинается моя история. В 1970-м мне было 18 лет,\nя работал программистом в компании A. S. C. Tabulating, располо­\nженной в Лейк Блафф, Иллинойс.\nУ компании был компьютер IBM 360/30 с памятью на магнитных\nсердечниках 16 килобайт, IBM 360/40 с памятью 64 килобайта\nи микрокомпьютер Varian 620/f с памятью 6 килобайт. Я писал\nпрограммы для семейства 360 на COBOL, PL/1, Fortran и ассем­\nблере. Для 620/f я писал только на ассемблере.\nВажно помнить, каково в то время было программистам. Мы\nписали код в программных формулярах с помощью карандашей.\nУ нас были операторы, работающие за перфоратором, которые\nнаносили программы на карты. Мы передавали тщательно выве­\nренные перфокарты операторам ЭВМ, которые проводили ком­\nпиляцию и тестирование в третью смену, поскольку днем, когда\nработа кипела, компьютеры были постоянно заняты. От начала\nнаписания кода до первой компиляции зачастую проходило не­\nсколько дней, каждый цикл разработки вследствие этого занимал,\nкак правило, сутки.\n1\t Стоит отметить, что мое толкование этой временной шкалы подвергли\nсомнениям. См.: Bossavit L. The Leprechauns of Software Engineering: How\nFolklore Turns into Fact and What to Do About It, Ch. 7. Leanpub, 2012.\n\nИстория Agile\n33\nДля меня 620/f выглядел несколько иначе. Эту машину выделили\nнашей команде, поэтому мы могли работать на ней столько, сколь­\nко вздумается. Мы проводили два, три, иногда даже четыре цикла\nразработки и тестирования за сутки. Вместе со мной в команде\nбыли люди, которые, в отличие от большинства программистов\nтого времени, умели печатать. Поэтому мы могли штамповать свои\nсобственные колоды перфокарт, а не зависеть от капризов опера­\nторов, работающих за перфоратором.\nКакую методологию мы использовали на протяжении того вре­\nмени? Это, конечно, была не каскадная модель. У нас не было\nконцепций или подробных планов. Мы просто писали код каждый\nдень, компилировали, тестировали и устраняли ошибки. Это был\nбесконечный цикл без структуры. Также это был не Agile и даже не\nпрото-Agile. В ходе работ мы не придерживались каких-либо пра­\nвил организации. Тогда не было каких-либо пакетов программ для\nтестирования и измеряемых временных интервалов. Просто надо\nбыло писать код и фиксить баги. День за днем, месяц за месяцем.\nВпервые я узнал о каскадной модели из профессиональных журна­\nлов около 1972 года. Мне она казалась даром свыше. Неужели мы\nмогли бы проанализировать задачу, потом предложить ее решение,\nа затем реализовать замысел? Реально ли было на самом деле раз­\nработать график, основанный на трех перечисленных этапах?\nНеужели, когда выполнен анализ, проект продвинется вперед на\nтреть? Я почувствовал силу этой концепции. Я хотел в это верить.\nЕсли идея сработает, то мечта воплотится.\nСудя по всему, я был не один, потому что многие другие програм­\nмисты и центры программирования тоже вошли в кураж. И, как\nя уже писал, в нашем мышлении начала преобладать каскадная\nмодель.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "Она преобладала, но не работала.", "output": {"text": "Она преобладала, но не работала. В течение последующих тридца­ти лет мои коллеги, я, братья и сестры по программированию по\nвсему миру неустанно старались получить право на проведение\nанализа и проектирование. Но каждый раз, когда мы думали, что\nполучали желаемое, оно ускользало из наших рук на этапе реали­\nзации. Месяцы тщательного планирования пошли прахом из-за\nнеобходимости сделать безумный рывок, в итоге мы сорвали сроки\nпод свирепыми взглядами менеджеров и заказчиков.\nНесмотря на практически нескончаемый поток неудач, мы все\nравно настаивали на состоятельности каскадной модели. В конце\nконцов, почему возникали неудачи? Почему тщательный анализ\nзадачи, внимательное проектирование решения и последующая ре­\nализация нескончаемо терпят зрелищный крах? Никто даже поду­\nмать не мог, что дело было в самой стратегии. Задача должна была\nлечь на наши плечи. Как бы то ни было, что-то мы делали не так.\nЧтобы увидеть, насколько каскадная модель захватила наши умы,\nпосмотрите на программные языки того времени. Когда Дейкстра\nв 1968 году представил структурное программирование, структур­\nный анализ1 и структурный дизайн2 не сильно отставали. В 1988\nгоду, когда объектно-ориентированное программирование (ООП)\nнабрало популярность, объектно-ориентированный анализ3 и объ­\nектно-ориентированное проектирование4 также не сильно отста­вали. Эта тройка идей, эти три этапа словно держали нас в плену.\nМы просто не могли представить, что можно работать как-то по-\nдругому.\nА потом оказалось, что можно.\nЗародыши преобразований, связанных с Agile, появились в конце\n1980-х или в начале 90-х. В сообществе Smalltalk их признаки\nначали проявляться в 1980-х. В книге Буча по объектно-ориен­\nтированному проектированию, вышедшей в 1991-м, были намеки\nна них10. Прочие решения возникли в 1991 г. в книге Кокберна\nCrystal Methods. Сообщество Design Patterns начало обсуждать\nэто в 1994-м под влиянием статьи, написанной Джеймсом Ко­\nплиеном1.\nК 1995 году Бидл2, Девос, Шэрон, Швобер и Сазерленд написали\nсвои знаменитые труды о Scrum (Скрам)3. И затворы открылись.\nНа бастионе каскадной модели образовалась брешь, и пути назад\nне было.\nИ здесь я снова возвращаюсь к нашей истории. То, что я расскажу\nдальше, — мои личные воспоминания, я не сверял их ни с кем из\nсовременников, участников событий. Поэтому следует предполо­\nжить, что в моих воспоминаниях много опущений, недостоверно­\n1\t Coplien J. O. A generative development-process pattern language. Pattern\nLanguages of Program Design. Reading, Massachusetts: Addison-Wesley, 1995.\nP. 183.\n2\t Майк Бидл был убит 23 марта 2018 года в Чикаго психически нездоровым\nчеловеком, до этого арестованным и отпущенным 99 раз, который должен\nбыл находиться в психбольнице. Майк Бидл был моим другом.\n3\t Beedle M., Devos M., Sharon Y., Schwaber K., Sutherland J. SCRUM: An\nextension pattern language for hyperproductive software development. Ссыл­ка: http://jeffsutherland.org/scrum/scrum_ plop.pdf.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "Но не переживайте,\nя по крайней мере постарался рассказать все занимательно", "output": {"text": "Но не переживайте,\nя по крайней мере постарался рассказать все занимательно.\nВ первый раз мы встретились с Кентом Беком в 1994 году на той\nсамой конференции PLoP1, когда Коплин представил свою работу.\nЭто была неформальная встреча, которая толком ничего не принес­\nла. В следующий раз я встретил его в феврале 1999-го в Мюнхене\nна конференции, посвященной ООП. Но к тому времени я уже\nзнал о нем намного больше.\nВ то время я занимался консультированием по C++ и объектно-\nориентированному проектированию, летал с места на место, по­\nмогал разрабатывать и реализовывать приложения на C++ с по­\nмощью методик объектно-ориентированного проектирования.\nКлиенты стали расспрашивать меня о процессе. Они слышали, что\nкаскадная модель не применяется в объектно-ориентированном про­\nектировании, и хотели услышать от меня совет. Я согласился с ними2\nи стал дальше думать об этом, мысли захватывали меня все сильнее.\nЯ даже подумывал написать свою собственную объектно-ориенти­\nрованную методологию. К счастью, я скоро прекратил эти попытки,\nпоскольку мне в руки попали труды Кента Бека по экстремальному\nпрограммированию (XP).\nЧем больше я читал об экстремальном программировании, тем\nбольше я увлекался им. Идеи были революционны (по крайней\n1\t Pattern Languages of programming — конференция, которую проводили\nв 1990-х неподалеку от университета штата Иллинойс.\n2\t Это одно из тех странных совпадений, которые происходят время от време­\nни. Нет ничего такого особенного в объектно-ориентированном програм­\nмировании, что не дает применять в нем каскадную модель, тем не менее\nэта идея набирала в те дни популярность.\n\nИстория Agile\n37\nмере, я тогда так думал). Они казались разумными, особенно\nв контексте объектно-ориентированного мышления (опять же\nна тот момент я думал именно так). Мне не терпелось узнать\nбольше.\nК моему удивлению, на той самой конференции в Мюнхене, посвя­\nщенной объектно-ориентированному программированию, я заме­\nтил, что через зал от меня читает лекцию сам Кент Бек. Как-то раз\nво время перерыва я натолкнулся на него и предложил встретиться\nкак-нибудь за завтраком, чтобы обсудить экстремальное програм­\nмирование. На том завтраке был заложен фундамент для плодо­\nтворного партнерства. Наши обсуждения побудили меня полететь\nк нему в Медфорд, штат Орегон, чтобы совместно разрабатывать\nкурс по экстремальному программированию.\nВ ходе этого визита я впервые попробовал поучаствовать в раз­\nработке через тестирование, и это меня увлекло.\nВ то время под моим управлением была компания Object Mentor.\nВ сотрудничестве с Кентом Беком мы хотели предложить пяти­\nдневный учебный курс по экстремальному программированию,\nкоторый назывался XP Immersion. С конца 1999-го по 11 сентября\n2001 года1 он производил настоящий фурор! Мы обучили сотни\nчеловек.\nЛетом 2000 года Кент Бек созвал кворум из сообщества по экс­\nтремальному программированию и паттернам. Встреча проходила\nнедалеко от его дома. Он назвал ее встречей ведущих специалистов\nв области экстремального программирования. Мы катались на\nлодках и прогуливались по берегу реки Рог. И заодно решали, что\nделать дальше с экстремальным программированием.\n1\t Этот день очень значим, поэтому его стоило упомянуть.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "СНОУБЕРД", "output": {"text": "Я был немало удивлен тем, что так много людей решило по­сетить\nмероприятие. Неужели кому-то действительно была интересна\nвстреча, темой которой были легковесные методологии?\n\nСноуберд\n39\nОднако мы все собрались в Сноуберде в гостиничном номере с пре­\nкрасным видом из окна.\nПришли 17 человек. С тех пор нас не раз критиковали за то, что все\nсобравшиеся были белыми мужчинами среднего возраста. Критика\nбыла бы вполне справедлива, если бы не одно «но». Дело в том, что\nв списке приглашенных фигурировала одна женщина — Агнета\nЯкобсон, но она не смогла приехать.\nИ, в конце концов, в то время во всем мире подавляющее большин­\nство квалифицированных программистов было белыми мужчина­\nми среднего возраста. А вот почему так сложилось — это отдельная\nистория для совершенно другой книги.\nУ всех 17 из нас были довольно разные взгляды на пять различных\nлегковесных методологий. Сторонников экстремального про­\nграммирования было больше всех. Это были Кент Бек, Джеймс\nГреннинг, Уорд Каннингем, Рон Джеффрис и я.\nСторонников Scrum было немного меньше — Кен Швабер, Майк\nБидл и Джефф Сазерленд.\nДжон Керн высказывался в поддержку разработки, управляемой\nфункциональностью, а Ариван Беннекум был сторонником мето­\nда разработки динамических систем. Наконец, Алистер Кокберн\nвыступал за семейство методик, являвшихся его собственной раз­\nработкой — Crystal.\nОстальные участники были относительно самостоятельны. На­\nпример, Энди Хант и Дейв Томас пропагандировали прагматизм\nв программировании. Они даже написали работу на эту тему. Брай­\nан Марик был консультантом по тестированию. Джим Хайсмит\nбыл консультантом по управлению разработкой и сопровождению", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "Стив Меллор следил за честностью каждого, потому что был", "output": {"text": "управляемых\nмоделями, к которым многие из нас относились с недоверием.\nИ, наконец, присутствовал Мартин Фаулер. У него были личные\nвзаимоотношения с командой, занимавшейся экстремальным про­\nграммированием, однако к каким-либо «фирменным» методикам\nон относился довольно скептически. Мнения всех присутствую­\nщих он воспринимал благожелательно.\nЯ почти ничего не помню из того, что произошло за два дня нашей\nвстречи. Другие участники событий видят картину по-своему, не\nтак, как я1. Поэтому просто расскажу вам то, что сам помню. Рас­\nценивайте мои слова как воспоминания пожилого человека. Мне\nуже 65, а с того времени прошло почти два десятка лет. Возможно,\nя упустил несколько подробностей, но суть, думаю, передал пра­\nвильно.\nКаким-то образом мы решили, что я буду открывать встречу. Я по­\nблагодарил всех за присутствие и высказал мнение, что наша\nцель состоит в составлении манифеста, в котором бы говорилось\nо разработке программного обеспечения в целом и описывались\nобщие черты всех легковесных методологий, подмеченные нами.\nЗакончив, я сел.\nЯ считаю, что это был мой единственный вклад в проведение\nвстречи.\n1\t Не так давно увидела свет история события, изложенная в литературном\nжурнале The Atlantic за авторством Кэролайн Мимбс Найс: Caroline\nMimbs Nyce. The winter getaway that turned the software world upside\ndown // The Atlantic. 08.12.2017. URL: https://www.theatlantic.com/technology/\narchive/2017/12/agile-manifesto-a-history/547715/. Когда я это все писал, то еще\nне ознакомился с той статьей, поскольку мне не хотелось путать свои вос­\nпоминания, которые я изложил здесь.\n\nСноуберд\n41\nМы не занимались ничем необычным, когда записывали различные\nпроблемы на карточках, а затем сортировали их на полу в группы\nпо сходству. На самом деле я понятия не имею, что это нам дало.\nПросто помню, что мы это делали.\nЗатрудняюсь сказать, на какой день произошло чудо, — на пер­\nвый или второй. Как мне кажется, это произошло к концу первого\nдня.\nВозможно, именно группирование по сходству помогло нам вы­\nделить четыре ценности: личности и взаимодействие, рабочее\nпрограммное обеспечение, взаимодействие с клиентами и реаги­\nрование на изменения. Кто-то написал это на магнитно-маркерной\nдоске, находившейся в передней части комнаты. Затем ему в голову\nпришла блестящая мысль о том, что эти ценности приоритетны, но\nне заменяют остальные взаимодополняющие ценности методов,\nинструментов, документации, договоров и планов.\nЭто ключевая идея Манифеста Agile, и, кажется, никто отчетливо\nне помнит, кто первый обозначил ее на доске. Как мне помнится,\nэто был Уорд Каннингем. Но сам Уорд приписывает это авторство\nМартину Фаулеру.\nПосмотрите на фотографию на сайте agilemanifesto.org. Уорд го­\nворит, что сделал снимок, чтобы запечатлеть тот самый момент.\nНа фото можно разглядеть Мартина Фаулера у доски и прочих\nучастников встречи, которые собрались вокруг него1. Это придает\n1\t Слева направо, полукругом около Мартина Фаулера, на фотографии пред­\nставлены: Дейв Томас, Энди Хант (или, возможно, Джон Керн), я (меня\nможно узнать по синим джинсам и мультитулу на ремне), Джим Хайсмит,\nкто-то, Рон Джеффрис и Джеймс Греннинг. Кто-то, уже не помню кто,\nсидел позади Рона. Возле его ботинка на полу, похоже, находится одна из\nкарточек, которые мы использовали при группировке по сходству.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "правдоподобность высказыванию Уорда о том, что идея на самом\nделе принадлежала Мартину.", "output": {"text": "С другой стороны, возможно, и хорошо, что мы никогда уже этого\nне узнаем точно.\nКак только произошло чудо, все собравшиеся объединились под\nего знаменем. Мы проявляли таланты ораторского мастерства, как\nмогли. Насколько мне помнится, именно Уорд написал преамбулу\nк Манифесту, которая гласила: «Мы постоянно открываем для себя\nболее совершенные методы разработки программного обеспечения,\nзанимаясь разработкой непосредственно и помогая в этом другим».\nНекоторые из нас внесли крошечные изменения и предложения,\nоднако было ясно, что мы достигли согласия. В номере ощущалась\nизоляция от всего мира. Никаких разногласий. Никаких споров.\nНикаких обсуждений или альтернатив. В этих четырех строках\nбыла вся суть. Люди и взаимодействие важнее процессов и инструментов. Работающий продукт важнее исчерпывающей документации. Сотрудничество с заказчиком важнее согласования условий\nконтракта. Готовность к изменениям важнее следования первоначальному\nплану.\nЯ говорил, что это все? Тогда так и казалось. Но, конечно, пред­\nстояло прояснить много частностей. Первая их них — как назвать\nто, что нам удалось определить?\nНазвание Agile не сулило легкого успеха. Было много разных\nпретендентов. Мне понравилось что-то вроде «легковесный»\n(lightweight), но кроме меня — никому. Остальные считали, что\n\nСноуберд\n43\nв таком названии подразумевалась несущественность. Им полюби­\nлось слово «адаптивный» (adaptive). Кто-то вспомнил слово agile1,\nа кто-то заметил, что в то время это слово было в ходу в армии.\nВ результате, хотя никому особо не нравилось слово agile, его вы­\nбрали в качестве названия как наименьшее из зол.\nКогда второй день подходил к концу, Уорд вызвался самостоятель­\nно сделать сайт agilemanifesto.org и опубликовать манифест. По­\nлагаю, что выставить манифест на всеобщее обозрение — его идея.\nПосле событий в  Сноуберде\nСледующие две недели были не столь насыщенны и романтичны,\nкак те два дня в Сноуберде. В основном это время было занято тру­\nдоемкой работой над составлением документа, провозглашавшего\nнаши ценности, который Уорд в итоге выложил на сайт.\nМы все соглашались в необходимости написать такой документ,\nчтобы показать и объяснить четыре ценности. Все же те четыре\nценности являются своего рода утверждениями, с которыми каж­\nдый может согласиться, не внося при этом в их понимание никаких\nизменений. Принципы дают понимание того, что действие этих\nценностей выходит за пределы второстепенного значения так на­\nзываемых прописных истин.\nУ меня мало отчетливых воспоминаний того времени, но помню,\nкак мы пересылали по электронной почте документ с принципами\nдруг другу туда-сюда, неустанно пытаясь дополнить его. Было\nсложно, но мы все понимали, что это стоит наших усилий. Когда\nвсе было сделано, каждый из нас вернулся к своей обыденной жиз­\n1\t С англ. «живой», «проворный», «гибкий». — Примеч. пер.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "КРАТКИЙ ОБЗОР AGILE", "output": {"text": "Как вести управление проектом по разработке и сопровождению\nпрограммного обеспечения? На протяжении многих лет существо­\nвало много подходов — и большинство из них, мягко говоря, далеки\nот идеала. Надежды и молитвы распространены среди менеджеров,\nверующих в то, что судьба их проекта зависит от воли божьей.\nА те, кто в это не верит, частенько полагаются на мотивационные\nметодики: жесткие сроки с наказаниями плетками, цепями, рас­\nкаленным маслом, фотографии людей, покоряющих скалы, и чаек,\nпарящих над морем.\nПодобные подходы почти повсеместно приводят к характерным\nпризнакам отвратительного управления проектами — команды\nразработчиков постоянно задерживают проект, несмотря на то\nчто много работают сверхурочно. Команды, которые пишут про­\nграммы явно низкого качества, не соответствующие потребностям\nклиентов.\n\nКраткий обзор Agile\n45\nПравило креста\nПричина, по которой эти методы терпят крах, заключается в том,\nчто менеджеры не понимают элементарную сущность программ­\nных проектов. Сама сущность любого проекта накладывает на него\nограничения. Есть такое понятие в управлении проектами, как\n«правило креста». Хорошо, быстро, дешево, готово. Выбирайте три\nлюбых пункта. Но четвертый будет не под силу. Проект может быть\nодновременно хорошим, дешевым, быстро выполняться. Но он\nникогда не будет завершен. Проект может быть завершен, и быть\nпри этом быстрым и дешевым. Но вот хорошим не выйдет.\nРеальность диктует свои правила, и умелый менеджер понимает,\nчто у всех четырех параметров есть свои коэффициенты. В руках\nграмотного менеджера проект будет достаточно хорошим и деше­\nвым, достаточно быстро выполняться и при этом будет завершен на\nтребуемом этапе. Умелый менеджер распределяет эти коэффици­\nенты по нужным параметрам, а не выдвигает требования к проекту\nпо всем параметрам на 100 %. Такой способ управления проектами\nстарается внедрить Agile.\nСейчас я хотел бы убедиться в вашем понимании того, что Agile —\nэто набор методов, помогающий разработчикам и менеджерам про­\nявлять необходимый прагматизм в управлении проектами. Однако\nтакое управление не достигается автоматически. Нет никаких гаран­\nтий, что менеджер примет уместное решение. Действительно, вполне\nможно работать в рамках набора методов Agile, но несмотря на это\nуправление проектом будет неграмотным и проект провалится.\nГрафики на стенах\nНо как Agile способствует управлению проектами? Agile предо­\nставляет данные. Когда применяется методология Agile, команда", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "Agile разработчиков передает менеджерам именно те сведения, которые\nпозволяют принимать верные решения.", "output": {"text": "Присмотримся к рис. 1.2. Представим, что такой график висит на\nстене кабинета, где ведется разработка проекта. Разве это не было\nбы потрясающе?\nСкорость\nЕдиницы сложности\n60\n50\n40\n30\n20\n10\n0\n20.01.2003\n27.01.2003\n03.02.2003\n10.02.2003\n17.02.2003\n24.02.2003\n03.03.2003\n10.03.2003\nРис. 1.2. Скорость работы команды\nЭтот график отражает производительность команды разработчи­\nков за каждую неделю. Единицы измерения — единицы сложности\n(story point). Мы поговорим о них позже. Просто посмотрите на\nэтот график. Каждый может сделать вывод, взглянув на график,\nнасколько быстро продвигается работа команды. Менее чем за де­\nсять секунд можно понять, что средняя скорость работы составляет\n45 единиц в неделю.\nКто угодно, даже сам менеджер, поймет, что на следующей неделе\nкоманда выполнит около 45 единиц работы. Получается, что че­\nрез десяток недель команда выполнит уже примерно 450 единиц.\nВот это мощь! Особенно это хорошо помогает, когда менеджеры\n\nКраткий обзор Agile\n47\nи коман­да хорошо осознают, сколько всего единиц насчитывает\nпроект. На самом деле опытные команды, практикующие Agile,\nчерпают эти сведения из еще одного графика.\nОставшиеся единицы сложности\nЕдиницы сложности\n600\n500\n400\n300\n200\n100\n0\n20.01.2003\n27.01.2003\n03.02.2003\n10.02.2003\n17.02.2003\n24.02.2003\n03.03.2003\n10.03.2003\nРис. 1.3. Диаграмма сгорания задач\nНа рис. 1.3 изображена диаграмма сгорания задач. По ней можно\nсудить, сколько единиц остается до следующей крупной вехи.\nОбратите внимание на то, как уменьшаются столбики с каждой\nнеделей. Это связано с тем, что в процессе разработки постоянно\nпоявляются новые требования и проблемы.\nОбратите внимание и на то, что у диаграммы сгорания задач есть\nугол наклона, который позволяет предположить, когда примерно\nбудет достигнута нужная веха. Буквально любой может взглянуть\nна оба графика и вычислить, что следующий этап начнется в июне\nпри скорости работ 45 единиц в неделю.\nПрисмотритесь внимательно к диаграмме, в ней есть странность.\nСтолбец, обозначенный 17 февраля, почему-то выбивается из\nряда. Это может быть связано с добавлением новой функции или", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "Agile, некоторыми другими существенными изменениями в требовани­ях.", "output": {"text": "Или так получилось в результате переоценки разработчиками\nоставшегося объема задач. В любом случае мы хотим знать, как\nход работ отражается на графике, чтобы организовать правильное\nуправление проектом.\nПри использовании Agile чрезвычайно важно, чтобы эти два гра­\nфика были на виду. Одна из движущих сил при использовании\nAgile во время разработки программного обеспечения — предо­\nставление данных, необходимых менеджерам для распределения\nкоэффициентов по параметрам согласно правилу креста и наибо­\nлее благополучного завершения проекта.\nМногие не согласятся с этим. В конце концов, эти графики не упо­\nминаются в Манифесте Agile, поэтому не все команды, его практи­\nкующие, их применяют. И если говорить начистоту, сами графики\nне так уж и важны. Важны как раз-таки данные.\nAgile — это в первую очередь подход, который срабатывает только\nтогда, когда есть обратная связь. Каждая неделя, день, час и даже\nминута проходят в зависимости от результатов предыдущей не­\nдели, дня, часа или минуты. Соответствующие поправки вносятся\nуже после. Это относится как к управлению отдельными програм­\nмистами, так и командами программистов целиком. Без необходи­\nмых данных не получится эффективного управления1.\nПоэтому даже если у вас на стене нет этих графиков, убедитесь\nв том, что есть данные, необходимые для управления. Убедитесь\n1\t Этот принцип тесно связан с циклом НОРД — петлей Джона Бойда,\nкратко изложенным здесь: https://ru.wikipedia.org/wiki/Цикл_НОРД. Boyd J.  R.\nA Discourse on Winning and Losing. Air Force Base Maxwell, Alabama:\nAeronautics University Library, 1987. Document No. M-U 43947.\n\nКраткий обзор Agile\n49\nв том, что менеджеры знают, насколько быстро продвигается\nкоман­да и сколько работы осталось сделать для завершения про­\nекта. И предоставьте эти сведения в прозрачной, легкодоступной\nи очевидной форме — в виде двух графиков.\nПочему же эти данные настолько важны? Разве можно эффективно\nвести управление проектом без таких данных? Мы пытались. Три\nдесятка лет. И все получилось так, как получилось...\nПервое, о  чем нужно знать\nЧто в первую очередь нужно знать о проекте? Прежде чем узнать\nназвание проекта или требования к нему, прежде чем делать во­\nобще какие-то движения, нужно получить еще некоторые сведения.\nКонечно же, это сроки. Уже после того, как выбраны сроки, их\nнужно зафиксировать. В обсуждении сроков нет смысла, поскольку\nих устанавливают в связи с объективными деловыми причинами.\nЕсли сроком стоит сентябрь, это не просто так. Возможно, в сен­\nтябре намечается какая-то выставка или собрание акционеров,\nа может, просто-напросто закончатся средства. Какой бы ни была\nпричина, она имеет какую-то важную подоплеку. И причина не из­\nменится просто оттого, что кому-то из разработчиков объем задач\nпокажется непосильным.\nВ то же время требования могут изменяться в непрерывном потоке,\nкоторый нельзя зафиксировать.\nИ на это тоже есть причина — клиенты зачастую не знают, чего\nименно они хотят. Они вроде и знают, какую проблему им нужно\nрешить, но перевести такие знания в требования к проекту всегда\nзатруднительно. Поэтому происходит постоянная переоценка\nи переосмысливание требований. Добавляются новые функции.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "Agile - Какие-то старые исчезают. Пользовательский интерфейс изменя­ется быстро — за недели", "output": {"text": "если не за дни.\nТак выглядит мир разработки программного обеспечения. В этом\nмире сроки фиксированы, а требования постоянно меняются.\nИ каким-то образом в контексте всего этого разработчикам нужно\nблагополучно завершить проект.\nСобрание\nКаскадная модель пророчила нам способ пойти в обход этой за­\nдачи. Чтобы объяснить, насколько это было соблазнительно и не­\nэффективно одновременно, я приведу в пример одно собрание.\nБыло первое мая. Большой босс созвал подчиненных в кон­ференц-\nзал.\nБосс начал: «У нас новый проект. Нужно его закончить к перво­\nму ноября. Никаких требований у нас пока нет. Нам их огласят\nв ближайшие пару недель. Сколько времени понадобится на анализ\nпроекта?»\nМы вопросительно стали коситься друг на друга. Все молчали,\nбоясь сказать лишнего. Никто понятия не имел, что на это от­\nветить. Кто-то промямлил: «Так у нас же нет требований, от чего\nотталкиваться?»\n«Представьте, что они есть! — завопил босс.  — Вы прекрасно знаете,\nкак все работает. Вы ж специалисты! Мне не нужны точные сроки.\nМне просто нужно как-то заполнить график. Имейте в виду, что\nесли это займет более двух месяцев, о проекте можно уверенно\nзабыть».\n\nКраткий обзор Agile\n51\nКто-то вопросительно пробормотал: «Два месяца?» Началь­\nник воспринял это как согласие на условия: «Отлично! Как раз\nто, что я думал. Теперь скажите мне, сколько займет проектиро­\nвание?»\nИ снова все застыли в недоумении, комнату наполнила мерт­\nвая тишина. Считаем. И осознаём, что до первого ноября всего\nполгода. Вывод напрашивается сам собой. «Два месяца?» — спро­\nсите вы.\n«Совершенно верно! — большой босс лучезарно заулыбался.  —\nКак я и думал. И на реализацию у нас остается два месяца. Всем\nспасибо, все свободны!»\nМногие читатели наверняка вспомнили, что что-то такое с ними\nуже было. У кого такого не было, что ж сказать, вы счастливчики!\nЭтап анализа\nИтак, предположим, что мы ушли из конференц-зала и разбрелись\nпо кабинетам. Что делать дальше? Начинается этап анализа —\nзначит, нужно что-то анализировать. Но что именно мы называем\nанализом?\nЕсли почитать книги на тему анализа в разработке программного\nобеспечения, можно обнаружить, что каждый автор дает собствен­\nное определение. Нет единого мнения, что такое анализ. Он может\nпредставлять собой создание структурной декомпозиции требо­\nваний. А может — обнаружение и уточнение требований. Может\nпредставлять собой создание основополагающей модели данных\nили объекта и так далее… Лучшее определение анализа таково: это\nто, чем занимаются аналитики.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "Конечно, есть очевидные вещи. Нам нужно оценить размер про­екта,", "output": {"text": "спрогнозировать показатели основных технико-экономиче­\nских и человеческих ресурсов. Нужно убедиться, что график работ\nвыполним. Это самое малое, чего будет ожидать от нас компания.\nЧто бы ни называлось анализом, это как раз то, чем мы собирались\nзаниматься ближайшие два месяца.\nЭто своего рода благоприятный этап проекта. Все спокойно про­\nсматривают страницы в интернете, проводят небольшие сделки,\nвстречаются с клиентами и пользователями, рисуют красивые\nграфики, попросту говоря, весело проводят время.\nЗатем первого июля происходит чудо. Анализ завершен.\nА почему мы так считаем? Потому что уже первое июля. Если по\nграфику этап анализа должен завершиться первого июля, зна­\nчит, что первого июля этот этап завершен. Мы ведь не опоздали?\nПоэтому устроим небольшую вечеринку с воздушными шарами\nи пламенными речами, отпразднуем наш переход от этапа анализа\nк этапу проектирования.\nЭтап проектирования\nА что теперь делать? Конечно же, будем проектировать. Но что\nпредставляет собой проектирование?\nОб этапе проектирования программного обеспечения нам известно\nчуть больше. На этом этапе мы разбиваем проект на отдельные\nмодули и проектируем интерфейсы между этими модулями. На\nэтом этапе мы также предполагаем, сколько команд нам понадо­\nбится и как эти команды будут связаны между собой. В общем,\nнужно уточнить график работ, чтобы составить правдоподобный\nосуществимый план по реализации.\n\nКраткий обзор Agile\n53\nБезусловно, на этом этапе что-то неожиданно меняется. Добав­\nляются новые функции. Старые функции исчезают или коррек­\nтируются. И было бы неплохо оглянуться назад и провести ана­\nлиз изменений заново, но время — деньги. Поэтому мы всеми\nвозможными способами стараемся внести изменения в проекти­\nрование.\nИ тогда случается новое чудо. Первого сентября мы внезапно за­\nвершаем проектирование. А почему так? Да потому что. Первое\nсентября. По графику работ мы должны были уже закончить. Не­\nзачем медлить.\nИтак, еще одна вечеринка. Воздушные шары и речи. И мы проры­\nваемся к следующему этапу — реализации.\nБыло бы замечательно провернуть такую схему еще разок. Эх, если\nбы точно так же можно было бы завершить этап реализации! Но\nтак уже не выйдет. Потому что по завершении реализации требу­\nется завершить и весь проект. Анализ и проектирование не при­\nносят плодов в двоичном виде. У них нет однозначных критериев\nзавершенности.\nНет объективного способа узнать, проведены ли они в реальности.\nПоэтому и получилось завершить эти этапы вовремя.\nЭтап реализации\nА вот у реализации как раз есть отчетливые критерии завершен­\nности. Тут уже не получится аккуратно схалтурить, выдав мнимый\nрезультат за действительный1.\n1\t Однако разработчики сайта healthcare.gov определенно пытались.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "На этапе реализации полностью отсутствует двусмысленность задач.", "output": {"text": "Мы просто пишем код. И нам приходится писать код вто­\nропях, высунув язык, потому что четыре месяца просто выкинули\nна ветер.\nМежду тем требования к проекту продолжают меняться. Добав­\nляются новые функции. Старые функции исчезают или коррек­\nтируются. Нам бы вернуться назад, провести новый анализ и вне­\nсти изменения в проектирование, но...  осталось лишь две недели.\nИ ударными темпами мы вбиваем все эти изменения в код.\nПо мере того как мы смотрим на код и сравниваем его с резуль­\nтатом проектирования, мы осознаём, что, должно быть, были не\nв себе на этапе проектирования, потому что сам код имеет мало\nобщего с тем, что было изначально изображено на замечательных\nграфиках. Но времени на раздумья нет, потому что часики тикают,\nа сверхурочной работы становится все больше.\nПримерно 15 октября кто-то говорит: «Эй, а какое сегодня число?\nКогда сдавать?» И тут мы понимаем, что осталось всего две недели\nи к первому ноября мы ни за что не закончим. И вдруг впервые\nнаши заказчики узнают, что с проектом возникают какие-то не­\nувязочки.\nПредставьте их негодование. «А на этапе анализа нельзя было\nоб этом сказать? Разве не тогда вы должны были оценить раз­\nмер проекта и внимательно рассчитать график работ? А на этапе\nпроектирования почему не сказали? Разве не тогда нужно было\nразбить проект на модули, распределить работу по всей команде\nи рассчитать человеческий ресурс? Почему мы узнаем обо всем за\nдве недели до дедлайна?»\nИ ведь они правы, разве нет?\n\nКраткий обзор Agile\n55\nМарафон на выживание\nИ начинается марафон на выживание. Клиенты злятся. Заинтере­\nсованные стороны дошли до белого каления. Давление нарастает.\nРаботаем сверхурочно. Кто-то уходит с проекта. Просто ад!\nИ уже где-то в марте мы с горем пополам выдаем результат, кото­\nрый лишь наполовину удовлетворяет требованиям клиентов. Все\nрасстроены. У всех опускаются руки. И мы клянемся самим себе,\nчто в следующий раз такого не произойдет. В следующий раз мы\nвсе сделаем по уму. В следующий раз анализ и проектирование\nбудут выполнены на совесть.\nЯ называю это раздуванием вышедшего из-под контроля процесса.\nМы собираемся в следующий раз еще лучше работать по методу,\nкоторый не работает.\nПреувеличение?\nОчевидно, что история утрирована. В ней собрано воедино все\nотрицательное, что вообще может быть во время работы над про­\nектом по разработке программ. Большинство проектов, где приме­\nнялась каскадная модель, не терпели такого краха. Действительно,\nпо счастливой случайности некоторые проекты удавалось завер­\nшить даже относительно успешно. С другой стороны, на подобной\nвстрече я бывал не раз, мне доводилось работать не над одним\nтаким проектом, и такое случалось не только со мной. История\nгиперболизированная, но такое все равно бывает.\nЕсли меня спросить, сколько проектов, разработанных по каскад­\nной модели, провалились с таким же треском, как в описанной\nвыше истории, я отвечу, что сравнительно мало. С другой стороны,\nэто больше, чем ничего, что тоже плохо. Кроме того, большая часть", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "UI", "output": {"text": "Связь\nКонтроль\nUI, связь\nи контроль\nопределенного\nповедения\nРазбиение на подзадачи\nРис. 1.4. Схема проекта\nинтервал в две недели, так как боятся не успеть выполнить задание\nза неделю.\nНулевая итерация\nВо время самой первой итерации, которую иногда называют нуле­\nвой, создается краткий список функций — историй. Об этом будет\nрассказано подробнее далее. А сейчас давайте их рассмотрим как\nфункции, которые нужно разрабатывать.\nВ процессе нулевой итерации также происходит развертывание\nсреды разработки, оценка историй и построение первоначального\nплана. Такой план — это просто предварительное распределение\nисторий по нескольким первым итерациям. Наконец, во время\nнулевой итерации разработчики, в том числе и разработчики архи­\nтектуры, творят чудо — создают первоначальный проект на основе\nпредварительного списка историй.\nПроцесс написания историй, их оценки, планирования и про­\nектирования никогда не прекращается. Поэтому через всю схему\nведения проекта проходит горизонтальная линия, обозначенная", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "словом «исследование». В каждой итерации проекта,", "output": {"text": "словом «исследование». В каждой итерации проекта, от его начала\nдо конца, происходит анализ, проектирование и реализация. Со­\nгласно методологии Agile, постоянно нужно что-то анализировать\nи проектировать.\nНекоторые думают, что Agile — это просто каскадная модель в ми­\nниатюре, которая повторяется многократно.\nЭто не так. Итерации не разделяются на три отрезка. В начале итера­\nции выполняется не только сплошной анализ, а в конце — не только\nодна реализация. Скорее, анализ требований, архитектуры, проек­\nтирования и реализации непрерывно сопровождает всю итерацию.\nЕсли вас это смущает, не переживайте. Об этом еще многое пред­\nстоит узнать в дальнейших главах. Просто имейте в виду, что ите­\nрации — не самая малая составляющая проекта при использовании\nAgile. Существует и много других уровней. Анализ, проектирова­\nние и реализация происходят на каждом из этих уровней. И все это\nне прерывается до самого конца.\nДанные благодаря Agile\nВ начале первой итерации происходит оценка количества историй,\nкоторые нужно выполнить. Команда на протяжении всей итерации\nработает над выполнением собственно этих историй. О том, что\nпроисходит во время этой итерации, будет рассказано позже. Те­\nперь скажите, что лишнего в работе команды, когда она пытается\nвыполнить все истории, запланированные ранее?\nПочти ничего. Так происходит из-за того, что разработка программ­\nного обеспечения плохо поддается точной оценке. Мы, программи­\nсты, просто не знаем, что сколько времени займет. Так происходит\nне потому, что мы тормозим или ленивы, а потому, что просто-на­\n\nКраткий обзор Agile\n59\nпросто невозможно узнать, насколько сложно будет выполнить\nзадание, до тех пор пока мы не принялись за него и не завершили.\nНо, как мы видим, не все так плохо.\nВ конце этой итерации будут выполнены некоторые фрагменты\nранее запланированных задач. За счет этого мы можем предвари­\nтельно измерить количество работы, выполняемой за одну итера­\nцию. А это уже данные о том, как работа продвигается на самом\nделе. Если допустить, что все итерации будут схожи между собой,\nможно применить полученные данные для корректировки перво­\nначального плана и рассчитать дату окончания проекта (рис. 1.5).\nВысокий уровень анализа и проектирования\nРазбиение на подзадачи\nРасчетная дата\n.  .  .  .  .  .     [\n]\nРис. 1.5. Расчет новой даты завершения проекта\nЭтот расчет, вероятно, может огорчить. Почти всегда сроки будут\nв значительной мере выходить за рамки тех, которые были намечены\nизначально. С другой стороны, новые сроки основаны на действи­\nтельных данных, поэтому не получится оставить их без внимания.\nПолучившиеся сроки также не стоит принимать слишком близко\nк сердцу, так как они основаны лишь на одном замере. Погрешности\nпри предварительном расчете данных довольно велики.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "Чтобы уменьшить такие погрешности, должно пройти две, три\nи более итераций. ", "output": {"text": "По мере выполнения работ мы получаем боль­\nше данных о том, сколько историй выполняется за одну итера­\nцию. Мы обнаружим, что их количество различается от итерации\nк итерации, но в среднем получается довольно стабильный расчет\nскорости продвижения. После четырех или пяти итераций у нас\nбудет более ясное представление о сроках завершения проекта\n(рис. 1.6).\nПо мере прохождения итераций погрешности сводятся на нет, до\nтех пор пока не станет ясно, что первоначальный срок выполнения\nпроекта в корне неверен.\n.  .  .  .  .  .  .  . [\n]\nВысокий уровень анализа и проектирования\nРазбиение на подзадачи\nРасчетная дата\nРис. 1.6. Чем больше итераций, тем проще рассчитать сроки сдачи\nпроекта\nНадежда против управления\nЗащита от самообмана — главная цель Agile. Мы применяем Agile,\nчтобы избавиться от ложных надежд, которые в итоге приведут\nпроект к краху.\n\nКраткий обзор Agile\n61\nНадежды убивают проект. Надежды не позволяют команде сообщать\nменеджерам адекватные сведения о продвижении проекта. Когда ме­\nнеджер спрашивает, как продвигаются дела, именно надежда толкает\nпрограммистов на ответ «все хорошо!». Надежда — никудышный\nспособ управления проектом по разработке программного обеспе­\nчения. А Agile — это ушат с холодной водой, который непрерывно\nи своевременно возвращает к действительности.\nНекоторые думают, что Agile способствует скорости выполнения\nпроекта. Это не так. Agile никогда не ставил своей целью выпол­\nнить и сдать проект поскорее. Agile помогает вовремя понять то, где\nи насколько мы облажались. Это нужно для того, чтобы успешно\nсправиться с поставленными задачами. Теперь посмотрим, в чем\nзаключается задача руководителя. Для ведения проекта руководи­\nтели собирают данные и потом уже на их основе принимают наи­\nлучшие решения. Благодаря Agile можно получить необходимые\nданные. Много данных.\nРуководители используют эти данные для того, чтобы привести\nпроект к наилучшему исходу. Наилучший исход из возможных —\nне всегда то же самое, что и желаемый. Наиболее благополучный\nисход может очень разочаровать, особенно заинтересованные\nстороны, изначально вложившиеся в проект. Но наилучший ис­\nход из возможных по определению является лучшим, что можно\nполучить от проекта.\nКак справиться с  правилом креста?\nТеперь вернемся к правилу креста в управлении проектами: хорошо,\nбыстро, дешево, готово. Учитывая данные, полученные при выпол­\nнении проекта, руководство команды программистов может опреде­\nлить, насколько хорошо, быстро, дешево и когда будет готов проект.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "Руководители, отталкиваясь от таких сведений, могут вносить из­менения в объем и график работ,", "output": {"text": "коллектив и задавать планку для\nкачества результата.\nИзменения графика\nНачнем с графика работ. Можно задать вопрос: а что, если про­\nект будет завершен не первого ноября, а первого марта? Обычно\nтакие разговоры напрягают. Помните, что сроки устанавливают по\nобъективным деловым причинам. Причины, конечно же, остались\nтеми же. Перенос сроков зачастую означает, что компания потер­\nпит какие-то убытки.\nС другой стороны, менеджеры временами устанавливают сроки\nпроизвольно, исходя из удобства. Например, в ноябре будет про­\nходить выставка, и компания просто хочет показать себя и пред­\nставить свой проект. Вероятно, в марте будет проходить настолько\nже подходящая для него выставка. Помните, что все равно еще рано\nговорить о сроках окончания. Прошло только несколько итераций\nпроекта. Лучше сказать заинтересованным сторонам, что проект\nбудет готов в марте, чем дождаться, когда они оплатят стенд на\nвыставке, проходящей в ноябре.\nМного лет назад я вел группу разработчиков, которые работали над\nпроектом для телефонной компании. В разгар проекта стало ясно,\nчто сдачу проекта придется отложить на полгода. Мы сообщили\nоб этом руководству компании как можно раньше, насколько это\nвообще было возможно.\nРуководство компании впервые столкнулось с тем, что их преду­\nпредили о переносе сроков вовремя. Они просто зааплодировали\nнам стоя.\nНевероятно. Но было именно так. Один раз.\n\nКраткий обзор Agile\n63\nРасширение команды\nКак правило, никакие компании не хотят переноса сроков. Сроки\nустановлены по объективным деловым причинам, и эти причины\nвсе еще имеют место. Можно увеличить количество сотрудников.\nНа первый взгляд кажется, что если команду расширить вдвое, то\nи дело пойдет вдвое быстрее.\nНо на самом деле прямой взаимосвязи нет. Закон Брукса1 гласит:\n«Если проект не укладывается в сроки, то добавление рабочей\nсилы задержит его еще больше».\nТо, что происходит в реальности, можно увидеть на схеме, изо­\nбраженной на рис. 1.7. Команда уже какое-то время работает над\nпроектом с определенной отдачей. Приходят новички. Произво­\nдительность проседает в течение нескольких недель, потому что\nновичкам необходимо учиться, и они донимают расспросами тех,\nкто уже работает давно. Хочется верить, что потом новички доста­\nточно осваиваются и вносят свой вклад в проект.\nРуководители делают ставку на то, что площадь под этой кривой\nбудет строго положительна. Конечно, понадобится достаточно\nвремени и усилий, для того чтобы компенсировать первона­\nчальные потери.\nДругой фактор: безусловно, расширение коллектива стоит денег.\nЗачастую это непозволительная роскошь для бюджета проекта.\nИтак, давайте предположим, что команду нельзя расширять. Тогда\nследует ожидать изменения качества.\n1\t Брукс Ф. Мифический человеко-месяц, или Как создаются программные\nсистемы. СПб.: Питер, 2020. https://ru.wikipedia.org/wiki/Мифический_че­\nловеко-месяц.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "Истинное следствие расширения команды\nСнижение качества\nОчевидно, что если делать фуфло, то и работа пойдет быстрее.", "output": {"text": "Тогда зачем что-то тестировать, зачем пересматривать код, зачем\nнужен какой-то непонятный рефакторинг? Просто пиши код, и по­\nшло все к чертовой матери! Если надо, пиши код хоть восемьдесят\nчасов в неделю, главное — жги!\nДумаю, вы понимаете, что я хочу сказать. Что это бесполезно.\nКлепая фуфло, вы не достигнете быстроты, вы будете тормозить.\nПоверьте моему опыту, это кристально ясно, когда программиру­\nешь уже двадцать или тридцать лет. Нельзя делать ерунду быстро.\nЕрунда — это всегда тормоз.\nЕсть только один способ быстро продвигаться вперед — нор­\nмально работать.\n\nКраткий обзор Agile\n65\nПоэтому планку качества нужно поднять до максимума и не сни­\nжать. Если нужно ускорить продвижение, тут без вариантов — из­\nвольте повышать качество.\nИзменения объема работ\nЭто последнее из того, что можно поменять. Возможно, но это не\nточно, некоторые запланированные функции совсем не обязатель­\nно нужно предоставить именно первого ноября.\nРасспросим всех заинтересованных лиц: «Господа, если вы хотите\nполучить весь нужный вам функционал, он будет только в марте.\nЕсли вам нужно получить полностью весь функционал к ноябрю,\nнекоторые функции придется исключить». На что нам наверняка\nответят: «Нет, мы ничего исключать не будем! Нам нужно все!\nИ нужно к первому ноября». Однако мы справедливо на то возраз­\nим: «Да, но вы не понимаете. Если вам нужно все, что вы хотите,\nпридется подождать марта». Заинтересованные стороны, вероятнее\nвсего, продолжат бодаться: «Нет, мы хотим получить все необхо­\nдимое! И к первому ноября!»\nТакой спор будет продолжаться какое-то время, потому что никто\nне хочет давать задний ход. У партнеров есть моральное право\nтребовать в этом разговоре то, что им нужно, зато у программистов\nесть данные. И при грамотном раскладе побеждает тот, кто владеет\nданными.\nЕсли проект организован правильно, то заказчики в конечном\nитоге задумчиво покивают головой, соглашаясь со сказанным,\nи начнут тщательный пересмотр плана. По очереди, методом\nисключения, они определят тот функционал, который им нужен\nк ноябрю, как собаке пятая нога. Неприятно, но что поделать,\nесли мы хотим адекватно организовать работу? Итак, план под­", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "ЖИЗНЕННЫЙ ЦИКЛ", "output": {"text": "Схема Рона Джеффриса, изображенная на рис. 1.8, объясняет\nпринципы экстремального программирования. Эта схема также\nизвестна как «жизненный цикл».\nКоманда\nРазработка\nчерез\nтестирование\nНепрерывная\nинтеграция\nКоллективное\nвладение\nРефакторинг\nПарное\nпрограммирование\nИгры\nв планирование\nПростой\nдизайн\nПостоянный\nтемп\nЧастые\nнебольшие\nрелизы\nМетафора\nПриемочное\nтестирование\nРис. 1.8. Жизненный цикл\nЯ посчитал, что для этой книги лучше всего подойдут методы экс­\nтремального программирования, потому что из всех методологий,\nсоставляющих Agile, экстремальное программирование является\nнаиболее определенным, исчерпывающим и наименее замутненным.\nПочти все прочие методологии, входящие в Agile, — это составля­\nющие или разновидности экстремального программирования. Это\nне означает, что остальными методологиями, образующими Agile,\nнужно пренебрегать. Они могут быть очень ценны для различных\nпроектов. Но чтобы понять, что такое Agile и с чем его едят, нет\nспособа лучше, чем изучить экстремальное программирование.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "Оно прообраз, лежащий в основе Agile, который одновременно\nявляется его лучшей составляющей.", "output": {"text": "Кент Бек — отец экстремального программирования, а Уорд Кан­\nнингем — его дедушка. Эти два человека, работая совместно в ком­\nпании Tektronix в середине 1980-х, исследовали множество идей,\nкоторые в конечном итоге породили экстремальное программиро­\nвание. Впоследствии Бек придал этим идеям точную форму. Таким\nобразом, около 1996 года появилось экстремальное программи­\nрование. В 2000 году Кент Бек обнародовал свою окончательную\nработу: Extreme Programming Explained: Embrace Change1.\nЖизненный цикл подразделяется на три кольца. Внешнее кольцо\nотражает методы экстремального программирования при взаимо­\nдействии с клиентами. Это кольцо, по сути, эквивалентно тому, что\nпредлагает методология Scrum2. Эти методы обеспечивают струк­\nтуру взаимодействия между командой разработчиков и клиентами,\nа также принципы, по которым заказчики и разработчики ведут\nуправление проектом. Прием «игра в планирование» занимает центральное поло­\nжение. Благодаря ему мы можем понять, как разбить проект\nпо функциям, историям и задачам. Он содержит указания по\nоценке, постановке приоритетов, а также планированию соот­\nветствующих функций, историй и задач.\n1\t Beck K. Extreme Programming Explained: Embrace Change. Boston, Massa­\nchusetts: Addison-Wesley, 2000. Также существует второе издание 2005 года,\nно мое любимое издание — первое, я считаю именно эту версию окончатель­\nной работой. Возможно, Кент не согласится со мной. (На русском языке:\nБек К. Экстремальное программирование. — СПб.: Питер, 2002. — 224 с.:\nил.  — Примеч. ред.)\n2\t Или, по крайней мере, так изначально задумывалось. Сейчас Scrum вобрал\nв себя множество методов экстремального программирования.\n\nЖизненный цикл\n69 Небольшие и частые релизы не позволяют команде «откусить»\nбольше, чем возможно. Приемочное тестирование позволяет определять, какие функ­\nции реализованы, а также какие истории и задачи выполнены.\nОно показывает команде, как определить однозначные показа­\nтели завершения. «Одна команда» позволяет понять, что в процессе разработ­\nки программного обеспечения принимают участие различные\nспециалисты, в том числе программисты, тестировщики и ру­\nководители, а также то, что клиенты и сами принимают непо­\nсредственное участие, находясь на связи и будучи открытыми\nдля вопросов. Все должны работать совместно для достижения\nобщей цели.\nСреднее кольцо жизненного цикла отражает методы экстремаль­\nного программирования при взаимодействии внутри команды. Эти\nметоды обеспечивают рамочную основу для взаимодействия между\nчленами команды разработчиков, а также для самоуправления. Постоянный темп — это метод, который предохраняет команду\nразработчиков от перерасхода своих сил и банального выгора­\nния до достижения финишной черты. Коллективное владение не позволяет членам команды тянуть\nодеяло на себя, благодаря чему каждый вносит посильный вклад\nв проект и несет ответственность за всю работу. Непрерывная интеграция позволяет команде сосредоточиться\nна частом слиянии рабочих копий в основную ветвь разработ­\nки и частом создании сборок, чтобы своевременно выявить\nошибки и точнее отследить продвижение проекта. Метафора — это метод, который позволяет создавать и ут­\nверждать общую терминологию, благодаря которой команда", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "Таков Agile и история его появления.", "output": {"text": " Agile — небольшая дисци­\nплина, помогающая решению небольших задач, поставленных не­\nбольшими командами программистов для управления небольшими\nпродуктами. Но несмотря на то что Agile невелик сам по себе, его\nзначение и влияние достаточно велико, поскольку все большие\nпроекты так или иначе состоят из множества маленьких.\nС каждым днем программное обеспечение все больше переплета­\nется с нашей повседневностью. Число людей, не мыслящих свою\nжизнь без него, постоянно растет. Не побоюсь сказать, что без про­\nграммного обеспечения Земля перестанет вертеться. Если Земля\nостановится без программного обеспечения, то Agile — именно то,\nчто позволяет наилучшим образом вести его разработку.\n\n2\nПОЧЕМУ ЖЕ AGILE?\n\nПрофессионализм\n73\nПрежде чем углубиться в тонкости разработки с помощью Agile,\nхотелось объяснить, что стоит на кону. Agile важен не только для\nотрасли разработки программного обеспечения, но и для промыш­\nленности, общества и, наконец, всей цивилизации.\nРазработчики и руководители зачастую прибегают к Agile в силу\nкаких-то временных обстоятельств. Они могут использовать его\nпотому, что считают правильным подходом, или, возможно, про­\nсто потому, что купились на обещания уложиться в минимальные\nсроки при достижении самого высокого качества. Причины не­\nосязаемы, неясны и могут противоречить друг другу. Многие от­\nказались от Agile просто потому, что не смогли незамедлительно\nобрести ожидаемого, поскольку восприняли обещанное буквально.\nAgile важен не по причинам, вызванным изменчивыми обстоя­\nтельствами. Agile важен в силу куда более глубоких философских\nи этических причин. Эти причины связаны с профессиональной\nдеятельностью и обоснованными ожиданиями наших клиентов.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "Agile привлекает меня тем, что ставит на первое место дисциплину,", "output": {"text": "\nа не церемониальность. Чтобы правильно применять Agile, нужно\nработать в парах, в первую очередь писать тесты, проводить рефак­\nторинг кода и соблюдать правила простоты проектирования. При­\nдется работать короткими циклами, получая в результате каждого\nиз них рабочий результат. А еще придется постоянно и непрерывно\nвзаимодействовать с клиентами.\nВзгляните на жизненный цикл и рассмотрите каждый из при­\nведенных методов как обещание или обязательство — вам станет", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Введение в Agile"}}
{"instruction": "Проаналізуй цей запит", "input": "понятно, откуда ноги растут. Для меня Agile — это очередной виток\n", "output": {"text": "мастерства и приверженность идее продвигать профессиональный\nподход к работе по всей индустрии разработки ПО.\nВ этой отрасли крайне важно повышать профессионализм. Мы\nслишком часто терпим крах. Слишком много занимаемся ерундой.\nМиримся с чрезмерным количеством ошибок. Заключаем ужасные\nсделки. Слишком часто мы ведем себя как сопляки, которым дали\nкредитку. Раньше все было проще, можно было позволить себе тор­\nмозить, так как на кону стояло меньше, чем сейчас. В 1970-х и 80-х,\nи даже в 1990-х цена ошибки в программе была не так высока. По\nкрайней мере, убытки были ограниченны и контролируемы.\nКуда ни глянь, везде оно!\nВремена меняются.\nПрямо сейчас оглянитесь вокруг. Даже не надо вставать со своего\nместа, просто оглянитесь на то, что в комнате вокруг вас. Сколько\nкомпьютеров в комнате?\nДавайте теперь я. Сейчас я в своем летнем домике, который на­\nходится в лесу на севере штата Висконсин. Давайте посчитаем,\nсколько компьютеров и процессоров в них у меня здесь? 4. Я набираю этот текст на ноутбуке Mac Book Pro с четырьмя\nядрами. Производитель заявляет, что их восемь, но не стану\nсчитать виртуальные ядра. Также не стану брать в счет все\nмалые вспомогательные процессоры, которые используются\nв MacBook. +1. Мышь Apple Magic Mouse 2. Уверен, что там больше одного\nпроцессора, но буду все считать за один.\n\nПрофессионализм\n75 +1. Планшет iPad с монитором Duet в качестве дополнительно­\nго. Мне прекрасно известно, что в iPad много малых процессо­\nров, но все равно посчитаю как один. +1. Ключ от машины (!). +3. Наушники Apple AirPods. По одному для каждого наушника\nи еще один в зарядном кейсе. Вероятно, процессоров больше,\nну и ладно... +1. Мой iPhone. Да-да, на самом деле в iPhone, вероятно, около\nдюжины процессоров, но все равно, пускай будет один. +1. Взгляд упал на ультразвуковой датчик движения (в доме их\nкуда больше, но я вижу и посчитаю один). +1. Термостат. +1. Панель управления системой безопасности. +1. Телевизор с плоским экраном. +1. DVD-проигрыватель. +1. Устройство для воспроизведения IP-телевидения Roku. +1. Apple AirPort Express. +1. Apple TV. +5. Пульты дистанционного управления. +1. Телефон (да, именно телефон). +1. Имитация камина (вы бы видели, какую красотищу он мо­\nжет выдавать!). +2. Старенький телескоп Meade LX 200 EMC с компьютером.\nОдин процессор в приводе, а другой — в переносном блоке\nуправления. +1. Флэшка у меня в кармане. +1. Стилус Apple pencil.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}
{"instruction": "Проаналізуй цей запит", "input": "Почему же Agile?", "output": {"text": "На свою душу я насчитал, по крайней мере, 30 компьютеров, и это\nтолько в этой комнате. Действительное количество можно уве­\nличить примерно вдвое, поскольку в большинстве устройств по\nнесколько процессоров. Но пока что давайте остановимся на трид­\nцати.\nА сколько насчитали вы? Уверен, что у большинства из вас получи­\nлось примерно столько же, сколько у меня. Действительно, бьюсь\nоб заклад, что почти у каждого из 1,3 млрд человек, проживающих\nв западном мире, постоянно имеется рядом не один десяток ком­\nпьютеров. Это что-то новое. В начале 1990-х это число в среднем\nбыло бы близко к нулю.\nЧто общего у всех компьютеров, которые мы видим рядом с собой?\nИх все надо программировать. Для них нужно программное обе­\nспечение, которое как раз мы и пишем. И как вы думаете, каково\nкачество этих программ?\nХорошо. Давайте рассмотрим вопрос с другого бока. Сколько раз\nна дню ваша бабушка пользуется программным обеспечением?\nУ тех из вас, у кого она еще жива, дай бог ей здоровья, счет может\nидти на тысячи, потому что в современном обществе почти ничего\nнельзя сделать, не прикасаясь к программному обеспечению. У вас\nне получится: Говорить по телефону. Купить или продать что-либо. Пользоваться микроволновкой, холодильником или даже то­\nстером. Постирать или высушить одежду. Помыть посуду. Слушать музыку.\n\nПрофессионализм\n77 Водить машину. Подать страховую претензию. Регулировать температуру в помещении. Смотреть телевизор.\nНо дела обстоят еще хуже. Сейчас в цивилизованном обществе\nбуквально ничего значительного нельзя сделать без работы с про­\nграммным обеспечением. Не получится рассмотреть, принять или\nпривести в действие никакой закон. Правительство не сможет вы­\nнести на обсуждение ни один политический вопрос.\nСамолеты не смогут летать. Машины не смогут ездить. Не полу­\nчится запустить ракеты. Корабли не смогут ходить. На дороги ста­\nнет невозможно нанести покрытие, не получится собрать урожай,\nостановится производство на сталелитейных заводах, автозаводы\nне смогут производить автомобили, кондитерские фабрики не про­\nизведут сладостей, прекратятся торги на биржах...\nБез программного обеспечения наше общество сейчас как ноль без\nпалочки. Каждое мгновение, когда мы не спим, мы сталкиваемся\nс программами. А многие даже во сне с ними сталкиваются — от­\nслеживают фазы сна.\nКуда без нас, программистов?\nНаше общество сейчас целиком и полностью зависит от программ­\nного обеспечения. Оно стало играть роль крови, текущей в жилах\nнашего общества. Без него блага цивилизации, которыми мы сей­\nчас наслаждаемся, были бы невозможны.\nИ кто пишет все программное обеспечение? Такие, как мы. Куда\nобществу без нас, программистов?", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}
{"instruction": "Проаналізуй цей запит", "input": "ПО", "output": {"text": "вашего автомобиля? Вы находили какие-нибудь ошибки в них?\nЯ находил. А что скажете насчет кода, под управлением которого\nработают тормоза, газ и рулевой механизм? Там есть ошибки? Суще­\nствует ли тестовый набор, который можно запустить в любое время\nи который подтвердит с высокой вероятностью, что когда ваша нога\nнажмет на педаль тормоза, машина действительно остановится?\nСколько людей погибло из-за того, что программное обеспечение\nв их автомобилях не смогло правильно отреагировать на давление\nноги водителя на педаль тормоза? Точно сказать нельзя, но много.\nВ 2013 году «Тойота» потерпела миллионные убытки, поскольку\nПО содержало «возможное инвертирование разрядов, смертельные\nзадачи, влекущие нарушение отказоустойчивости, повреждение\nсодержимого оперативной памяти, одиночные неисправности\nэлементов, влекущие за собой отказ всей системы, несовершенство\n\nПрофессионализм\n79\nзащиты от переполнения стека и буфера, одиночные неисправно­\nсти отказоустойчивых систем и тысячи глобальных переменных»,\nа сам код был запутан, как «спагетти»1.\nПрограммы, написанные нами, приводят к гибели людей. Что я, что\nдругие наверняка становятся программистами не для того, чтобы\nкого-то убивать. Многие из нас постигли искусство программи­\nрования, потому что, еще будучи детьми, мы писали бесконечные\nциклы, которые выводили наши имена на экран, и нам это казалось\nневероятно крутым. Но сейчас от наших действий зависят жизни\nи судьбы. И с каждым днем появляется все больше кода, который\nставит на кон жизни и судьбы все большего количества людей.\nКатастрофа\nОднажды наступит день, если еще не наступил, когда какой-нибудь\nнесчастный программист по небрежности натворит глупостей, ко­\nторые приведут к гибели десятка тысяч людей за раз. Задумайтесь\nоб этом на минутку. Несложно представить себе несколько вероят­\nных сценариев. И если так случится, то политики всего мира под­\nнимутся в праведном гневе (как и полагается) и недвусмысленно\nукажут пальцем на нас.\nДолжно быть, вы подумаете, что пальцем покажут на наше началь­\nство или руководство наших компаний, но мы отлично помним,\nчто было, когда пальцем показали на исполнительного директора\nсевероамериканского подразделения «Фольксваген», и он предстал\n1\t Safety Research & Strategies Inc., Toyota unintended acceleration and the\nbig bowl of «spaghetti» code [blog post]. 7 ноября 2013 г. URL: https://\nwww.safetyresearch.net/blog/articles/toyota-unintended-acceleration-and-big-bowl-\n%E2%80%9Cspaghetti%E2%80%9D-code.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}
{"instruction": "Проаналізуй цей запит", "input": "Далее приведен вполне разумный список того, чего ожидают от\nнас", "output": {"text": " руководство, пользователи и клиенты. Обратите внимание,\nчто по мере прочтения списка, с одной стороны, вы согласны, что\nвсе эти ожидания вполне обоснованны. А с другой стороны, если\nв вас заговорит программист, будет страшновато. С точки зрения\nпрограммиста сложно представить, как можно оправдать такие\nожидания.\n1\t O’Cane S. Volkswagen America’s CEO blames software engineers for emissions\ncheating scandal // The Verge. 8 октября 2015 г. URL: https://www.theverge.\ncom/2015/10/8/9481651/volkswagen-congressional-hearing-diesel-scandal-fault.\n\nРазумные ожидания\n81\nСоответствие этим ожиданиям — это одна из основных целей\nAgile.\nПринципы и методы Agile напрямую затрагивают большую часть\nожиданий из этого списка. Подобное отношение к работе требует\nот своего коллектива любой хороший технический директор. Что­\nбы понять эту точку зрения, представьте, что я и есть ваш техниче­\nский директор. И вот что я от вас ожидаю.\nФирма веников не вяжет!\nНеприятно, что в нашей сфере вообще приходится упоминать\nо том, что код нужно писать качественно. А что поделать? Я уве­\nрен, дорогие читатели, что многим из вас довелось хотя бы раз не\nоправдать это ожидание. Мне доводилось.\nЧтобы понять всю глубину проблемы, рассмотрим отключение\nсети управления движением воздушного транспорта над Лос-\nАнджелесом из-за сброса даты 32-битных часов. Или отключение\nвсех двигателей на борту самолета Boeing 787 по той же причине.\nИли сотни жертв крушения Boeing737 Max из-за сбоя системы\nMCAS.\nА как насчет моего собственного опыта с сайтом healthcare.gov на\nзаре его существования? После первого входа, как и на многих со­\nвременных сайтах, в целях защиты от взлома мне нужно было от­\nветить на ряд вопросов. Одним из вопросов был «запоминающаяся\nдата». Я ввел: 21.07.73. Сайт мне выдал, что я ввел неправильное\nзначение.\nЯ программист. И знаю образ мышления программистов. В итоге\nя попробовал ввести дату в разных форматах: 21/07/73, 21-07-1973,\n21 July 1973, 21071973 и тому подобное. Результат был одинаков.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}
{"instruction": "Проаналізуй цей запит", "input": "Неправильное значение. Я расстроился. ", "output": {"text": "Что за приколы? Какой\nформат вам еще нужен?\nПотом меня осенило. Программист, написавший код для сайта,\nне знал, какие вопросы будут задаваться. Он просто выдергивал\nвопросы из базы данных и сохранял ответы. Этот программист,\nвероятно, не предусмотрел поддержку нестандартных символов\nи чисел для ответов. Так что я набрал «годовщина свадьбы». На­\nконец, получилось.\nДумаю, что вполне справедливо сказать, что любая система, ко­\nторая требует от пользователя мышления программиста, чтобы\nввести какие-либо данные, — дрянь.\nВ этом разделе я мог бы рассказать массу историй об отстойном\nпрограммном обеспечении. Но другие уже сделали это намно­\nго лучше. Если вам хочется ближе ознакомиться с масштабами\nэтой проблемы, советую почитать книгу Гойко Аджича Humans vs\nComputers1 и книгу Мэтта Паркера Humble Pi2.\nВполне разумно, что боссы, клиенты и пользователи ждут от нас\nпрограмм высокого качества с наименьшими недочетами. Никому\nне нужна ерунда, особенно если заплачены приличные деньги.\nОбратите внимание, что упор Agile на тестирование, рефакторинг,\nпростоту проектирования и обратную связь с заказчиком — это\nочевидное лекарство от низкого качества кода.\n1\t Adzic G. Humans vs Computers. London: Neuri Consulting LLP, 2017. URL:\nhttp://humansvscomputers.com.\n2\t Parker M. Humble Pi: A Comedy of Maths Errors. London: Penguin Random\nHouse UK, 2019. URL: https://mathsgear.co.uk/products/humble-pi-a-comedy-of-\nmaths-errors.\n\nРазумные ожидания\n83\nВсегда готовы\nСамое последнее, чего от нас ожидают клиенты и руководство —\nчто мы, программисты, будем как ненормальные переносить сроки\nпоставки программного обеспечения. Но такие опоздания в мире\nразработки происходят сплошь и рядом. Причина таких задержек\nчасто в том, что разработчики пытаются оснастить программу\nсразу всем функционалом, а не делать в первую очередь наиболее\nважные функции. Покуда есть функции, которые реализованы,\nпротестированы или документированы лишь наполовину, про­\nграммой пользоваться нельзя.\nДругая причина переноса сроков — это доводка программ до ста­\nбильного состояния. Разработчики зачастую не принимают в рас­\nчет непрерывное тестирование, когда они наблюдают за тем, чтобы\nне было сбоев. Если в течение какого-то времени не обнаружено\nникаких сбоев, разработчики могут смело рекомендовать про­\nграммное обеспечение к развертыванию.\nAgile помогает решить эти проблемы с помощью простого прави­\nла, которое гласит, что программа должна быть технически готова\nк развертыванию в конце каждой итерации. «Технически готова»\nозначает, что с точки зрения разработчиков продукт достаточно\nстабилен в техническом плане для развертывания. Код написан\nчисто, а тесты успешно пройдены.\nЭто значит, что работа, проделанная в течение итерации, включает\nв себя написание всего кода, прохождение всех тестов, написание\nвсей документации и доводку до стабильного состояния всех исто­\nрий, реализованных во время этой итерации.\nЕсли в конце каждой итерации программа технически готова к раз­\nвертыванию, то само развертывание производится по решению", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}
{"instruction": "Проаналізуй цей запит", "input": "клиента, а не из технических соображений. Клиент может посчитать,", "output": {"text": "что для развертывания не хватает функционала, или может отло­\nжить развертывание по причинам, связанным с условиями рынка\nили обучением пользователей. В любом случае ПО соответствует\nнеобходимому качеству и технически готово к развертыванию.\nВозможно ли такое, что программа технически готова к разверты­\nванию в конце каждой недели или двух?\nКонечно, да! Просто команде не нужно браться за непосильное\nколичество историй, чтобы успеть выполнить все задачи и обеспе­\nчить развертываемость программы до окончания итерации. Также\nразработчикам стоит автоматизировать большую часть работ по\nтестированию.\nКак и с точки зрения бизнеса, так и с точки зрения клиентов ожи­\nдание постоянной технической готовности продукта вполне есте­\nственно. Когда клиент видит, что функция работает, он думает, что\nработа над ней завершена. Он никак не ожидает того, что нужно\nподождать еще пару месяцев, чтобы обеспечить гарантию качества\nи стабильности. Ему не понять того, что функция заработала лишь\nпотому, что программисты для демонстрации возможностей пошли\nв обход нерабочего кода.\nСтабильная производительность\nВы, наверное, заметили, что зачастую команды программистов про­\nдвигаются очень быстро первые несколько месяцев, пока проект\nеще нов. Когда не существует основного кода, который замедляет\nработу, можно написать много рабочего кода за короткое время.\nК сожалению, через некоторое временя в коде появляется бардак.\nЕсли в коде не поддерживать порядок, то он будет тянуть команду\n\nРазумные ожидания\n85\nназад и замедлять ход проекта. Больше бардака — меньше скорость\nработы команды. Чем меньше скорость, тем сильнее поджимают\nсроки, а следовательно, больше спешки, приводящей к еще боль­\nшему беспорядку. Принцип снежного кома приводит к тому, что\nкоманда практически впадает в ступор.\nРуководители, озадаченные медленной работой, могут принять\nрешение добавить специалистов в команду и увеличить производи­\nтельность. Но, как мы уже знаем, расширение команды замедляет\nработу еще на несколько недель.\nЕсть надежда, что по прошествии нескольких недель новички вый­\nдут на требуемый уровень производительности и проект пойдет\nбыстрее. Только вот кому придется их обучать? Тем, кто и сотворил\nбардак. Новички, конечно, вберут от своих учителей не только\nсамое лучшее.\nЧто еще хуже, они будут равняться на имеющийся код. Они посмо­\nтрят на уже написанный код и сделают вывод, как нужно работать\nв этой команде. А затем будут точно так же «бардачить». Именно\nпоэтому производительность неуклонно падает, несмотря на под­\nключение новых специалистов.\nМенеджеры могут повторить эти действия еще несколько раз, ведь\nделать одно и то же и ждать иного результата — это показатель вме­\nняемости руководства в некоторых организациях. В конечном ито­\nге боссы узнают правду, но будет уже поздно. Уже ничто не сможет\nостановить неотвратимое погружение в бездну медлительности.\nОтчаявшись, менеджеры спросят разработчиков, что можно сде­\nлать для повышения производительности. У разработчиков уже\nготов ответ. Уж они-то понимают, что делать. Они только и ждут\nтого, чтобы их спросили.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}
{"instruction": "Проаналізуй цей запит", "input": "И они отвечают: «Надо все переделывать».", "output": {"text": "Представьте, в какой ужас приходят менеджеры. Сколько денег\nи времени было вложено в проект! И что мы видим? Разработчи­\nки советуют выбросить все наработки и начать проект с чистого\nлиста!\nИ как считаете, верит ли руководство разработчикам, когда те обе­\nщают, что «в этот раз будет все по-другому»? Конечно, нет! Они\nж не дураки, чтобы поверить этому. Но что же им теперь делать?\nПроизводительность уже и так ниже плинтуса. Такими темпами\nработа не может продолжаться. Поэтому после многочисленных\nстенаний они соглашаются на рефакторинг.\nУ разработчиков засверкал в глазах огонь. «Слава богу! Наконец-\nто можно вернуться в те времена, когда трава зеленее и код\nчище», — скажут они. Но, конечно же, все не так просто, как ка­\nжется. Команда разбивается на два лагеря. Отбирается лучшая\nдесятка — ударная группа, те самые орлы программирования,\nкоторые больше всех ответственны за беспорядочный код. Им\nвыделяют отдельную комнату. Теперь они поведут всех остальных\nв мир рефакторинга. Остальные же их на дух не переносят, по­\nтому что из-за них приходится сопровождать тот отстой, который\nуже написан.\nОткуда наша ударная группа берет требования? Есть ли на сегод­\nняшний день какой-нибудь документ, где представлены требова­\nния? Да. Это код, который уже написан. Этот код — единственный\nдокумент, который точно дает понять, как должна выглядеть про­\nграмма после рефакторинга.\nПоэтому орлы вчитываются в написанный код, пытаясь сообра­\nзить, что с этим кодом не так и как нужно писать новый. Между тем\n\nРазумные ожидания\n87\nдругие программисты вносят изменения в старый код, устраняют\nошибки и добавляют новый функционал.\nГонка продолжается. Ударная группа пытается поймать движу­\nщуюся добычу. И как Зенон показал в своей апории об Ахиллесе\nи черепахе, поймать движущуюся добычу не так-то просто. Каж­\nдый раз, когда они доходят до этапа разработки, на котором нахо­\nдился написанный код, этот код уже изменился.\nЧтобы доказать, что Ахиллес все равно догонит черепаху, нужно\nприменить математический анализ. В разработке ПО это не всегда\nудается. Я работал в компании, где новое программное обеспечение\nне получалось развернуть в течение десяти лет. Клиентам обещали\nпредставить новый пакет программ еще восемь лет назад. Однако\nим постоянно не хватало функционала в новых программах, старые\nсправлялись со своими задачами лучше. Поэтому клиенты не стали\nпользоваться новым пакетом программ.\nНесколько лет спустя клиенты просто перестали обращать внима­\nние на обещания о предоставлении новой системы.\nС их точки зрения, подходящей системы никогда не было и не\nмогло появиться.\nВ то же время компания, занимавшаяся написанием программ,\nоплачивала работу сразу двух команд разработчиков: тех самых\nударных групп и сопровождающих. В конечном итоге руководство\nочень расстроилось и уведомило клиентов о том, что компания\nсобирается развернуть новый пакет программ, несмотря ни на ка­\nкие возражения. У клиентов началась истерика, но она не шла ни\nв какое сравнение с той, которую закатили разработчики, та самая\nударная группа, а точнее сказать — то, что осталось от их команды.\nВсю команду, которая занималась разработкой с самого начала,", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}
{"instruction": "Проаналізуй цей запит", "input": "повысили до руководящих постов. Нынешние члены команды дружно встали", "output": {"text": " и в один голос заявили: «Нельзя это поставлять,\nвы что? Это же фуфло. Надо все переделывать!»\nДа-да, еще одна байка от Дяди Боба. Она основана на реальных\nсобытиях, но я чуть-чуть приврал для красного словца. И все же\nосновной посыл вполне правдив. Масштабный рефакторинг — это\nчудовищно дорого и редко востребовано.\nКлиенты и менеджеры не рассчитывают, что разработчики сбавят\nтемпы. Скорее, они думают, что если реализация функции заняла\nодну или пару недель в начале проекта, то и через год подобная\nфункция будет реализована в те же сроки. Они ожидают, что про­\nизводительность будет стабильна на протяжении всего проекта.\nРазработчики должны ожидать этого не меньше. Благодаря не­\nпрерывному поддержанию чистоты архитектуры, проекта и кода\nнастолько, насколько это возможно, сохраняется высокая произ­\nводительность, и команда не попадает в ловушку медлительности\nи перепроектирования.\nДалее вы увидите, что такие методы Agile, как тестирование, пар­\nное программирование, рефакторинг и простота структуры про­\nекта, помогают избежать попадания в эту ловушку. А игра в плани­\nрование — это противоядие от давления сроков, подталкивающего\nразработчиков в эту ловушку.\nНедорогие изменения\nПрограммное обеспечение — это словосочетание. Со словом «про­\nграммное» все понятно. Рассмотрим слово «обеспечение». Оно\nозначает, что пользователь обеспечен функционалом, необходи­\n\nРазумные ожидания\n89\nмым для успешного выполнения своих задач. Получается, что\nпрограммное обеспечение — это программы, обладающие необхо­\nдимым функционалом. А полнота функционала невозможна без\nизменяемости кода. Программное обеспечение изобрели потому,\nчто возникла необходимость легко и быстро вносить изменения\nв функциональность техники. Если мы хотим, чтобы функционал\nизменялся только на аппаратном уровне, то пользуемся понятием\n«аппаратное обеспечение».\nРазработчики беспрерывно сетуют на то, что требования к продук­\nту изменяются. Мне часто доводилось слышать заявления вроде:\n«Это изменение полностью рушит архитектуру нашей програм­\nмы». Солнышко, у меня для тебя плохие новости. Если изменение\nтребований ломает архитектуру твоей программы, то твоей архи­\nтектурой можно только подтереться.\nМы, разработчики, должны радоваться изменениям, потому что\nради них и работаем.\nИзменение требований — основное правило игры. Эти изменения\nдают нам работу и кормят нас. Наша работа заключается в способ­\nности мириться с изменениями требований и находить решения,\nкоторые будут относительно недороги.\nЭффективность программного обеспечения измеряется в том числе\nи тем, насколько безболезненно в него можно внести какие-либо\nизменения. Клиенты, пользователи и руководители ожидают, что\nпрограммное обеспечение будет можно легко изменить и что сто­\nимость таких изменений будет соизмеримой и как можно ниже.\nДалее вы узнаете о том, как методы Agile, разработка через тести­\nрование, рефакторинг и простота проектирования при одновремен­", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}
{"instruction": "Проаналізуй цей запит", "input": "применении и с наименьшими усилиями помогают вносить\nизменения в программы без ущерба для них.", "output": {"text": "Постоянное совершенствование\nСо временем люди повышают уровень своего мастерства. Ху­\nдожники лучше пишут картины, певцы лучше исполняют песни,\nстроители лучше возводят здания и так далее. То же должно быть\nсправедливым и для отрасли разработки программного обеспече­\nния. Чем дольше существует программа, тем лучше она должна\nстановиться.\nСтруктура и архитектура программного обеспечения со временем\nдолжны становиться только лучше.\nСтруктура кода должна становиться лучше и, соответственно,\nдолжно произойти улучшение производительности программы.\nРазве это не очевидно? Разве это не то, что вы ожидаете от коман­\nды, работающей над чем-либо?\nТо, что мы с течением времени работаем все хуже — самое серьез­\nное обвинение и наиболее очевидное свидетельство нашей неком­\nпетентности.\nСамое безответственное отношение, которое только может быть,\nпожалуй, проявляется в случае, когда разработчики настроены\nна то, что по мере продвижения код будет становиться беспо­\nрядочным, а программа — неработоспособной, нестабильной\nи уязвимой.\nПостоянное и уверенное совершенствование — вот чего от нас ждут\nклиенты, пользователи и руководители. Они ожидают, что «дет­\nские болезни» программы со временем пройдут, что в дальнейшем\n\nРазумные ожидания\n91\nона будет становиться только лучше. Методы Agile, а именно раз­\nработка через тестирование, парное программирование, рефакто­\nринг и простота структуры проекта, призваны укрепить здоровые\nожидания.\nКомпетенция без страха и  упрека\nПо какой причине большая часть программ со временем не стано­\nвится лучше? Эта причина — страх. Если быть точнее, страх перед\nизменениями.\nПредставьте, что вы смотрите на экран, на котором находится на­\nписанный ранее код. Первая мысль, которая приходит в голову:\n«Господи, какой ужас! Нужно почистить его». Но следующая\nмысль будет примерно такой: «Нет, я в это не полезу!» А почему?\nДа потому что вы думаете, что если влезть в код, то он перестанет\nработать. А если он перестанет работать, виноваты будете вы. Так\nвы отказываетесь от того единственного, что может улучшить\nкод, — от его очистки.\nВ вас говорит страх. Вы боитесь кода, и этот страх вынуждает вас\nвести себя некомпетентно. Вы чувствуете некомпетентность и бои­\nтесь проводить очистку кода, потому что исход непредсказуем. Вы\nпозволили коду, который создали своими собственными руками,\nстать таким самостоятельным, что боитесь что-либо делать для его\nулучшения. Это в высшей мере безответственно.\nКлиенты, пользователи и менеджеры ожидают, что вы профессио­\nнал без страха и упрека. Они ожидают, что если в коде будут ошиб­\nки или избыточность, вы это увидите, исправите и вычистите. Вы\nне допустите разрастания и усугубления несовершенств и сделаете\nвсе возможное для поддержания высокого качества и чистоты кода.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}
{"instruction": "Проаналізуй цей запит", "input": "QA-В них он держит оглавление плана для тестирования, про­\nводимого вручную. ", "output": {"text": "В нем содержится 80 тысяч тестов, которые\nдолжна проводить армия индусов раз в полгода. Чтобы провести\nэто тестирование, нужно потратить миллион долларов.\nQA-менеджер принес мне этот документ, когда вышел от своего\nначальника. Его начальник, в свою очередь, до этого был в каби­\nнете финансового директора. Это был 2008 год. Начало мирового\nфинансового кризиса. Финансовый директор каждые полгода\nсокращал этот миллион вдвое. Руководитель отдела контроля ка­\nчества, протягивая мне план, попросил отобрать из списка тестов\nполовину, которую можно не проводить.\nЯ объяснил ему, что неважно, какие тесты будут проводить, а какие\nнет. Важно то, что мы так не узнаем, работает ли половина про­\nграмм.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}
{"instruction": "Проаналізуй цей запит", "input": "Оглавление плана тестирования вручную\nТестирование вручную всегда в итоге провальное и неизбежно\nприводит к такому положению дел.", "output": {"text": " Вы только что прочитали наи­\nболее очевидное доказательство того, что тестирование вручную\nнесостоятельно, поскольку оно дорого стоит и всегда попадает под\nсокращение финансирования.\nК тому же существует еще один коварный нюанс в доказательство\nтого, что тестирования вручную лучше избегать.\nРазработчикам редко удается представить продукт на контроль\nкачества вовремя. Получается, что у специалистов по качеству\nостается меньше времени на требуемые тесты, чем отводилось из­\nначально. Поэтому им приходится на свое усмотрение выбирать,\nкакие тесты нужны больше, чтобы закончить проверку в положен­\nные сроки. Некоторые тесты остаются без внимания. Это провал.\nКроме того, люди не роботы. Требовать от них выполнять ту же ра­\nботу, что и машины, — дорого, неэффективно и бесчеловечно. Для\n\nРазумные ожидания\n95\nспециалистов, проводящих контроль качества, есть работа и заня­\nтия гораздо интереснее — там, где можно проявить воображение\nи творчество, присущие человеку. Но вернемся к нашим баранам.\nКлиенты и пользователи ожидают, что каждый новый релиз прой­\nдет тщательное тестирование. Никто даже не подумает, что раз­\nработчики решили что-либо не тестировать лишь по той причине,\nчто не было времени или средств. Поэтому нужно автоматизиро­\nвать все тесты, какие только возможно. Вручную стоит тестиро­\nвать только то, что нельзя подвергнуть автоматической проверке,\nи тогда, когда требуется творческий подход, который применяется\nв исследовательском тестировании1.\nМетоды Agile, а именно приемочное тестирование, разработка\nчерез тестирование, непрерывная интеграция, позволят оптими­\nзировать тестирование.\nДруг за друга горой\nКак технический директор я ожидаю от команды слаженной ра­\nботы. Что значит «слаженная работа»? Представьте футбольную\nкоманду, гоняющую мяч по полю. Один из игроков спотыкается\nи падает. Что делают остальные игроки? Они закрывают образо­\nвавшуюся брешь, защищая проход к воротам, и стараются увести\nмяч как можно дальше.\nНа борту корабля у каждого своя работа. Незаменимых нет, каж­\nдый умеет выполнять не только свою, но и чужую работу. Потому\nчто на корабле необходимо выполнение всех работ.\n1\t Agile Alliance. Exploratory testing.Ссылка: https://www.agilealliance.org/glossary/\nexploratory-testing", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}
{"instruction": "Проаналізуй цей запит", "input": "Так же и в команде разработчиков. Если Боб захворал,", "output": {"text": "его под­\nменит Джек. Это значит, что Джеку нужно знать, чем занимается\nБоб, где Боб хранит все свои исходные файлы, скрипты и тому\nподобное.\nЯ ожидаю от каждого члена любой команды разработчиков готов­\nности подменить товарища. В свою очередь, каждый член коман­\nды разработчиков может положиться на своих коллег, если вдруг\nчто-то случится. Личное дело каждого сделать так, чтобы кто-то из\nкоманды мог вас подменить.\nЕсли Боб спец по части баз данных и вдруг заболел, я не опасаюсь\nтого, что работа над проектом из-за этого подвиснет. Кто-то, даже\nесли он особо не «шарит» в базах данных, должен занять место\nБоба. Я ожидаю, что никто в команде не станет утаивать сведения, —\nсведениями нужно делиться. Если требуется перевести половину\nкоманды на другой проект, я уверен, что половина всех сведений\nникуда не исчезнет вместе с ушедшими, но останется в команде.\nМетоды Agile, а именно парное программирование, «одна команда»\nи коллективное владение, призваны оправдать ожидания техниче­\nского директора.\nЧестность оценок\nЯ ожидаю, что будут какие-то оценки сроков и что они будут чест­\nными. Самая честная оценка — это «я не знаю». Тем не менее эта\nоценка не полноценна. Нельзя знать все. Вы хоть что-то, да знаете.\nТак что я ожидаю, что ваши оценочные суждения будут основаны\nна имеющихся знаниях.\nНапример, вы можете не знать, сколько времени займет та или\nиная задача, но можете сопоставить ее с другой и сделать вывод\n\nРазумные ожидания\n97\nна ее основе. Можно не знать, сколько времени уйдет на создание\nстраницы входа в личный кабинет, но можно предугадать, что\nна страницу смены пароля уйдет примерно половина времени,\nпотраченного на страницу входа. Относительные оценки, как та,\nчто приведена выше, весьма ценны. Мы еще в этом убедимся на\nстраницах этой книги.\nВместо относительной оценки можно высказать предположения\nс некоторым вероятностным разбросом. Например, вы можете\nпредположить, что на страницу входа уйдет где-то от пяти до\nпятнадцати дней, а в среднем на это уходит двенадцать дней.\nТакие оценки сочетают в себе все имеющиеся знания, из кото­\nрых можно вывести некоторую вероятность и передать сведения\nруководству.\nМетоды Agile, а именно «игра в планирование» и «одна команда»,\nпомогут провести оценку запланированных задач.\nУмение говорить «нет»\nХотя и очень важно стремиться найти решение задачи, лучше\nсказать «нет», если такого решения не найдено. Просто осознайте,\nчто вас взяли на работу даже не потому, что вы хорошо пишете\nкод, а потому что вы можете сказать «нет», когда это нужно. Вы,\nпрограммисты, — как раз те, кто знает, что возможно, а что нет. Как\nтехнический директор я ожидаю от вас сведений, дабы не упасть\nв пропасть. Я рассчитываю на это независимо от того, поджимают\nли сроки, независимо от того, что желают услышать менеджеры.\nПросто ответьте «нет», когда это действительно нужно.\nМетод Agile «одна команда» научит честно говорить «нет», если\nтого требует положение дел.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}
{"instruction": "Проаналізуй цей запит", "input": "Во время встречи в Сноуберде Кент Бек заявил, что цель Agile — построить мост ", "output": {"text": "над пропастью, существующей между клиентами\nи разработчиками. Для этого Кент Бек, Уорд Каннингем, Рон\nДжеффрис и некоторые другие составили «Билль о правах».\nОбратите внимание на то, что права клиентов и права разработчи­\nков дополняют друг друга. Они подходят друг к другу, словно ше­\n\nБилль о правах\n99\nстерни одного механизма. Благодаря им существует некий баланс\nожиданий между одними и другими.\nПрава клиента\nУ клиента есть следующие права: Ознакомиться с общим планом, знать, что и когда можно полу­\nчить и за какие деньги. Получать наилучшую, насколько это возможно, отдачу от каж­\nдой итерации. Отслеживать ход работ, назначать необходимые тесты, полу­\nчить рабочее и многократно протестированное программное\nобеспечение. Изменять решения, функциональность и приоритеты, не неся\nнепомерных расходов. Получать сведения о графике работ, изменениях сроков, чтобы\nвовремя принять решение о том, как сократить объем работ\nи успеть к нужному числу. Отменить проект в любое время и по­\nлучить полезный рабочий код, который оправдывает текущие\nвложения средств.\nПрава разработчика\nУ разработчика есть следующие права: Знать, что требуется от команды, а также иметь четкое пред­\nставление о поставленных приоритетах. Выполнять работу качественно, несмотря ни на какие обстоя­\nтельства.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}
{"instruction": "Проаналізуй цей запит", "input": "Получать помощь от коллег, руководителей и самих клиентов.", "output": {"text": "Проводить оценку задачи и уточнять ее в зависимости от об­\nстоятельств. Брать на себя личную ответственность и не позволять возлагать\nна себя лишнее.\nВсе эти утверждения звучат весьма громко. Давайте рассмотрим\nих по очереди.\nКлиенты\nВ данном контексте слово «клиент» относится к представителям\nбизнеса. Сюда относятся непосредственно клиенты, менеджеры,\nначальники, менеджеры проекта и им подобные, то есть все, кто\nспособен нести ответственность за соблюдение сроков и расхо­\nдование средств, либо те, кто платит деньги и получает выгоду от\nиспользования программы.\nКлиенты могут потребовать предоставить им общий план на\nознакомление, также имеют право знать, что и когда можно\nполучить и за какие деньги.\nМногие утверждают, что такое предварительное планирование не\nявляется частью методологии Agile. Самое первое из прав клиента\nуже опровергает это высказывание. Безусловно, в бизнесе требует­\nся планирование. И, конечно, в план должны входить график работ\nи их стоимость. Разумеется, план должен быть как можно более\nточным и осуществимым.\nИменно на последнем пункте мы часто не знаем, что делать, так\nкак единственный способ построить точный и выполнимый план\nможно только в процессе выполнения проекта. Невозможно, почти\n\nБилль о правах\n101\nничего не делая, создать нормальный план. Так что мы, разработ­\nчики, должны убедиться, что наши планы, оценки и графики работ\nправильно создают представление об уровне нашей неопределен­\nности, и найти способы снизить этот уровень, чтобы гарантировать\nэто право.\nПроще говоря, нельзя соглашаться с невозможностью изменить объ­\nем и сроки работ. И объем работ, и сроки должны быть гибкими. Мы\nпредставляем такую гибкость с помощью кривой вероятностей. На­\nпример, согласно нашей оценке, вероятность того, что мы выполним\nпервые десять историй к назначенному числу — 95 %. С вероятно­\nстью 50 % мы выполним вовремя следующие пять. И с вероятностью\n5 % мы выполним еще пять историй в требуемый срок.\nУ клиентов есть право ознакомиться с этим планом, основанным\nна вероятности, потому что они не могут вести дела без плана.\nКлиенты имеют право получать наилучшую, насколько это воз­\nможно, отдачу от каждой итерации.\nAgile позволяет разбить объем работ на временные отрезки, назы­\nваемые итерациями. Клиенты имеют право ожидать от разработ­\nчиков работы над наиболее важными задачами в любое время, а от\nкаждой итерации — максимально возможную пользу для бизнеса.\nПриоритеты устанавливаются клиентами на этапе планирования\nв начале каждой итерации. Клиенты выбирают истории, которые\nприносят наибольшую отдачу от капиталовложений и которые\nкоманда разработчиков может, по ее оценкам, выполнить за ите­\nрацию.\nКлиенты имеют право на отслеживание хода работ, назначение\nнеобходимых тестов, получение рабочего и многократно проте­\nстированного программного обеспечения.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}
{"instruction": "Проаналізуй цей запит", "input": "Это право кажется очевидным с точки зрения клиента.", "output": {"text": " Конечно,\nу них есть право отслеживать, как продвигается ход работ. Без­\nусловно, у них есть право определять показатели того, что работа\nдействительно продвигается. Несомненно, у них есть право не­\nзамедлительно и неоднократно проверять, действительно ли ход\nработ соответствует требуемым показателям.\nКлиенты имеют право на изменения решений, функциональность\nи приоритеты, не неся при этом непомерных расходов.\nВ конце концов, мы говорим об отрасли разработки программного\nобеспечения. Цель программного обеспечения — легко изменять\nфункциональность техники, которую мы используем. Первым\nделом ПО изобрели затем, чтобы функциональности придать гиб­\nкость. Поэтому, конечно же, у клиентов есть право на изменение\nсвоих требований.\nКлиенты имеют право на получение сведений о графике ра­\nбот, изменениях оценки сроков, чтобы вовремя принять ре­\nшение о том, как сократить объем работ и успеть к нужному\nчислу.\nКлиент может отменить проект в любое время и получить по­\nлезный рабочий код, который оправдывает текущие вложения\nсредств.\nОбратите внимание, что у клиентов нет права требовать, чтобы их\nграфик соответствовал графику команды разработчиков. Их право\nна управление графиком ограничено правом на изменение объема\nработ. Самое главное, чем наделяет клиента это право — правом\nзнать, что график работ находится под угрозой срыва, и иметь воз­\nможность своевременно привести его в соответствие с текущими\nусловиями.\n\nБилль о правах\n103\nРазработчики\nВ данном контексте разработчиком признается каждый, кто при­\nнимает участие в написании кода. Это понятие включает в себя\nпрограммистов, QA-специалистов и бизнес-аналитиков.\nРазработчики имеют право на ознакомление с тем, что требу­\nется от команды, а также на четкое представление о постав­\nленных приоритетах.\nОпять же сосредоточимся на знании. У разработчиков есть право\nна получение точных требований и сведений о том, какие из них\nважны и насколько. Конечно, требования ограничены возможно­\nстью их выполнимости примерно так же, как и сроки сдачи про­\nекта. Как и с оценкой сроков, не всегда получается точно выразить\nтребования. Не стоит забывать и о том, что у клиентов есть право\nизменять свои решения.\nЭто право применимо только в рамках одной итерации. За преде­\nлами итерации требования и приоритеты будут смещаться и из­\nменяться. Но в пределах итерации у разработчиков есть право\nсчитать, что они незыблемы. Однако всегда нужно помнить, что\nразработчики могут отказаться от этого права, если считают из­\nменения требований несущественными.\nРазработчики имеют право на качественное выполнение рабо­\nты, несмотря ни на какие обстоятельства.\nЭто должно быть самое главное право среди всех прочих. У раз­\nработчиков есть право делать свою работу хорошо. Клиенты не\nимеют права требовать от команды вести разработку спустя ру­\nкава. Или, другими словами, у клиентов нет права вынуждать\nразработчиков портить свою профессиональную репутацию или\nпереступать через профессиональную этику.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}
{"instruction": "Проаналізуй цей запит", "input": "Agile — это набор методов, ", "output": {"text": "помогающий разработчикам достигать\nи поддерживать высокий уровень профессионализма. Специ­\nалисты, которые придерживаются этих методов, принимают и от­\nвечают разумным ожиданиям руководителей, заинтересованных\nсторон и клиентов. Agile также наделяет определенными правами\nкак разработчиков, так и клиентов и накладывает на них некоторые\nобязательства. Взаимное соблюдение прав и принятие ожиданий,\nпризнание методов Agile — основа этической нормы для сферы\nразработки ПО.\nAgile не процесс. Agile не модное увлечение. Agile не просто набор\nправил. Скорее, Agile — это набор прав, ожиданий и методов, ко­\nторый составляет основу профессиональной этики специалистов,\nсвязанных с разработкой программного обеспечения.\n\n3", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}
{"instruction": "Проаналізуй цей запит", "input": "МЕТОДЫ\nВЗАИМОДЕЙСТВИЯ\nС  КЛИЕНТАМИ", "output": {"text": "Планирование\n107\nСуществует куча методов взаимодействия с клиентами, которые\nразработчику нужно соблюдать, чтобы преуспеть. Среди них пла­\nнирование, небольшие и частые релизы, приемочное тестирование\nи «одна команда».", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}
{"instruction": "Проаналізуй цей запит", "input": "Как провести оценку проекта?", "output": {"text": " Самое простое: его нужно разбить\nна составные части, а затем провести их оценку. Подход-то хорош,\nно что делать, если эти части слишком велики, чтобы достоверно\nих оценить? Тогда нужно просто разбить эти части на меньшие\nпо объему и оценивать уже их. Уверен, вы подумаете, что это по­\nпахивает рекурсией.\nКак далеко можно зайти в такой разбивке? Проект можно делить\nвплоть до каждой строчки кода. Это как раз то, чем занимаются\nпрограммисты. Программистом можно назвать того, кто постиг\nискусство разбиения задач на отдельные строки кода.\nЕсли вы хотите провести наиболее точную и достоверную оценку\nпроекта, разбейте его вплоть до отдельных строк кода. Да, это\nзаймет какое-то время, но зато вам станет доподлинно известно,\nсколько времени займет проект, ведь вы его уже выполнили.\nКонечно, это уже никакая не оценка. Оценки построены на до­\nгадках: нам нужно знать, сколько времени займет выполнение\nпроекта, не выполняя его непосредственно. Хочется, чтобы оцен­\nка проекта не стоила дорого. Поэтому оценка по определению не\nможет быть точной. Неточность позволяет нам сократить сроки,\nнеобходимые для проведения оценки. Чем ниже степень точности,\nтем меньше времени понадобится на оценку.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Почему же Agile?"}}
{"instruction": "Проаналізуй цей запит", "input": "Это не означает, что оценка должна быть неточной. ", "output": {"text": "Нужно давать\nкак можно более точную оценку, но точную настолько, чтобы это\nне было непомерно дорого. Вот пример для лучшего понимания.\nПо моим оценкам, я закончу свой жизненный путь в течение сле­\nдующей тысячи лет. Это совершенно верно, но точность очень\nнизка. Я буквально не потратил ни минуты на то, чтобы провести\nнастолько достоверную оценку, потому что она совсем неточная.\nТакая хоть и достоверная, но неточная оценка обозначает времен­\nной отрезок, в течение которого оцениваемое событие произойдет\nпочти наверняка.\nЗадача разработчиков — потратить как можно меньше времени,\nчтобы произвести достоверную оценку, и при этом в наибольшей\nстепени сократить временной промежуток.\nТрехвариантный анализ\nЕсть один метод, который неплохо подходит для больших задач.\nЭто трехвариантный анализ. Такие оценки включают в себя три\nположения: лучший случай, допустимый случай и худший случай.\nС помощью такого анализа можно предречь исход с различной\nвероятностью. Худший случай — это когда мы уверены в сроках на\n95 %. Допустимый — на 50 %, а лучший — на 5 %.\nНапример, я могу быть на 95 % уверен, что задание будет выпол­\nнено в течение трех недель. Только на 50 % я могу быть уверен, что\nоно будет выполнено за две недели. И 5 % вероятности, что полу­\nчится уложиться в одну неделю.\nМожно представить вероятность и иначе. Представим, что у нас\n100 схожих заданий. Пять из них будут выполнены в течение неде­\nли, 50 — в течение двух недель, а 95 из них — в течение трех недель.\n\nПланирование\n109\nСуществует целый математический метод, связанный с управлени­\nем трехвариантными оценками. Кому интересно, могу предложить\nизучить технику оценки и анализа программ и проектов (PERT)1.\nЭто мощный метод управления крупными проектами и портфеля­\nми проектов. Если вы отдельно не изучали эту технику, не стоит\nдумать, что прочитав о ней, вы уже все знаете. PERT выходит\nдалеко за рамки графиков, которые вы видели в Microsoft Project.\nНесмотря на то что трехвариантный анализ хорошо подходит для\nдолгосрочной оценки всего проекта, он слишком неточен для по­\nвседневного управления, которое необходимо в течение проекта.\nДля этого у нас есть другой подход — единицы сложности историй.\nИстории и  единицы сложности\nМетод единиц сложности историй позволяет соблюсти достовер­\nность и точность благодаря коротким циклам обратной связи, с по­\nмощью которых можно многократно выверить оценку в сравнении\nс действительностью. Сначала точность невысока, но через несколь­\nко циклов она повышается до приемлемого уровня. Но прежде чем\nмы углубимся в метод, поговорим немного о самих историях.\nПользовательская история — это сокращенное описание функции\nпрограммы с точки зрения пользователя. Например:\nКогда я веду машину, то нажимаю сильнее на педаль газа, чтобы\nпоехать быстрее.\nЭто один из наиболее распространенных видов пользовательских\nисторий. Некоторым людям нравится так. Другие предпочитают\n1\t https://ru.wikipedia.org/wiki/PERT.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Оба вида достаточно хо­роши. ", "output": {"text": " Обе истории представляют собой упрощенную версию того,\nчто описывается большим количеством слов. Многое из того, что\nописано в истории, еще не произошло. Это произойдет ближе к мо­\nменту разработки функции программы. А вот само действие начи­\nнается тогда, когда историю уже пишут. В то время разработчики\nи заинтересованные стороны обсуждают некоторые возможные\nподробности истории и затем записывают все в упрощенном виде.\nЕще рано точно говорить о подробностях, поэтому подробности\nопущены, а описание упрощено. Мы стараемся отложить уточне­\nние подробностей как можно на более долгий срок, до тех пор пока\nне начнется разработка по этой истории. Поэтому оставим историю\nв сокращенном виде как предпосылку для дальнейших действий1.\nКак правило, мы записываем истории на каталожных карточках.\nПонимаю-понимаю. С чего бы мы использовали такую примитив­\nную древность, когда в современном мире у нас есть компьютеры,\nпланшеты и прочее, спросите вы? Но выходит, что возможность\nдержать карточки у себя в руках, передавать их друг другу через\nстол, писать на них и делать с ними многое другое представляется\nчрезвычайно важной.\nИногда автоматизированные средства могут их заменить, я рас­\nскажу о них в другой главе. Но сейчас будем считать, что истории\nнаписаны на карточках.\nВспомните, что во Вторую мировую войну боевые действия пла­\nнировались2 с помощью карточек, поэтому я считаю этот метод\nпроверенным.\n1\t Это одно из определений истории, данное Роном Джеффрисом.\n2\t Ну, в какой-то степени, все равно.\n\nПланирование\n111\nИстории для банкоматов\nДавайте представим, что мы находимся на нулевой итерации\nи наша команда пишет истории для банкомата. Что представляют\nсобой эти истории? Первые три довольно легко вычислить: выдача\nналичных, внесение наличных и перевод. Конечно, нужно научить\nбанкомат идентифицировать пользователя. Можно назвать эту\nисторию «вход». А раз есть вход, значит, вероятно, должен быть\nи выход.\nТеперь представим, что у нас есть пять карточек. Их будет почти\nнаверняка больше, как только мы начнем по-настоящему углу­\nбляться в работу банкомата. Мы можем представить, что есть такие\nзадачи, как аудит, платеж по кредиту и много всего прочего. Но\nдавайте пока что остановимся на пяти карточках.\nЧто у нас на них? То, о чем мы недавно упоминали — вход, выход,\nвыдача наличных, внесение наличных и перевод. Конечно, это не\nвсе слова, которые мы перечислили во время нашего исследования.\nВо время встречи мы обговорили много подробностей. Мы обсуж­\nдали, как пользователь осуществляет вход посредством того, что\nвставляет карту в приемник и вводит пин-код. Мы обсуждали, что\nсобой представляет внесение наличных, как их вставляют в купю­\nроприемник и как он пересчитывает эти средства. Мы обсуждали,\nкак выдаются наличные средства и что делать в случае, если купю­\nры застряли или просто закончились. Мы прорабатывали многие\nиз этих подробностей.\nПока что все эти подробности неточны, поэтому мы их и не запи­\nсываем. Мы записываем только слова. Нет ничего плохого в том,\nчто вы сделаете несколько пометок на карточке, если вам нужны\nнапоминания по каким-то вопросам, но это необязательно. На\nкарточки не накладывается формальных ограничений.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Отказ от подробностей возможен благодаря дисциплине", "output": {"text": "И это непросто. Каждый член команды посчитает нужным так или иначе\nобсудить все подробности, ничего не упустив. Сдерживайте эти\nпорывы!\nКак-то раз я работал с менеджером проекта, который настаивал на\nтом, что нужно записывать на карточке подробности абсолютно\nкаждой истории. Карточки с историями были разбиты на единицы\nсложности, а сами единицы сложности были написаны мельчай­\nшим шрифтом. Их было невозможно прочесть, и они стали не­\nпригодными. На них было столько нюансов, что оценить задания\nпросто не оставалось шансов. Составить график работ по ним не\nполучалось. Пользы от них не было никакой.\nХуже того, в каждую карточку с историей была вложена уйма уси­\nлий, поэтому от них нельзя было просто избавиться.\nИменно временная нехватка подробностей делает историю осуще­\nствимой, планируемой и оцениваемой. Истории должны создавать­\nся с небольшими затратами, потому что многие из них придется\nизменить, разделить, объединить или даже забыть. Просто не за­\nбывайте о том, что они являются заменителями, а не требованиями.\nТеперь у нас есть кипа карточек, созданных во время нулевой ите­\nрации. Остальные создадут позже, по мере возникновения новых\nидей и функций. На самом деле создание историй никогда не пре­\nкращается. Истории постоянно пишут, изменяют, отбрасывают и,\nчто самое главное, развивают в ходе проекта.\nОценка историй\nПредставьте, что эти карточки лежат на столе напротив вас, а во­\nкруг стола сидят остальные разработчики, тестировщики и заинте­\nресованные стороны. Все вы встретились для того, чтобы оценить\n\nПланирование\n113\nистории, помещенные на эти карточки. Еще состоится много встреч\nвроде этой. Они будут проводиться каждый раз, когда будут до­\nбавлены новые истории или уточнено что-то насчет старых. Стоит\nожидать, что такие встречи будут непринужденными, но законо­\nмерными для каждой итерации.\nОднако еще начало нулевой итерации, и это самая первая, оценоч­\nная встреча. До этого оценка историй не проводилась.\nИтак, мы выбираем из кипы историю средней сложности. До­\nпустим, это история «вход». Многие из нас присутствовали при\nнаписании этой истории, поэтому слышали разнообразные под­\nробности, которые, как представляли себе заинтересованные сто­\nроны, должны быть приведены в ней. Мы, скорее всего, попросим\nпартнеров рассмотреть эти подробности сейчас, чтобы убедиться\nв том, что понимаем сложившиеся обстоятельства одинаково.\nПотом мы оценим реализацию истории в пунктах. История «вход»\nполучит 3 единицы по сложности разработки соответствующей\nфункции (рис. 3.1). Почему 3? А почему бы и нет? История «вход»\nсредняя по сложности, поэтому она получает средний балл. Три —\nэто средний балл при шестибалльной шкале оценки историй.\nВход\n3\n6\nВыдача\nналичных\n5\nВнесение\nналичных\n3\nПеревод\n1\nВыход\nРис. 3.1. История «вход» получает три единицы сложности", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Теперь история «вход» становится эталоном", "output": {"text": "С ней будут сравни­\nвать все истории при проведении оценки. Так, например, выход из\nсистемы гораздо проще, чем вход в нее. Поэтому история «выход»\nполучает единицу. Выдача наличных, вероятно, в два раза сложнее,\nчем вход, поэтому эта история получает 6 единиц. Внесение на­\nличных представляет собой примерно то же самое, что и выдача,\nоднако эту историю реализовать чуть легче. Отдадим ей 5 единиц.\nИ, наконец, реализация перевода не сложнее, чем реализация вхо­\nда, поэтому она получает те же 3 единицы.\nМы записываем эти числа в одном из верхних углов карточки\nс историей, которую мы оценивали. Я еще расскажу подробнее\nо том, как даются оценки. А сейчас давайте считать, что у нас есть\nкипа карточек с историями, которые мы оцениваем в единицах\nот 1 до 6. Почему от 1 до 6? А почему бы нет? Существует много\nсхем, по которым можно оценивать сложность. Обычно чем проще\nсистема оценок, тем лучше.\nВ этой связи, возможно, у вас появится вопрос: а что в действи­\nтельности измеряют единицы сложности? Возможно, вы поду­\nмаете, что время — часы, дни, недели или что-то подобное. Но\nнет. Скорее это единица измерения затрачиваемых усилий, а не\nвремени. Действительно, они позволяют измерить сложность\nвыполнения истории.\nЕдиницы сложности историй должны быть линейными. История\nна карточке, оцениваемая в 2 единицы, должна быть вдвое легче\nтой, что оценена в 4. Впрочем, линейность не обязана блюстись\nв совершенстве. Помните, что это оценка, поэтому точность на­\nмеренно остается размытой. На историю, оцененную в 3 единицы,\nДжим может потратить два дня, если больше не появится ошибок,\nна которые приходится отвлекаться. А Пэт сможет выполнить ее\nза день, если работает из дома. Эти оценки слишком расплывчаты,\n\nПланирование\n115\nнеотчетливы и неточны, поэтому их нельзя связывать с определен­\nными промежутками времени.\nНо в таких расплывчатых и неотчетливых оценках есть своя пре­\nлесть. Эта прелесть — закон больших чисел1. При многократном\nвыполнении задания размытость сводится на нет! Это преимуще­\nство мы будем использовать позднее.\nПланирование первой итерации\nМежду тем пришло время планировать первую итерацию. Встречу\nпо ее планированию можно считать началом. Эта встреча по плану\nдолжна составлять одну двадцатую продолжительности всей ите­\nрации. То есть если итерация длится две недели, на нее требуется\nзатратить полдня.\nНа встрече должна быть вся команда, в том числе заинтересован­\nные стороны, программисты, тестировщики и менеджер проекта.\nЗаинтересованные стороны должны заблаговременно прочитать\nоцениваемые истории и отсортировать их в порядке выполнения\nв зависимости от своих потребностей. Бывает, что команды оцени­\nвают приоритет историй в зависимости от требований клиента тем\nже способом, что и сложность выполнения задач. Есть команды,\nкоторые большее внимание уделяют приоритетам.\nНа встрече задача заинтересованных сторон заключается в том, что­\nбы выбрать истории, которые программисты и тестировщики будут\nвыполнять во время итерации. Чтобы это сделать, им нужно знать,\nсколько единиц программисты, по их мнению, смогут выполнить.\nКоличество историй за итерацию называется скоростью. Конечно,\nпоскольку это только первая итерация, никто не может сказать, ка­\n1\t https://ru.wikipedia.org/wiki/Закон_больших_чисел.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Поэтому приходится делать предпо­ложения", "output": {"text": "Предположим, что скорость будет 30 единиц за итерацию.\nВажно осознавать, что скорость не является обязательством. Ко­\nманда не дает обещание, что 30 единиц будут выполнены за итера­\nцию. Она даже не обещает постараться выполнить эти 30 единиц.\nЭта скорость не более чем предположение о том, сколько единиц\nв лучшем случае будут выполнены к концу итерации. А такое пред­\nположение не может отличаться высокой достоверностью.\nПрибыль от вложений\nТеперь заинтересованные стороны нарисовали квадрат и поделили\nего на четыре участка (рис.  3.2).\nСделать позже\nСделать сейчас\nСделать позже\nНе делать вообще\nНизкая важность Высокая важность\nВысокая сложность\nНизкая сложность\nРис. 3.2. Квадрат с четырьмя участками\nПриоритетные и несложные истории можно начинать выполнять\nхоть сейчас. Приоритетные, но более сложнее можно немного от­\nложить на потом. Неприоритетные и несложные можно сделать\nза день. А о тех, что не представляют особой ценности, да еще\nи сложны, можно забыть.\n\nПланирование\n117\nС помощью этого квадрата выполняется расчет окупаемости инве­\nстиций (ROI). Здесь нет формальностей и не нужно никакой ма­\nтематики. Заинтересованные стороны просто смотрят на карточку\nи делают вывод, основываясь на оценках приоритета и сложности\nистории.\nНапример: «Вход довольно важен, но также и сложен. С ним подо­\nждем. Выход тоже важен, но будет попроще. О! Давайте его! Вы­\nдача наличных...  сложно, очень сложно. Но нам в первую очередь\nважно показать как раз эту функцию. Поэтому делайте ее».\nМы только что увидели, как заинтересованные стороны расстав­\nляют приоритеты. Заинтересованные стороны рассматривают\nкарточки с историями и ищут те, от которых можно получить наи­\nбольшую отдачу. Они останавливаются, когда выбранные истории\nв сумме дают 30 единиц сложности. Это план на итерацию.\nПромежуточная проверка\nА теперь за работу! Позже я расскажу в подробностях о том, как\nведется разработка по историям. А сейчас просто представим, что\nесть какой-то способ превратить истории в работающий код. Пред­\nставьте этот способ как перекладывание карточек с историями из\nкучи запланированное в кучу сделанное.\nК середине итерации должно быть выполнено много историй.\nА сколько единиц должно оставаться? Правильно, столько же,\nсколько и сделано. В нашем случае это 15. Чтобы провести про­\nмежуточную проверку, нужно уметь делить на два.\nПоэтому давайте созовем всех на промежуточное совещание. Пу­\nскай это будет понедельник, первый день второй недели итерации.\nНа встречу должны прийти члены команды и заинтересованные\nстороны — последние оценивают ход работ.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Ой-ей, да истории выполнены только на 10 единиц! ", "output": {"text": "Осталась всего\nнеделя, вряд ли за нее выполнят больше двадцати! Поэтому заин­\nтересованные стороны вычитают некоторое количество историй из\nплана, чтобы осталось только 10 единиц до конца итерации.\nВ пятницу после обеда подводится итог итерации с демонстра­\nцией. Оказывается, выполнено лишь 18 единиц. Итерация про­\nвальна?\nНет! Итерации не бывают провальными. Целью итерации является\nсбор данных для менеджеров. Конечно, было бы здорово, если бы\nво время каждой итерации появлялся код, но даже когда этого не\nпроисходит, главное — собрать данные.\nВчерашняя погода\nТеперь мы знаем, сколько единиц сложности историй мы можем\nвыполнить за неделю — около 18. Как думаете, сколько единиц\nзапланируют заинтересованные стороны в понедельник, в начале\nследующей итерации? Без сомнений, восемнадцать. Это называют\nвчерашней погодой. Вчерашняя погода лучше всего предскажет,\nкакая погода будет сегодня. А вернее всего ход текущей итерации\nможет предсказать то, что получено в ходе предыдущей.\nПоэтому на встрече по планированию заинтересованные стороны\nдобавляют столько историй, чтобы получилось 18 единиц. Но на\nэтот раз на таком же промежуточном совещании происходит кое-\nчто, что не укладывается в голове. Выполнено 12 единиц. Надо ли\nговорить об этом партнерам?\nНет, не стоит. Они сами все увидят. Поэтому заинтересованные\nстороны добавляют шесть дополнительных единиц, чтобы по плану\nвышло 24.\n\nПланирование\n119\nКонечно, выходит так, что команда успевает выполнить только 22.\nПоэтому на следующую итерацию планируется 22 единицы.\nОкончание проекта\nИ на этой итерации происходит то же самое. По завершении ите­\nрации скорость, с которой выполняются истории, наносится на\nсоответствующий график, чтобы все могли видеть, как быстро\nкоманда выполняет свою работу.\nПредположим, что так продолжается итерация за итерацией, месяц\nза месяцем. Что происходит с кипой карточек с историями? Пред­\nставьте, что кругооборот итераций — это насос, перекачивающий\nROI из этой кипы. И представьте, что непрерывное появление тре­\nбований в ходе проекта — это насос, перекачивающий окупаемость\nобратно в кипу. Пока входящие вложения превосходят их отток,\nпроект будет продолжаться.\nОднако может случиться и так, что количество новых функций\nдля реализации постепенно сведется к нулю. Когда это произойдет,\nденежные средства, которые содержат карточки, будут исчерпаны\nчерез несколько итераций. Придет день, когда на встрече по плани­\nрованию заинтересованные стороны посмотрят на карточки с исто­\nриями и поймут, что работы больше не осталось. Проект завершен.\nПроект заканчивается не тогда, когда выполнены все истории.\nПроект можно считать завершенным, когда больше не остается\nкарточек с историями, которые стоит выполнять.\nИногда удивляет, какие карточки с историями остаются в кипе,\nкогда проект заканчивается. Однажды я работал над проектом,\nкоторый длился год. Самая первая история, написанная для про­\nекта и давшая ему название, так и не была реализована. Эта исто­", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "И к тому времени, когда срочные истории были выполнены, оказалось, что важность первоначальной истории испарилась", "output": {"text": "Истории Пользовательские истории — это простые инструкции, которые\nнапоминают нам о свойствах функций. Мы стараемся не записы­\nвать слишком много подробностей, истории мы пишем как раз\nпотому, что знаем, что подробности наверняка не раз изменятся.\nПодробности нужно записывать позже, в качестве приемочных\nтестов.\nИстории должны соответствовать следующим атрибутам качества\n(критерии INVEST). Независимость (Independent). Пользовательские истории не­\nзависимы друг от друга. Это значит, что истории необязательно\nвыполнять в каком-то определенном порядке. Например, выход\nне нужно выполнять после входа.\nЭто гибкое требование: бывает и так, что какие-то истории будут\nзависеть от других, которые нужно реализовать в первую очередь.\nК примеру, если мы реализуем вход без функции восстановления\nзабытого пароля, то однозначно восстановление пароля в какой-то\nмере зависит от входа. И все же мы стараемся отделить истории\nтак, чтобы они были зависимы друг от друга в наименьшей мере.\nЭто позволяет выполнять истории в нужном клиенту порядке. Обсуждаемость (Negotiable). А это еще одна причина, по\nкоторой мы не записываем все подробности. Нужно, чтобы раз­\nработчики и клиенты могли обсуждать эти подробности.\n\nПланирование\n121\nНапример, клиенты могут запросить классный интерфейс с воз­\nможностью перетаскивания в него чего-либо. Разработчики могут\nпосоветовать интерфейс попроще, с флажками, объяснив, что\nразработка в таком случае будет проще и дешевле. Обсуждения\nважны, поскольку это один из немногих способов, с помощью\nкоторых клиенты получают представление о том, как управлять\nстоимостью разработки ПО. Ценность (Valuable). Клиенты хотят видеть, что у истории есть\nопределенная измеримая ценность.\nРефакторинг нельзя считать историей. Архитектуру тоже нельзя.\nИ чистка кода никакая не история. История — это всегда что-то,\nимеющее ценность для бизнеса. Не переживайте, нам доведется\nиметь дело с рефакторингом, архитектурой и чисткой кода, но не\nс самими историями.\nЭто значит, что история будет проходить через все уровни разра­\nботки программы. То есть она может частично затрагивать часть\nреализации графического интерфейса, промежуточного программ­\nного обеспечения, баз данных и так далее. Представьте, что исто­\nрия — это тонкий вертикальный срез, проходящий сквозь горизон­\nтальные слои проекта.\nКоличественное измерение ценности можно проводить без фор­\nмальностей. Некоторым командам может вполне подойти шкала\nприоритетов «высокий — средний — низкий», кому-то больше\nпонравится десятибалльная шкала. Не имеет значения, какую\nшкалу использовать, главное — уметь чувствовать разницу между\nисториями, ценность которых значительно отличается. Поддаваемость оценке (Estimable). Пользовательская история\nдолжна быть достаточно конкретной, чтобы разработчики могли\nсделать прогноз.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "История «программа должна быть быстрой» не поддается оценке,", "output": {"text": "\nпотому что быстрота не имеет предела. Это сопутствующее требо­\nвание, которое относится ко всем историям. Компактность (Small). Пользовательская история должна\nбыть небольшой, чтобы один-два разработчика смогли с ней\nсправиться за одну итерацию.\nНе нужно, чтобы одна история огромным одеялом накрывала всю\nкоманду в течение целой итерации. Желательно, чтобы в итерации\nбыло примерно то же количество историй, что и разработчиков\nв команде. Если в команде 8 разработчиков, нужно подбирать от\n6 до 12 историй для каждой итерации. Вы ведь не хотите завязнуть\nна одном этапе, верно? Это скорее совет, чем правило. Тестируемость (Testable). Клиенты должны четко назвать те­\nсты, позволяющие подтвердить, что история выполнена.\nКак правило, эти тесты пишут QA-специалисты. Тесты должны\nбыть автоматизированы, с их помощью выполняется проверка\nисторий на завершенность. Подробнее об этом вы узнаете позже.\nА пока что не забывайте, что каждая история должна быть до­\nстаточно конкретной, чтобы можно было подобрать необходимые\nтесты.\nНо, может, это идет вразрез с принципом обсуждаемости? Нет,\nпотому что когда мы пишем историю, то не обязаны знать, какие\nтесты нужны. Когда возникнет необходимость, тогда и будет\nнаписан тест. Хотя я еще не знаю всех нюансов истории вход,\nя уверен, что ее можно протестировать, потому что вход — это\nконкретное действие. А теперь посмотрим на историю пригод­\nный к эксплуатации. Ее никак не протестируешь. И даже никак\nне оценишь. Действительно, прогнозируемость и тестируемость\nидут рука об руку.\n\nПланирование\n123\nОценка историй\nСуществует множество способов оценки историй. Большинство из\nних — разновидности подхода Wideband Delphi1.\nОдин из простейших способов — оценка на пальцах. Разработчики\nсидят вокруг стола, вчитываются в историю и, если необходимо,\nобсуждают ее с заинтересованной стороной. Потом разработчики\nпрячут одну руку за спину так, чтобы никто не мог ее увидеть, сги­\nбают пальцы так, чтобы по пальцам можно было понять, сколько\nединиц сложности требуется, по их мнению, затратить на выполне­\nние истории. После этого кто-нибудь начинает счет, и на счет «три»\nвсе одновременно достают руки с зажатыми пальцами из-за спины.\nЕсли все показали одинаковое число пальцев либо отклонение не­\nвелико и в среднем все показывают одно и то же, то число записы­\nвается на карточке с историей, а команда переходит к следующей\nистории. Но если между участниками встречи есть значительные\nразногласия, то разработчики обсуждают причину и повторяют\nдействия до тех пор, пока согласие не будет достигнуто.\nМожно оценивать истории по размерам одежды: большие, средние\nи маленькие. Если хочется задействовать все пять пальцев, про­\nдолжайте. С другой стороны, использование шкалы с большим\nколичеством баллов почти всегда абсурдно. Помните, мы хотим\nдать достоверную оценку, а не наиболее точную.\nПокер планирования2 — похожий способ, но там нужны карты.\nСуществует много популярных колод карт для такого покера.\n1\t https://en.wikipedia.org/wiki/Wideband_delphi.\n2\t Grenning J. W. 2002. Planning Poker, or How to avoid analysis paralysis while\nrelease planning. URL: https://wingman-sw.com/articles/planning-poker.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Поэтому вы пишете новую историю, которую называете оценка печати в PDF", "output": {"text": "\nТеперь оцениваем уже ее, и ее-то оценить проще. Вы уже знаете,\nчто нужно сделать, чтобы выяснить, как работает библиотека PDF.\nОбе истории отправляются в кипу с карточками.\nНа одной из последующих встреч по планированию заинтересован­\nные стороны могут попробовать выбрать карточку печать PDF. Но\nне тут-то было — костыль встанет им поперек горла. Поэтому при­\nдется выбрать карточку с костылем. Это позволит разработчикам\nвыполнить работу, необходимую для оценки первоначальной исто­\nрии, которую можно провести в одной из следующих итераций.\nУправление итерацией\nЦель каждой итерации — получение данных посредством вы­\nполнения историй. Команде скорее следует сосредоточиться на", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Предпо­чтительнее выполнить 80 % историй, чем выполнить все истории\nна 80 %", "output": {"text": "Сосредоточьтесь на доведении историй до их выполнения.\nКак только заканчивается совещание по планированию, програм­\nмисты должны выбрать истории, за которые будут нести личную\nответственность. В некоторых командах выбирают истории, нахо­\nдящиеся сверху, а остальные откладывают на потом, чтобы взяться\nза них по выполнении выбранных ранее. Как бы то ни было, про­\nграммисты сами выбирают и выполняют истории.\nМенеджеры и лидеры могут поддаться искушению назначать\nистории программистам. Но этого нужно избегать. Пускай про­\nграммисты договорятся между собой.\nНапример:\nДжерри (опытный спец):\n— Если не возражаете, я возьму на себя вход и выход. Думаю,\nесть смысл выполнить их вместе.\nЖасмин (опытный спец):\n— Не вопрос, только почему бы вам вдвоем с Альбертом не взять­\nся за базы данных? Он постоянно расспрашивает, как мы ис­\nпользуем источники событий. Мне кажется, что вход даст ему\nнекоторую ясность. Что скажешь, Альберт?\nАльберт (стажер):\n— О! Звучит круто! Я видел, как это делается. Я даже за выдачу\nналичных взяться могу!\nАлексис (ведущий программист):\n— А почему бы мне не взять выдачу наличных? Альберт! Давай ты\nпоработаешь над ней вместе со мной. Потом возьмешь перевод.\n\nПланирование\n127\nАльберт:\n— Угу, ладно. Наверное, так будет лучше. Кто сначала перекла­\nдывает камешки, потом передвигает горы, ведь так?\nЖасмин:\n— Ну конечно, Альберт! И остается внесение наличных. Я возьму\nэто на себя. Алексис, мы с тобой в одной упряжке, нам нужно\nпоработать над пользовательским интерфейсом, ведь они у нас,\nвероятно, мало отличаются. И мы должны иметь возможность\nделиться кодом.\nВ этом примере можно увидеть, как ведущий программист на­\nправляет новичка, амбициозного стажера, не давая ему взять на\nсебя больше, чем он может, а еще то, как члены команды сообща\nвыбирают себе истории в работу.\nКонтроль качества и  приемочное тестирование\nЕсли QA-специалисты еще не начали писать автоматизированные\nприемочные тесты, то нужно это делать как можно скорее, прямо\nпосле встречи по планированию. Тесты для историй, рассчитанные\nна быстрое выполнение, должны быть готовы как можно раньше.\nНе нужно ждать, пока приемочные тесты созреют для выполнен­\nных историй.\nПриемочные тесты должны появляться быстро. Мы ожидаем, что\nих полностью напишут еще до середины итерации. Если к середине\nитерации готовы не все приемочные тесты, кто-то из разработчиков\nдолжен бросить работу над историей и помогать писать тесты.\nЭто означает, что за эту итерацию не удастся выполнить все за­\nпланированные истории, однако в любом случае без приемочного\nтестирования ни о каком выполнении не может идти речи. Только", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "QA-Необходимо обсуждать структуру тестов и писать их сообща, вплоть до парного программирования", "output": {"text": "До середины итерации команде нужно постараться выполнить\nистории, чтобы успеть к промежуточному совещанию. А до конца\nитерации разработчикам нужно постараться успеть подвергнуть\nоставшиеся истории соответствующим приемочным тестам.\nЕсли мы говорим, что история выполнена, то подразумеваем, что\nона прошла приемочное тестирование.\nВ последний день итерации разработчикам предстоят муки выбора:\nкакие истории стоит завершить, а от каких придется отказаться?\nМы предпочитаем перераспределять усилия. Так получается вы­\nполнить столько историй, сколько возможно.\nОпять же ни к чему заканчивать итерацию с историями, выпол­\nненными лишь наполовину, ведь есть возможность пожертвовать\nкакой-то историей, чтобы полностью выполнить другую.\n\nПланирование\n129\nЗдесь не нужна спешка. Нужны конкретные результаты и изме­\nримость хода работ. Нужны надежные данные. Историю можно\nсчитать выполненной, когда пройдено приемочное тестирование.\nКогда программист говорит, что выполнил историю на 90 %, в ре­\nальности непонятно, насколько она готова. Поэтому на графике\nскорости работ стоит отмечать лишь истории, прошедшие при­\nемочное тестирование.\nДемонстрация\nКаждая итерация заканчивается короткой демонстрацией но­\nвых функций заинтересованным сторонам. Такая встреча должна\nдлиться не больше часа или двух, в зависимости от размера итера­\nции. В демо-версии должно быть видно, что истории, в том числе\nвсе предшествующие, полностью прошли приемочное и модульное\nтестирование. Следует также показать свежий функционал, добав­\nленный к программе. Лучше всего, если заинтересованные стороны\nсами проверяют работоспособность программы, чтобы у разработ­\nчиков не было соблазна скрыть то, что не работает.\nСкорость\nЗавершающий аккорд итерации — обновление графика скорости\nи диаграммы сгорания задач. На графике нужно отмечать единицы\nтолько тех историй, которые прошли соответствующие приемочные\nиспытания. После нескольких итераций графики пойдут на спад.\nСпад диаграммы сгорания задач помогает выявить, какого числа\nбудет достигнута следующая важная веха. График скорости же по­\nказывает нам, насколько хорошо организована работа команды.\nВо время начальных итераций график скорости будет довольно\nнеточным, так как команда еще толком не разобралась в основах", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "НЕБОЛЬШИЕ ЧАСТЫЕ РЕЛИЗЫ Согласно методу «небольшие и частые релизы», команде разработ­чиков нужно выпускать релизы своего программного обеспечения как можно чаще", "output": {"text": "В конце девяностых, когда Agile только появился,\nмы думали, что норма — это выпуск релиза раз в месяц-два. Но\nсейчас этот срок стал гораздо короче. Сокращать срок можно до", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Увеличение частоты релизов происходит благодаря непрерывной доставке (continuous delivery)", "output": {"text": " Этот метод заключа­\nется в том, что релиз происходит после каждого изменения кода.\nЭто толкование может ввести в заблуждение, потому что выраже­\nние «непрерывная доставка» создает впечатление, что мы хотим\nсделать короче только цикл доставки. Это не так, мы хотим со­\nкратить каждый цикл.\nК сожалению, в силу исторических обстоятельств мы имеем пре­\nпятствие в виде некой значительной инерции. Эта инерция — руди­\nмент тех способов, к которым мы прибегали при работе с исходным\nкодом, когда трава была зеленее, а деревья выше.\nКраткая история управления\nисходным  кодом\nИстория управления исходным кодом — это повесть о циклах и их\nразмерах. Она берет начало в 1950–1960-х годах, когда исходный\nкод хранили в отверстиях, пробитых на кусочках бумаги (рис.  3.3).\nРис. 3.3. Перфокарта\n\nНебольшие частые релизы\n133\nМногие из нас тогда пользовались перфокартами. Карта вмещала\nна себе 80 символов и представляла собой одну строку программ­\nного кода. Сама программа занимала целую колоду таких карт.\nОбычно их перетягивали резинкой и хранили в коробке (рис.  3.4).\nРис. 3.4. Колоды перфокарт в коробке\nВладелец программы хранил колоду перфокарт в выдвижном ящи­\nке или шкафчике. Если кому-то нужно было проработать исходный\nкод, это приходилось делать прямо из ящика или шкафчика с по­\nзволения владельца.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Если у вас получилось проверить исходный код, то вы были един­ственным, кто мог внести в него изменения, ", "output": {"text": "поскольку имели возможность физически посмотреть перфокарты. Больше никто\nне мог их касаться. Когда дело было сделано, нужно было отдать\nколоду владельцу, который клал ее в ящик или шкафчик.\nЦикл для этой программы составлял столько, сколько времени\nу программиста был к ней физический доступ. Счет мог идти на\nдни, недели, месяцы.\nЛенты\nВ 1970-х мы плавно перешли к тому, что стали хранить образы\nперфокарт с исходным кодом на магнитной ленте. На магнитной\nленте можно держать большое количество программных модулей,\nа еще ее было проще копировать. Редактирование модулей вы­\nглядело так:\n\n## Скопировать модули, которые нужно отредактировать, с глав­\n\n\nной ленты на ленту с рабочей копией.\n\n## Положить главную ленту на место, чтобы другие могли полу­\n\n\nчить доступ к прочим модулям.\n\n## Воткнуть цветную кнопку на доску выдачи рядом с названием\n\n\nмодулей, которые нужно отредактировать. (У меня была синяя,\nу начальника красная, у остальных программистов из моей коман­\nды были желтые. Да-да, в конце концов у нас закончились цвета.)\n\n## Редактировать, компилировать и тестировать на ленте с рабочей\n\n\nкопией.\n\nНебольшие частые релизы\n135\n\n## Скопировать измененные модули с ленты с рабочей копией на\n\n\nглавную ленту.\n\n## Вынуть кнопку из доски.\n\n\nИ снова цикл составлял ровно столько, сколько кнопка находилась\nна доске выдачи. Это могло занимать часы, могло дни и даже меся­\nцы. Покуда кнопка находилась на доске выдачи, никто больше не\nмог обращаться к модулям, которые вы закрепили за собой.\nРазумеется, эти модули были и на главной ленте, и в крайнем\nслучае кто-нибудь мог в обход правил отредактировать модули\nнепосредственно на ней. Кнопки были условным соглашением, но\nникак не физической преградой.\nДиски и  системы управления\nисходным  кодом\nВ 1980-х годах исходные коды переместились на диски. Поначалу\nеще использовалась доска выдачи и кнопки, но потом начали по­\nявляться настоящие средства управления исходным кодом. Первое\nиз того, что я помню, — это Система управления исходным кодом\n(SCCS). Она работала по тому же принципу, что и доска выдачи.\nПроисходила блокировка модуля на диске, из-за чего никто не\nмог получить доступ к его редактированию. Такое блокирование\nназывается пессимистическим. И снова то же самое. Длительность\nцикла зависела от длительности блокирования. Блокировка могла\nдлиться часами, днями, а то и месяцами.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "На смену Системе управления исходным кодом пришла Система управления редакциями (RCS), которая, в свою очередь, уступи­ла место", "output": {"text": " Системе одновременных версий (CVS). Во всех так или\nиначе применялась пессимистическая блокировка. Поэтому цикл\nпо-прежнему длился долго. Тем не менее хранение данных на диске\nбыло куда удобнее, чем на магнитной ленте. При копировании мо­\nдулей с оригинала на ленту с рабочей копией очень соблазнительно\nбыло сделать модули крупными сами по себе.\nС другой стороны, диски позволяли нам стремительно уменьшать\nразмер модулей. Множество маленьких модулей просто-напросто\nне вело к таким издержкам, как несколько крупных. За счет умень­\nшения модулей продолжительность цикла стала короче, поскольку\nколичество времени, затрачиваемое на проверку модуля, также\nотносительно уменьшилось.\nПроблема состояла в том, что изменения в программе влекли за со­\nбой изменения во многих модулях. В случаях, когда модули были\nтесно связаны, на их проверку все еще уходило много полезного\nвремени. Некоторые из нас научились отделять связанные модули,\nчтобы уменьшить эти сроки. А кто-то так и не научился.\nSubversion\nПотом пришло время системы Subversion (SVN). В ней появи­\nлось оптимистическое блокирование. Оптимистическое бло­\nкирование по сути никакое и не блокирование. Разработчик\nмог проверять модуль одновременно с другим разработчиком.\nСистема позволяла отслеживать действия разработчиков и ав­\nтоматически объединять изменения в модулях. Если система\nобнаруживала конфликт, когда два разработчика работали над\nодними и теми же строками кода, то вынуждала программиста\n\nНебольшие частые релизы\n137\nсперва разрешить этот конфликт, прежде чем подтвердить при­\nнятые изменения.\nЭто значительно сократило продолжительность цикла до време­\nни, требуемого на редактирование, компиляцию и тестирование\nпоследовательности небольших изменений. Связанность моду­\nлей еще представляла собой проблему. Тесно связанные модули\nзамедляли цикл, потому что приходилось вносить изменения во\nмного модулей одновременно. Однако программы, где модули не\nбыли так тесно связаны, проходили цикл гораздо быстрее. Сам\nсрок проверки больше не служил ограничивающим фактором.\nGit и  тесты\nВ наши дни мы используем Git. Сроки проверки при использо­\nвании Git сошли на нет. Это понятие больше не существует. На­\nпротив, любое изменение в модуль можно внести когда угодно.\nПрограммисты разрешают конфликты между этими изменениями,\nкак и когда этого пожелают. Маленькие несвязанные модули по­\nзволяют молниеносно и часто вносить изменения. Поэтому циклы\nсоставляют считаные минуты. Добавьте к этому возможность\nсоздавать всеобъемлющие и быстрые тестовые наборы, которыми\nможно протестировать практически все. Вот вам и все нужное для\nнепрерывной доставки.\nИсторическая инерция\nК сожалению, организации с трудом отказываются от унасле­\nдованных подходов. Циклы продолжительностью в дни, недели\nи месяцы глубоко укоренились в культуре многих команд, от­\nкуда затем перешли к QA-специалистам, менеджерам и даже\nзаинтересованным сторонам. С колокольни такой «культуры»", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "ПРИЕМОЧНОЕ ТЕСТИРОВАНИЕ", "output": {"text": "Приемочное тестирование — один из самых непонятных и запутан­\nных методов Agile, который используется реже всего. Это любо­\nпытно, потому что основной посыл удивительно прост: требования\nуказывает клиент.\nПроблема, несомненно, в понимании слова «указывает». Многие\nклиенты считают, что могут, поводив руками в воздухе, расплыв­\n\nПриемочное тестирование\n139\nчато и туманно описать функционал, а потом произойдет чудо —\nразработчики сами догадаются обо всех мельчайших нюансах.\nА многие программисты хотят, чтобы клиенты точно объяснили,\nкак должна работать программа, вплоть до координат и цвета каж­\nдого пикселя на экране.\nИз этих двух крайностей нужно вывести золотую середину.\nЧто же такое спецификация? Спецификация по своей сути — это\nфункция, которую можно протестировать. Например:\nКогда пользователь вводит правильное имя учетной записи и па­\nроль, а потом нажимает «войти», на экране появится страница\nприветствия.\nВот это и есть указание, то есть спецификация. Очевидно, что это\nможно протестировать.\nОчевидно, что тест для этой функции можно автоматизировать.\nНет причин на то, чтобы компьютер не мог удостовериться в вы­\nполнении указанного требования.\nВот так работает приемочное тестирование. Опыт подсказывает,\nчто насколько это вообще осуществимо, требования к системе\nдолжны представлять собой автоматизированные тесты.\nПогодите! А кто же пишет эти тесты? Первый абзац этого раздела от­\nвечает на наш вопрос: требования указывает клиент. Тогда получает­\nся, что клиенты должны писать автоматизированные тесты, ведь так?\nПогодите! Автоматизированные тесты должны быть написаны на\nкаком-то формальном исполняемом языке. И это работа для про­\nграммистов, не иначе! Получается, что программистам придется\nписать эти тесты?", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Погодите! Если программисты будут писать тесты, то это будет не то, чего хочет клиент", "output": {"text": "Это будут технические тесты с множеством\nнюансов, понятных только программистам. Они не отражают цен­\nность тестируемого элемента для клиента. Тогда автоматизирован­\nные тесты будет писать клиент? Ведь так?\nПогодите! Если автоматизированные тесты будет писать клиент, то\nони не будут соответствовать технологии, которую мы используем.\nИ программистам тогда придется их переписывать, не так ли?\nВот тут-то и становится понятно, почему этот метод вводит многих\nлюдей в заблуждение.\nИнструменты и  методологии\nА еще хуже то, что наш метод погряз в инструментах и методоло­\nгиях.\nПытаясь облегчить клиентам написание автоматизированных\nтестов, программисты написали целое изобилие инструментов,\nоказывающих медвежью услугу. Имеются в виду поделки вроде\nFitNesse, JBehave, SpecFlow и Cucumber. Каждый из этих инстру­\nментов предоставляет формы, призванные отделять техническую\nсторону автоматизированного теста от пользовательской. Гипотеза\nсостоит в том, что клиент может написать пользовательскую часть\nавтоматизированного теста, в то время как программисты могут\nнаписать код, связывающий эти тесты с тестируемой программой.\nЗвучит круто, и инструменты вроде как неплохо способствуют\nразделению труда. Тем не менее клиенты неохотно берутся за\nподобное. Представители компаний, ответственные за указание\nтребований в спецификациях, побаиваются формальных языков.\nОни в своем большинстве предпочитают человеческие языки\n\nПриемочное тестирование\n141\nвроде русского или английского для написания спецификаций\nс требованиями.\nУвидев, что клиенты ни в какую не хотят писать приемочные\nтесты, программисты решили исправить положение, и в надежде\nна то, что клиенты хотя бы прочитают документы, написанные\nформальным языком, уже сами написали для них тесты. Но и это\nне сработало, ведь клиенты терпеть не могут формальные языки.\nОни предпочтут посмотреть на работающую программу или в луч­\nшем случае доверят тестирование QA-специалистам.\nРазработка через поведение\nС наступлением нового тысячелетия Дэн Норт начал работу по\nпересмотру разработки через тестирование. Получившуюся ме­\nтодологию он назвал разработкой через поведение. Он поставил\nсебе цель избавиться от жаргона технарей в тестах, чтобы тесты\nбольше напоминали спецификации с требованиями, которые так\nлюбят клиенты.\nСначала это было еще одной попыткой формализации языка тести­\nрования, в этом случае применялось три ключевых слова: «дано»,\n«когда» и «тогда». Было создано или модифицировано несколько\nинструментов для поддержки этого языка. В их числе JBehave,\nCucumber и FitNesse. Но с течением времени упор стал делаться не\nна инструменты и тесты, а на требования и спецификации.\nСторонники разработки через поведение предполагают, что кли­\nенты могут извлечь большую пользу, указывая требования к своим\nпрограммам на формальном, основанном на сценариях языке вроде\nтого, который использует ключевые слова «дано», «когда» и «тог­", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "автоматизированы ли в действительности такие требования в виде тестов", "output": {"text": "Это избавляет клиентов от соответствия техническим требовани­\nям, которые налагает написание действительно исполняемых те­\nстов, в то же время позволяя быть тестам формальными и точными.\nКак показывает практика…\nНесмотря на всю противоречивость и запутанность, которые мы\nувидели выше, в приемочном тестировании нет ничего сложного.\nКлиенты пишут формальные тесты, которые содержат описание\nкаждой пользовательской истории, а разработчики эти тесты ав­\nтоматизируют.\nЭти тесты пишутся бизнес-аналитиками и QA-специалистами до\nзавершения первой половины итерации, когда должны разрабаты­\nваться истории, которые впоследствии будут проходить эти тесты.\nРазработчики объединяют эти тесты в непрерывную сборку. Такие\nтесты соответствуют критериям готовности для историй, разра­\nботанных во время итерации. Требования к истории не считаются\nуказанными, пока для нее не написан приемочный тест. История\nне считается завершенной, пока не пройдено приемочное тести­\nрование.\nБизнес-анализ и  контроль качества\nПриемочные тесты — результат совместной работы бизнес-анали­\nтиков, QA-специалистов и разработчиков. Бизнес-аналитики ука­\nзывают, что должно происходить в лучшем случае. Они являются\nсвязующим звеном между заинтересованными сторонами и про­\nграммистами и выражают их желание получить хороший продукт.\n\nПриемочное тестирование\n143\nСпециалисты по контролю качества, напротив, обрисовывают\nнаихудший исход. Сейчас способов получить такой исход намного\nбольше, чем раньше. QA-специалисты зарабатывают на хлеб тем,\nчто вычисляют уязвимости программы. Технари до мозга костей,\nони способны предвидеть все финты и фокусы, которые может\nвыкинуть программа. Они также знают, как мыслят программисты\nи как определить халтуру.\nИ, конечно, не обойтись без самих разработчиков. Они, работая со\nспециалистами по качеству и бизнес-аналитиками, обеспечивают\nгарантии того, что тесты будут иметь смысл с технической точки\nзрения.\nКонтроль качества\nЗдесь, конечно, QA-специалисты играют уже более важную роль.\nЕсли сначала они выполняют тыловую работу тестировщиков,\nто теперь выходят на первый план, находясь на передовой линии\nпроекта. В начале работ они дают обратную связь после написа­\nния кода, указывая на ошибки и упущения, а потом занимаются\nпредотвращением этих ошибок, заблаговременно предоставляя\nнеобходимые данные разработчикам.\nНагрузка на специалистов по качеству многократно возрастает.\nКонтроль качества теперь должен проходить в начале каждой\nитерации, а не выявлять недостатки и несоответствие на финаль­\nной стадии. Однако в любом случае важность контроля качества\nне преуменьшается — именно инженеры по качеству определяют,\nможно ли развернуть систему.\nТесты в  конце бесполезны\nПроведение контроля качества и автоматизация тестирования\nрешают еще одну важную задачу. Когда специалист по контролю", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "QA- специалисты пропускают все регрессионные тесты, надеясь, что\nпроведут их в следующий раз", "output": {"text": "Но чаще всего «следующий раз» не\nнаступает.\nБолезнь контроля качества\nВсе перечисленное выше не самое худшее, что происходит с кон­\nтролем качества на финише. Если контроль качества проводится\n\nПриемочное тестирование\n145\nв конце, как клиенты узнают, хорошо ли выполняется работа?\nЕстественно, по количеству выявленных недочетов. Если специ­\nалисты обнаруживают тонну ошибок, то они явно не просто так\nполучают зарплату. QA-специалисты могут завышать количество\nтаких ошибок, чтобы показать, как замечательно справляются со\nсвоими задачами.\nИ считается, что раз что-то найдено, значит, все хорошо.\nКому еще выгодны недочеты? Среди старых программистов есть\nтакая присказка: «Уложусь-то я в любые сроки, а как оно будет\nработать — это уже другой разговор». Так кто еще выигрывает от\nнайденных недочетов?\nРазработчики, которым нужно уложиться в сроки.\nИ здесь не нужны слова. Не требуется никаких договоренностей.\nОбе стороны понимают, что только выиграют. Начинается черная\nторговля недочетами. Эта болезнь свойственна многим компаниям,\nона не то чтобы смертельна, но весьма изматывает.\nРазработчики в  роли тестировщиков\nЭти проблемы лечатся методом приемочного тестирования. QA-\ncпециалисты пишут приемочные тесты для историй, выполнен­\nных за итерацию. Но само тестирование проводят не они. Не QA-\nспециалисты должны проводить тестирование программы. Тогда\nкто? Программисты, конечно!\nЭто работа программистов. Разработчики ответственны за под­\nтверждение того, что их код проходит все тесты. Поэтому проведе­\nние тестирования, безусловно, работа программистов. Проведение\nтестов — единственный способ проверить, выполнены ли истории.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "ОДНА КОМАНДА", "output": {"text": "В экстремальном программировании практика «одна коман­\nда» изначально называлась «заказчик всегда рядом» (On-Site\nCustomer). Идея заключалась в том, что чем меньше дистанция\nмежду пользователями и программистами, тем лучше коммуни­\nкация, и разработка таким образом становится быстрее и точнее.\nЗаказчик был метафорой кого-то или группы людей, которые\nпонимали потребности пользователей и были рядом с командой\nразработчиков. В идеале клиент сидел в одной комнате с коман­\nдой.\nВ Scrum заказчик называется «владелец продукта». Это человек\nили группа, которые выбирают истории, ставят приоритеты и дают\nсвоевременную обратную связь.\nМетод переименовали в «одна команда», чтобы стало ясно, что\nкоманда разработчиков — это не дуэт «заказчик — программист».\nВ команде разработчиков вклад вносят все, в том числе руково­\nдители, тестировщики, разработчики технической документации\nи т.  д. Цель этого метода — в наибольшей степени улучшить кон­\n1\t Потому что автоматизация — это работа программистов!\n\nОдна команда\n147\nтакт между всеми участниками. В идеале все участники должны\nсидеть в одной комнате.\nВряд ли вызывает сомнения, что нахождение всей команды в од­\nном пространстве увеличивает ее эффективность. Команда может\nобщаться быстро и с минимум формальностей. Ответ на вопрос\nможно получить за несколько секунд. Рядом всегда есть опытные\nтоварищи, которые могут подсказать.\nБолее того, это повышает вероятность непреднамеренных инту­\nитивных открытий. Представитель заказчика всегда может по­\nсмотреть в экран программиста или тестировщика и заметить, что\nпроисходит что-то не так. Тестировщик может случайно услышать,\nнапример, что программисты, работающие в паре, обсуждают тре­\nбования, и понять, что они пришли к неверному выводу. Такой си­\nнергетический эффект нельзя недооценивать. Когда одна команда\nработает в одном пространстве, происходят чудеса.\nОбратите внимание, что этот метод относится к методам взаи­\nмодействия с клиентом, а не к методам взаимодействия внутри\nкоманды. Основные выгоды от метода «одна команда» получает\nклиент.\nКогда команда находится в одном пространстве, дело идет сла­\nженнее.\nВ одном пространстве\nВ начале 2000-х я помогал некоторым организациям внедрить\nметоды Agile. Во время предварительных визитов, до того как\nначинать активный коучинг, мы попросили наших клиентов под­\nготовить пространство и расположить в нем всех членов команды.\nЗаказчик неоднократно сообщал, что эффективность команд за­", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Размещение другим способом В 1990-х интернет открыл широкие возможности использования труда программистов в странах с очень низкой стоимостью рабо­чей силы", "output": {"text": "Искушение воспользоваться этой возможностью было\nбешеным. Бухгалтеры делали расчеты и с горящими глазами пред­\nставляли, сколько средств можно было сэкономить.\nНо мечта мечтой, а действительность опустила всех с небес на\nземлю. Оказалось, что рассылать мегабиты исходного кода по\nвсему миру не совсем то же самое, что расположить в одном про­\nстранстве команду из клиентов и программистов. Была огромная\nразница как в расстоянии, так и в часовых поясах, языке и куль­\nтуре.\nНесогласованность зашкаливала. Качество оставляло желать луч­\nшего. Нужно было много переделывать1. В последующие годы\nтехнологии в какой-то мере стали совершеннее. В наши дни ско­\nрость передачи данных позволяет регулярно связываться по видео\nи передавать изображение на экране. Два разработчика в разных\nконцах света теперь могут работать в паре над тем же кодом почти\nтак же, как если бы сидели за одним столом. Конечно, такой про­\nгресс не решает проблему разных часовых поясов, культурных\nи языковых различий, но электронное написание кода лицом\nк лицу несомненно предпочтительнее, чем пересылка исходного\nкода туда-обратно по электронной почте.\n1\t Это мои личные впечатления, основанные на разговорах с ребятами, кото­\nрые напрямую сталкивались с подобными проблемами. Сейчас у меня нет\nактуальных данных. Действуйте на свой страх и риск.\n\nОдна команда\n149\nМожно ли так работать по методам Agile? Я слышал, что можно.\nНо сам никогда не видел, чтобы это хорошо удавалось. Может\nбыть, вы видели.\nУдаленная работа из дома\nПовышение пропускной способности интернет-соединения су­\nщественно облегчило людям возможность работы из дома. В этом\nслучае различия в языке, культуре и часовом поясе не составля­\nют существенной проблемы. Кроме того, не нужно передавать\nданные через океаны, нет сбоев. Совещания команды могут про­\nходить почти так же, как если бы ее члены находились в одном\nпомещении.\nНе поймите меня неправильно. Когда члены команды работают\nиз дома, есть значительная нехватка невербального общения. Раз­\nговоры, приводящие к случайным открытиям, происходят гораздо\nреже. Неважно, насколько хороша связь посредством электроники,\nчлены команды все равно физически не в одном пространстве.\nПоэтому люди, работающие из дома, находятся в невыгодном по­\nложении. Они всегда пропускают какие-нибудь разговоры или им­\nпровизированные встречи. Несмотря на широкополосный доступ,\nони будто смотрят через глазок по сравнению с теми, кто находится\nрядом друг с другом.\nЕсли в своем большинстве команда находится в одном простран­\nстве, но один-два члена команды пару дней в неделю работают из\nдома, скорее всего, никаких трудностей не возникнет, особенно\nесли используются средства связи с хорошей пропускной способ­\nностью. С другой стороны, если члены команды почти все работают\nиз дома, такая команда никогда не сработается так же хорошо, как\nесли бы была вместе.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "На встрече в Сноуберде в 2000 году Кент Бек выразил мысль, что одна из наших задач — построить мост над пропастью, ", "output": {"text": " существую­щей между клиентами и разработчиками. Методы взаимодействия\nс клиентами играют важную роль при выполнении этой задачи.\nЕсли применять этот метод, то у разработчиков и клиентов будет\nпростой и однозначный способ общения. Такое общение порождает\nдоверие.\n\n4", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Средняя полоса модели жизненного цикла Рона Джеффриса со­стоит из методов взаимодействия внутри команды", "output": {"text": "Эти методы\nрегулируют отношения членов команды и их отношение к созда­\nваемому продукту. Методы, которые мы обсудим, — это метафора,\n40-часовая рабочая неделя, коллективное владение и непрерывная\nинтеграция.\nА потом кратко обсудим стендап-митинги.\nМетафора\nВ годы накануне и после подписания Манифеста Agile метафора\nбыла методом расплывчатым, нам было стыдно, что не могли дать\nему нормального описания. Мы знали, что это важно, поэтому мог­\nли привести удачные примеры. Но четко выразить то, что имели\nв виду, у нас не получалось. В некоторых наших беседах, на курсах\nи лекциях мы просто вскакивали и, выпучив глаза, восклицали:\n«Да вы сами все поймете, когда увидите!»\nДля плодотворного общения команде требуется ясный и упоря­\nдоченный словарный запас из понятий и концепций. Кент Бек\nпредложил понятие «метафора», так как это связывало его проекты\nс чем-то, о чем у всех команд было общее представление.\nПервым примером Бека была метафора, которая использовалась\nв проекте расчета заработной платы «Крайслер»1. Он сравнил\nоформление зарплатных чеков с конвейером. Чеки движутся от\nодной точки к другой, где к ним присоединяют разные «запча­\nсти».\n1\t https://en.wikipedia.org/wiki/Chrysler_Comprehensive_Compensation_System.\n\n153\n\nПустой чек перемещается на точку, где на нем ставят идентифика­\nционный номер сотрудника. Потом он попадает на точку, где начис­\nляется зарплата до вычета налогов. Затем он добирается до точки,\nгде вычитаются налоги, затем до точки, где вычитаются расходы\nна медицинское страхование, затем до точки, где идут отчисления\nв пенсионный фонд...  Ну вы поняли.\nПрограммисты и клиенты могут довольно просто применить такую\nметафору к подготовке зарплатного чека. Она дала им словарный\nзапас, чтобы говорить о программах.\nНо метафоры часто заводят не туда.\nНапример, в конце 1980-х я работал над проектом, в котором из­\nмерялось качество передачи данных в сетях T1. Мы загрузили дан­\nные счетчиков ошибок с конечных точек каждой линии связи. Эти\nданные были объединены в слои по полчаса. Мы рассматривали\nэти слои как ломтики чего-то сырого, из чего можно приготовить\nеду. Когда мы нарезаем хлеб ломтями, где мы жарим ломтики?\nВ тостере! И тут мы метафорически стали описывать хлеб.\nУ нас были ломтики, батоны, сухари и так далее.\nУ программистов такой словарный запас работал неплохо. Мы\nотлично понимали друг друга, когда разговаривали о сырых и при­\nготовленных ломтиках, батонах и так далее. С другой стороны,\nменеджеры и клиенты, которые слышали наши разговоры, крутили\nпальцем у виска и выходили из комнаты. Им казалось, что мы не­\nсем чушь.\nА есть пример еще хуже. В начале 1970-х я работал над системой\nразделения времени. Она перемещала приложения в память, кото­\nрая была ограничена, и выгружала их из нее. За время, за которое", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Когда буфер заполнялся,приложение уходило в спящий режим и выгружалось из памяти на диск, в то время как буфер постепенно очищался", "output": {"text": "Мы называли\nтакие буферы мусоровозами, которые ездили между мусорными\nбаками и свалкой.\nМы думали, что это гениально. Мы не могли сдержать смешков, ког­\nда разговаривали о метафорическом мусоре. По сути, мы говорили,\nчто наши клиенты — торговцы мусором. Такая метафора была удоб­\nна для общения между нами, но она выражала неуважение к тем, кто\nнам платил. Они никогда не узнали об этой метафоре.\nЭти примеры показывают как преимущества, так и недостатки\nметафоры. Метафора формирует словарь, который позволяет нам\nуспешно общаться внутри команды. С другой стороны, некоторые\nметафоры глупо звучат и являются оскорбительными по отноше­\nнию к клиенту.\nПредметно-ориентированное\nпроектирование\nВ своей прогрессивной книге Domain-Driven Design1 Эрик Эванс\nрешил нашу проблему с метафорами, и наконец мы избавились\nот чувства стыда. В этой книге он ввел понятие повсеместного\nязыка — как раз так стоило назвать метод, который получил на­\nзвание «метафора». Команде была нужна именно модель пред­\nметной области, которую описывают теми словами, с которыми\nсогласны все.\n1\t Evans E. Domain-Driven Design: Tackling Complexity in the Heart of Software.\nBoston, Massachusetts: Addison-Wesley, 2003.\n\n155\n\nПод «всеми» я имею в виду всех: программистов, QA-специа­лис­\nтов, менеджеров, клиентов, пользователей и так далее.\nВ 1970-х Том Демарко назвал такие модели «словарями данных»1.\nОни были простыми представлениями данных, которыми мани­\nпулирует приложение, и процессов, которые манипулировали\nэтими данными. Эванс значительно развил этот простой замысел\nв дисциплину моделирования предметной области. И Демарко,\nи Эванс использовали эти модели как транспортные средства для\nобщения с партнерами.\nКак простой пример: я недавно написал видеоигру Space War.\nЭлементы данных носили названия «корабль», «клингон», «рому­\nланин», «выстрел», «удар», «взрыв», «база», «транспорт» и про­\nчее. Я внимательно относился к тому, чтобы изолировать эти\nпонятия в их собственных модулях и использовать эти названия\nисключительно в приложении. Это был мой «повсеместный\nязык».\nТакой язык используется во всех частях проекта. На нем говорят\nклиенты. Разработчики говорят на нем. И QA-специалисты. Спе­\nциалисты по DevOps тоже на нем говорят. Даже клиенты берут на\nвооружение те части, которые будут им полезны. Повсеместный\nязык применяется в бизнес-моделях, требованиях, архитектуре\nи приемочном тестировании. Он прочной нитью последовательно\nобъединяет составляющие проекта на каждом этапе его жизнен­\nного цикла2.\n1\t DeMarco T. Structured Analysis and System Specification. Upper Saddle River,\nNew Jersey: Yourdon Press, 1979.\n2\t «Это энергия, создаваемая всеми живыми существами. Она снаружи и вну­\nтри нас. Она связывает всю Галактику». Лукас Дж. Звездные войны. Эпизод\nIV: Новая надежда. 1979. Кинокомпания «Лукасфилм».", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "ЧАСОВАЯ РАБОЧАЯ НЕДЕЛЯ - Претерпевший же до конца спасется.От Матфея 24: 13 На седьмой день Бог решил взять отдых.", "output": {"text": " А позже Бог велел в этот\nдень отдыхать всем. Видимо, даже Богу нужен метод «40-часовая\nрабочая неделя», или равномерная работа.\nВ начале 1970-х, когда я был восемнадцатилетним, меня и моих\nшкольных приятелей взяли работать джуниор-программистами\nдля работы над крайне важным проектом. Менеджеры установи­\nли сроки. Сроки были жесткими. Требовалось выкладываться по\nполной. Мы были незаменимыми винтиками в сложном механизме\nкомпании. Мы были важны!\nХорошо, когда тебе восемнадцать, не правда ли?\nМы, молодые и горячие, только окончившие школу, работали как\nволы. Мы работали долгими часами месяц за месяцем. В среднем\nмы работали по 60 часов в неделю. Были недели, когда мы работали\nдаже по 80 часов. Десятки раз мы работали по ночам.\nИ мы гордились тем, что работали сверхурочно. Вот мы-то были\nнастоящими программистами. Мы посвятили себя проекту. Нас\nценили. Потому что мы были единственной силой, которая могла\nспасти такой важный проект. Мы. Были. Программистами.\nА потом мы сгорели, причем жестко. Так жестко, что ушли всем\nскопом. Мы вылетели оттуда, оставив компании еле работающую\n\n40-часовая рабочая неделя\n157\nсистему разделения времени, при этом в компании не было толко­\nвых программистов, которые могли бы ее сопровождать. Вот так им!\nХорошо, когда тебе восемнадцать и ты в ярости, да?\nНе беспокойтесь, компания выкарабкалась. Оказалось, что там\nвсе же были толковые программисты помимо нас. Ребята, которые\nспокойно себе работали 40 часов в неделю. Ребята, которых мы\nпредставляли безразличными к работе и ленивыми, над которы­\nми мы во время сумасшедших ночных марафонов презрительно\nсмеялись, пока они не видели. Эти ребята без лишней суеты взяли\nсистему в свои руки, обеспечив вполне годное сопровождение.\nНе побоюсь сказать, они были рады избавиться от кучки шумных\nи надоедливых сопляков.\nРабота сверхурочно\nКак думаете, я усвоил урок из того, что вам только что рассказал?\nНет, конечно. В течение последующих 20 лет я точно так же горел\nна работе ради своих работодателей. Я продолжал прельщаться\nбайками о том, что проект чрезвычайно важен. Я, конечно, не схо­\nдил с ума, работая сутками, как в 18 лет. В среднем я работал уже\nгде-то по 50 часов в неделю. Ночные посиделки стали происходить\nреже, но никуда не исчезли.\nКогда я вырос, то понял, что самые худшие технические ошибки\nя совершал в ночные часы, когда из меня ключом била маниакаль­\nная энергия. Я осознал, что эти ошибки были огромными помеха­\nми, которые мне постоянно приходилось исправлять в часы, когда\nя по-настоящему был работоспособен.\nЗатем случилось кое-что, что заставило меня задуматься. Я и мой\nбудущий деловой партнер Джим Ньюкирк занимались ночным", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Где-то около двух часов ночи мы пытались выяснить, как переместить единицу данных из низкоуровневой части нашей программы в другую часть,", "output": {"text": " которая находилась намного выше\nв цепочке выполнения. Решение возвращать эти данные в стек не\nподходило.\nМы создали систему транспортировки внутри нашего продук­\nта по типу почты. Мы применяли ее для пересылки информа­\nции между процессами. В наших жилах тек кофеин, мы были на\nпределе возможностей. Внезапно пришло осознание, что можно\nбыло сделать так, чтобы низкоуровневая часть процесса отсылала\nединицу данных самой себе, где высокоуровневая часть могла бы\nее считать.\nДаже сейчас, спустя более трех десятилетий, каждый раз, когда мы\nс Джимом хотим описать чье-то неудачное решение, мы говорим:\n«Да уж. Они просто отослали это самим себе».\nЯ не буду грузить вас скучными подробностями, почему это реше­\nние было дурацким. Достаточно сказать, что на него ушло намного\nбольше усилий, чем мы, как казалось, сберегли. И, конечно же, это\nрешение привело к слишком глубоким и труднообратимым изме­\nнениям, поэтому мы потеряли много времени1.\nМарафон\nИ в то время я понял, что проект по разработке программного обе­\nспечения — это марафон, а не спринт или серия спринтов. Чтобы\nпобедить, надо рассчитывать силы. Если вы выскакиваете из стар­\n1\t Это произошло за десятилетие до того, как я узнал о разработке через те­\nстирование. Знай мы с Джимом этот метод в то время, мы могли бы легко\nоткатить это изменение.\n\n40-часовая рабочая неделя\n159\nтовых блоков и летите на полной скорости, у вас закончатся силы\nпрежде, чем вы пересечете финишную черту.\nТаким образом, вы должны работать в темпе, который можно под­\nдерживать в течение длительного времени. Должна быть 40-часо­\nвая рабочая неделя. Если пытаться бежать в более быстром темпе,\nчем вы можете поддерживать, все равно придется замедляться и от­\nдыхать до пересечения финишной черты. Средняя скорость будет\nниже, чем при умеренном темпе. Когда финишная черта близко,\nеще остается немного сил на то, чтобы совершить рывок. Но нет\nнеобходимости делать его раньше времени.\nМенеджеры могут просить вас поторопиться. Ни в коем случае\nне поддавайтесь. Ваша работа — грамотно распоряжаться своими\nресурсами, чтобы выстоять до конца.\nСамоотдача\nРабота сверхурочно — плохой способ выразить самоотверженность\nперед работодателем. Это лишь показывает то, что вы плохо умеете\nпланировать, что соглашаетесь со сроками, на которые не нужно\nсоглашаться, что даете обещания, но не в состоянии их сдержать,\nчто вы управляемый чернорабочий, а не профессионал.\nЭто не означает, что работать сверхурочно неправильно или что ни­\nкогда не нужно этого делать. Есть смягчающие обстоятельства, при\nкоторых работа сверхурочно — единственный выход. Но это должно\nбыть исключением. И вы должны прекрасно понимать, что работа\nсверхурочно может в итоге привести к большим временным затратам.\nТа ночная посиделка с Джимом несколько десятилетий назад была\nне последней. Она была предпоследней. Последний раз я сидел всю\nночь, когда меня вынудили обстоятельства.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "КОЛЛЕКТИВНОЕ ВЛАДЕНИЕ, В проекте, где применяется Agile, у кода нет владельца", "output": {"text": "Код — это коллективное владение команды как единого целого. Любой член\nкоманды в любое время имеет право проверить и усовершенство­\nвать любой модуль проекта. Команда коллективно располагает\nвсем кодом.\nЯ усвоил этот метод еще в начале своей карьеры, когда работал\nв Teradyne. Мы работали над большой системой, состоявшей из\nпятидесяти тысяч строк кода, разделенного на несколько сотен мо­\nдулей. Но никто из команды не владел ни одним из этих модулей.\nМы все стремились учиться и совершенствовать эти модули. Да,\nнекоторые из нас лучше знали некоторые части кода, нежели осталь­\nные, но мы старались поделиться знаниями, а не копить их в себе.\nЭта система стала одной из первейших распределенных сетей. Она\nсостояла из центрального компьютера, который сообщался с не­\nсколькими десятками периферийных по всей стране. Компьютеры\nсоединялись по модему с пропускной способностью более 300 бод.\nПрограммисты не делились на тех, кто работал над ПО для цен­\nтрального, а кто — для периферийных компьютеров. Все работали\nнад программным обеспечением для тех и других.\nУ центрального компьютера и периферийных были совершенно\nразные архитектуры. Один был такой же, как PDP-8, только его\nслово составляло 18 бит. У него было 256 килобайт оперативной\nпамяти, а данные загружались с кассеты с магнитной лентой. Дру­\nгой имел 8-битный микропроцессор 8085 с 32 килобайтами опера­\nтивной памяти и 32 килобайтами постоянной памяти.\nМы писали программы на ассемблере. Ассемблер для каждой из\nдвух машин значительно отличался, среды разработки также были", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Мы все работали над обеими машинами в равных условиях", "output": {"text": "Коллективное владение не означает того, что у вас не может быть\nспециализации. Поскольку системы становятся все сложнее, от\nспециализации никуда не уйти. Существуют системы, которые\nпросто нельзя понять как полностью, так и в мелочах.\nОднако даже если вы специализируетесь в чем-то, нужно уметь\nобобщать. Разделите работу между вашей специализацией и дру­\nгими областями кода. Поддерживайте умение работать не только\nв рамках специализации.\nКогда в команде применяется метод коллективного владения, зна­\nния распространяются среди всех участников команды. Все члены\nкоманды начинают лучше понимать границы между модулями\nи принципы работы системы в целом. Это существенно повышает\nспособность команды взаимодействовать и принимать решения.\nЗа свой достаточно долгий карьерный путь я видел, как некото­\nрые компании делали наоборот. У каждого программиста были\nсвои модули, и никто больше не имел права к ним прикасаться.\nТакие команды были чрезвычайно разлажены, в них царило непо­\nнимание, и все сваливали вину друг на друга. Работа над модулем\nпрекращалась, когда автор был не в офисе. Никто даже и не думал\nбраться за чужой участок работы.\nСекретные материалы\nКомпания X, производившая принтеры высокого класса, была од­\nним из таких печальных случаев. В 1990-х компания переходила от\nпреимущественно аппаратных решений к интеграции аппаратных\n\nКоллективное владение\n163\nи программных средств. Им пришло осознание, что можно значи­\nтельно сократить расходы на производство, если для управления\nоборудованием внутри компании применять программное обе­\nспечение.\nОднако привычка производить аппаратное обеспечение укорени­\nлась слишком глубоко, поэтому разделение труда при разработке\nПО осуществили с таким же подходом. При разработке аппарат­\nного обеспечения каждая команда занималась своим устройством:\nподатчик, принтер, стопоукладчик, сшиватель и так далее. ПО для\nустройств писали те же, кто занимался их производством. Одна ко­\nманда писала программы для податчиков, другая — для сшивателя,\nи так же и для других устройств.\nВ компании X политический вес работника зависел от устрой­\nства, над которым он работал. Поскольку X была компанией,\nвыпускающей принтеры, работа над ними была самой почетной.\nЧтобы работать над принтерами, инженерам приходилось про­\nдвигаться по службе. С теми, кто занимался сшивателями, никак\nне считались.\nЭта система политических рангов передалась командам, писавшим\nпрограммное обеспечение. Разработчики, писавшие код для стопо­\nукладчиков, были политически бессильны, но когда на собрании\nначинал говорить разработчик, работавший над принтером, все\nвнимательно его слушали. Из-за такого политического разделе­\nния никто не делился кодом. Ключом к политическому влиянию\nкоманды, занимавшейся принтерами, был код. Поэтому код, напи­\nсанный для принтеров, находился за семью замками. Никто, кроме\nчленов команды, не мог даже на него взглянуть.\nПроблем от этого было море. Во взаимодействии возникают оче­\nвидные трудности, если невозможно проверить используемый", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "НЕПРЕРЫВНАЯ ИНТЕГРАЦИЯ", "output": {"text": "В первые дни существования Agile метод «непрерывная инте­\nграция» означал, что разработчики отмечали изменения в своем\nисходном коде и объединяли их с основной веткой каждые «пару\nчасов»1. Все модульные и приемочные тесты проходили успешно.\nНе оставалось веток, которые бы не были объединены. Все не­\n1\t Beck  K. Extreme Programming Explained: Embrace Change. Boston,\nMassachusetts: Addison-Wesley, 2000. P. 97.\n\nНепрерывная интеграция\n165\nнужные при развертывании изменения отключались с помощью\nтумблера.\nВ 2000 году на одном из уроков на курсах XP Immersion один\nстудент угодил в классическую ловушку. Эти уроки были очень\nнасыщенны. Мы сократили циклы так, что итерации составляли\nвсего один день. Цикл непрерывной интеграции составлял лишь\nот четверти до получаса.\nОдин студент работал в команде из шести разработчиков, пятеро\nиз которых отмечали изменения чаще, чем он. Непонятно почему,\nон был без пары. И вышло так, что он не выполнял слияние кода\nболее часа.\nКогда он наконец решил отметить изменения и выполнить сли­\nяние кода, он увидел, что накопилось столько изменений, вне­\nсенных другими студентами, что ему пришлось хорошенько по­\nвозиться, чтобы объединить код. Пока он копался и выполнял\nслияние, остальные программисты продолжали отмечать из­\nменения каждые 15 минут. И когда он наконец разобрался и по­\nпробовал отметить изменения в своем коде, то увидел, что снова\nпопал впросак.\nОн так расстроился, что встал посреди кабинета и громко про­\nвозгласил: «Ваше экстремальное программирование — полная\nерунда!» После этого он вылетел из класса и направился в бар\nгостиницы.\nИ тут случилось невероятное. Программист, с которым он отка­\nзался работать в паре, пошел вслед, чтобы побеседовать с ним. Две\nпары других программистов перераспределили свою работу, завер­\nшили слияние и вернули проект в колею. Через полчаса студент\nпритих, вернулся в кабинет и, извинившись, продолжил работу,", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Впоследствии он стал ярым сто­ронником методологии гибкой разработки Agile.", "output": {"text": "Мораль: метод «непрерывная интеграция» работает только тогда,\nкогда интеграция действительно непрерывна.\nА вот и  непрерывная сборка\nВ 2001-м Thought Works значительно изменили положение дел.\nОни создали CruiseControl1, первое средство непрерывной сборки.\nЯ помню, как в 2001-м на XP Immersion Майк Ту2 читал ночную\nлекцию об этом. Не сохранилось записи этой лекции, но история\nбыла примерно таковой:\nCruiseControl позволяет сократить время отметки изменений\nдо нескольких минут. Даже самые мелкие изменения быстро\nвносятся в основную линию. CruiseControl отслеживает ра­\nботу систем управления версиями и создает сборку каждый\nраз, когда отмечено какое-либо изменение. При создании сборки\nCruiseControl запускает большинство автоматизированных те­\nстов, а затем отправляет электронные письма с итогами всем\nчленам команды.\n«Боб сломал сборку».\nМы ввели простое правило в отношении тех, кто ломал сборку.\nВ тот несчастный день, когда вас угораздило сломать сборку,\nвы должны надеть футболку с надписью «Я сломал сборку».\nКоторую никто никогда не стирал.\n1\t https://ru.wikipedia.org/wiki/CruiseControl.\n2\t http://wiki.c2.com/?MikeTwo.\n\nНепрерывная интеграция\n167\nС тех пор было создано много других средств непрерывной сборки.\nК ним относятся инструменты наподобие Jenkins (или Hudson?),\nBamboo и TeamCity. С помощью этих инструментов можно в наи­\nбольшей степени сократить время между слияниями. «Пара часов»,\nо которой изначально говорил Кент Бек, превратилась в «несколько\nминут». «Непрерывная интеграция» стала «непрерывной отметкой».\nДисциплина при непрерывной сборке\nПри непрерывной сборке ничего не должно ломаться. Потому что\nпрограммист, который не хочет надевать грязную футболку, как\nв случае с Майком Ту, проводит приемочное и модульное тестиро­\nвание до того, как отметить изменения в коде. Если сборка слома­\nлась (как так можно?), значит, случилось что-то очень странное.\nМайк Ту рассматривал в своей лекции и этот вопрос. Он рассказал\nо календаре, висевшем на видном месте на стене помещения, где\nработала команда. Календарь выбирали большой, чтобы каждый\nдень в году располагался в своей ячейке.\nЕсли сборка не удавалась хоть раз, то этот день отмечали крас­\nной точкой. Если сборка проходила успешно, этот день отмечали\nзеленой точкой. Такой простой визуализации было достаточно,\nчтобы в течение месяца или двух превратить календарь, состоящий\nв основном из красных точек, в календарь, состоящий в основном\nиз зеленых.\nВнимание!\nНапомню: при непрерывной сборке ничего не должно ломаться.\nСломанная сборка — это событие, означающее, что нужно макси­\nмальное внимание. Я хочу, чтобы заорали сирены. Я хочу видеть", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "СТЕНДАП-МИТИНГ -На протяжении многих лет было много путаницы в понятиях еже­дневный скрам и стендап-митинг", "output": {"text": "Позвольте мне разъяснить.\nВот вам правда о стендап-митингах: Такие встречи не обязательны. Многие команды прекрасно\nобходятся без них. Они могут проводиться реже, чем раз в день. Подберите график,\nкоторый считаете подходящим.\n\nСтендап-митинг\n169 Они должны занимать примерно 10 минут даже у больших\nкоманд. Встреча проводится по простому сценарию.\nСмысл этого мероприятия в том, что каждый член команды встает1\nв круг и отвечает на три вопроса:\n\n## Что мне нужно сделать?\n\n\nИ все. Никаких обсуждений. Никакого позерства. Никаких про­\nстранных объяснений. Никаких грустей и печалей. Никаких жалоб\nи обвинений кого угодно на свете.\nУ каждого есть полминуты на то, чтобы ответить на три вопроса.\nПотом встреча заканчивается, и все идут работать дальше. Все,\nаллес. Финита. Ферштейн?\nНаверное, еще лучше стендап-митинги описаны на «вики» Уорда:\nhttp://wiki.c2.com/?StandUp Meeting.\nКурицы и  свиньи?\nЕсли готовить омлет с ветчиной, то степень участия в нем двух\nживотных будет разной. Курица для омлета просто снесет яйцо,\nа вот свинье придется пожертвовать собой для ветчины полностью.\nСуть в том, что только разработчикам разрешается говорить на\nстендап-митинге. Руководство и иже с ними могут послушать, но\nникак не вмешиваться.\n1\t Потому они и называются стендап-митинги, то есть «стоя».", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Agile — это набор принципов, методов и дисциплин, которые по­могают небольшим командам разработчиков выполнять небольшие проекты", "output": {"text": "В этой главе приведены методы, которые помогают не­\nбольшим коллективам взаимодействовать как настоящие команды.\nОни помогают командам найти общий язык для взаимодействия,\nа также дают понимание того, чего ожидать членам команды от\nдругих в отношении друг друга и выполняемого проекта.\n\n5", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "РАЗРАБОТКА ЧЕРЕЗ ТЕСТИРОВАНИЕ", "output": {"text": "Разработка через тестирование — это сложная и глубокая тема\nдля обсуждения, и чтобы ее как следует раскрыть, понадобится\nцелая книга. В этой главе приведен лишь общий обзор, который\nбольше сосредоточен на обосновании и объяснении, чем на глубо­\nких технических сторонах метода. В частности, в этой главе вы не\nнайдете никакого кода.\nПрофессия программиста уникальна. Мы создаем огромные до­\nкументы, написанные загадочными техническими символами.\nКаждый символ такого документа должен быть правильным, иначе\nможет произойти что-то действительно страшное. Один неверный\nсимвол повлечет за собой потери больших средств или жизни. Раз­\nве есть другие такие профессии?\nБухгалтерский учет. Бухгалтеры также создают огромные до­\nкументы, исписанные загадочными техническими символами.\nКаждый символ такого документа должен быть правильным,\nв противном случае это может стоить потери больших средств\n\nРазработка через тестирование\n173\nили жизни. Как бухгалтеры проверяют, чтобы каждый символ\nбыл правильным?\nДвойная запись\nУ бухгалтеров есть инструмент, который появился еще тысячу\nлет назад. Это двойная запись1. Каждая операция, которую они\nпроводят, заносится в книгу дважды: один раз как кредит в ак­\nтивном счете и еще раз, в дополнение, как дебет в пассивном сче­\nте. Затем эти счета сводят в единый документ, балансовый отчет,\nгде из суммы финансовых активов вычитается сумма долговых\nобязательств и долей собственников. Бухгалтер должен выйти\nв ноль. Если в итоге получается не ноль, значит, где-то допущена\nошибка2.\nБухгалтеров учат вносить операции по одной за раз и каждый раз\nформировать баланс после проведения операции. Такой способ\nпозволяет им быстро выявлять ошибки. Они не делают проводок\nмежду сверкой баланса, поскольку так будет тяжелее найти ошиб­\nки. Этот метод, который называется методом двойной записи, на­\nстолько важен для правильного учета денежных средств, что стал\nмировым стандартом.\nРазработка через тестирование по сути то же самое, только для\nпрограммистов. Каждое необходимое изменение проходит двой­\nную проверку. Сначала под такое изменение пишут тест, затем\n1\t https://ru.wikipedia.org/wiki/Двойная_запись.\n2\t Если вы изучали бухгалтерское дело, то, скорее всего, кипите от возмуще­\nния. Да, это было грубым упрощением. С другой стороны, я описал раз­\nработку через тестирование упрощенно, одним абзацем. Программисты,\nнаверное, тоже возмутились.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Обе проверки дополняют друг друга, как активные и пассивные счета в бухгалтерском учете", "output": {"text": "После прохождения двойной проверки\nполучается нулевой результат — ноль тестов провалено.\nПрограммисты, изучающие разработку через тестирование, учатся\nвносить запись дважды — когда код не проходит специально на­\nписанный тест и еще раз, когда готовый код проходит тест. Такой\nспособ позволяет им быстро выявлять ошибки. Их учат избегать\nнаписания большого количества готового кода и запуска партии\nтестов, поскольку так тяжело найти ошибки.\nЭти две дисциплины, двойная запись в бухгалтерском учете и раз­\nработка через тестирование, схожи.\nИ то и другое служит одной цели — предотвращать ошибки в кри­\nтически важных документах, где каждый символ должен быть пра­\nвильным. Хотя программирование и стало неотъемлемой частью\nнашего общества, мы до сих пор не обязали проводить разработку\nчерез тестирование на законодательном уровне. Но учитывая то,\nскольких жизней и средств стоило плохо написанное ПО, может,\nтакой закон не за горами?\nТри правила разработки\nчерез  тестирование\nРазработку через тестирование можно описать тремя простыми\nправилами. Не пишите готовый код до того, как напишете тест, который не\nполучится пройти из-за нехватки этого кода.\n\nРазработка через тестирование\n175 Не пишите тестов больше, чем это необходимо для неудачи, —\nсбой при компиляции также считается неудачей. Не пишите готового кода больше, чем достаточно для прохож­\nдения теста, который был провален до этого.\nПрограммист с опытом чуть больше нескольких месяцев наверняка\nпосчитает эти правила странноватыми, если не сказать прямо, глу­\nпыми. Эти правила подразумевают, что цикл программирования\nдлится пять секунд. Программист начинает с написания тестового\nкода для готового кода, который пока что не написал. Тест не удается\nскомпилировать почти сразу, потому что есть упоминание частей го­\nтового кода, которые еще не существуют. Программист должен пере­\nстать писать тест и начать писать готовый код. Но после нескольких\nнажатий на клавиши тест, который не получалось скомпилировать,\nтеперь компилируется должным образом. Это заставляет програм­\nмиста вернуться к тесту и дописывать к нему новый код.\nТакое колебание между тестовым и готовым кодом составляет всего\nнесколько секунд, и программист ограничен в действиях в рам­\nках этого цикла. Программист никак не сможет написать целую\nфункцию, или даже простое выражение с оператором if, или цикл\nс while, не прерывая себя написанием дополняющего тестового кода.\nБольшинство программистов изначально рассматривают такой\nподход как нарушение их мыслительного процесса. Это постоянное\nпрерывание, вызванное нашими тремя правилами, не позволяет\nим должным образом думать во время написания кода. Им мешает\nощущение, что три правила разработки через тестирование застав­\nляют отвлекаться до невозможности часто.\nОднако представьте группу программистов, которые соблюдают\nэти три правила. Посмотрите на любого из них в любой момент", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Все, над чем программист работал, запустилось или про­шло соответствующие тесты меньше минуты назад", "output": {"text": "Неважно, на\nкого и когда вы посмотрите, у всех все работало меньше минуты\nназад.\nОтладка\nЧто было бы, если бы минуту назад все всегда работало? Как долго\nпришлось бы выполнять отладку? Если минуту назад все работало,\nто почти каждый сбой, с которым вы столкнетесь, произошел не\nбольше минуты назад. Отладка сбоя, который появился только\nчто, зачастую пустяк. И в самом деле использовать отладчик для\nпоиска проблемы, наверное, чересчур.\nВы ловко управляетесь с отладчиком? Помните его горячие клави­\nши? Ваша мышечная память позволяет непроизвольно нажимать\nэти клавиши так, чтобы вводить точки останова, входить в режимы:\nпошаговый, шаг с заходом в процедуры, шаг с обходом процедур?\nПри отладке вы чувствуете себя в своей тарелке? Это не тот на­\nвык, который желают получить.\nЕдинственный способ научиться хорошо пользоваться отладчи­\nком — это проводить много времени за отладкой. А если за отлад­\nкой проводится много времени, значит, часто попадаются ошибки.\nТе, кто практикует разработку через тестирование, плохо умеют\nпользоваться отладчиками просто в силу их редкого использова­\nния. А если пришлось-таки воспользоваться отладчиком, это, как\nправило, не отнимает у них много времени.\nЯ хочу сказать, что не даю ложных надежд. Даже лучшие про­\nграммисты, пользующиеся этим методом, натыкаются на ошибки.\nЭто все-таки разработка, куда без них. Но частота и тяжесть таких\n\nРазработка через тестирование\n177\nошибок значительно снижается, если соблюдать три правила раз­\nработки через тестирование.\nДокументация\nВам хоть раз доводилось интегрировать сторонний пакет? Ско­\nрее всего, он пришел в zip-архиве, в котором были исходники,\nбиблиотеки, Java-архивы и тому подобное. Скорее всего, в архиве\nбыл и документ PDF, в котором содержались инструкции по ин­\nтеграции. А в конце PDF, наверное, было уродливое приложение\nс примерами всего кода.\nЧто вы прочли первым делом, как открыли этот документ? Если\nвы программист, то промотали в самый низ и прочитали примеры\nкода, потому что в этом коде вся правда.\nПри соблюдении трех правил разработки через тестирование на­\nписанные вами тесты становятся примерами кода для всей про­\nграммы. Если нужно узнать, как вызвать функцию API, есть тесты,\nкоторые вызывают эту функцию всевозможными способами, с уче­\nтом каждого возможного исключения. Если вы желаете узнать, как\nсоздать объект, есть тесты, которые создают нужный объект всеми\nспособами, которыми он может быть создан.\nТесты — это один из видов документации, которая описывает те­\nстируемую программу.\nТакая документация написана на языке, который программисты\nотлично знают. Он совершенно недвусмыслен, настолько форма­\nлен, что исполняем и не может не синхронизироваться с кодом\nприложения. Тесты являются отличной документацией для про­\nграммистов, потому что представляют собой код.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Более того, тесты не образуют системы сами по себе. Они знать незнают друг о друге.", "output": {"text": "Между ними нет никаких зависимостей. Каж­\nдый тест — это небольшой и независимый модуль кода, который\nописывает поведение только маленькой части всей системы.\nРадость\nЕсли вы хоть раз писали тесты после того, как работа выполнена,\nто согласитесь, что развлечение это так себе. Вообще не прикольно,\nпотому что вы уже знаете, что код работает. Вы уже вручную его\nпротестировали. Скорее всего, вы пишете эти тесты лишь потому,\nчто вам так сказали. Чувствуете себя загруженным рутиной. Скучно.\nКогда вы пишете тесты согласно трем правилам разработки через\nтестирование, это клево. Каждый новый тест — это вызов. Каждое\nуспешное прохождение теста — это маленький праздник. Когда\nвы следуете трем правилам, ваша работа представляется чередой\nмаленьких вызовов и праздников. Нет чувства неблагодарной ра­\nботы, вместо этого вы понимаете, что даете жизнь чему-то новому.\nПолнота\nНо вернемся к тестам, которые выполняют после того, как все уже\nготово. Кто-то зачем-то обязал вас написать эти тесты, причем\nвы уже протестировали все вручную и знаете, что все работает.\nВы переходите от теста к тесту, не удивляясь тому, что программа\nспокойно проходит тесты.\nНеизбежно вы дойдете до теста, который будет трудно написать.\nЕго трудно написать, потому что во время написания кода вы забы­\nли о тестируемости, а структура кода такова, что его просто так не\nпротестируешь. Чтобы написать тест к этому коду, надо поменять\n\nРазработка через тестирование\n179\nструктуру кода. Придется разорвать некоторые связи, добавить\nнесколько абстракций, а может, и перенаправить некоторые вы­\nзовы функций и аргументы. Кажется, что переделана гора работы,\nпотому что вы и так знаете, что код работает.\nУ вас плотный график, и есть работа поважнее. Поэтому вы от­\nкладываете тест. Вы убеждаете себя, что в нем нет необходимости\nи написать его можно попозже. И вот теперь у вас пробел в тесто­\nвом наборе.\nИ поскольку вы оставляли пробелы в тестовом наборе, вы подо­\nзреваете, что все остальные тоже так делают. Когда вы запускаете\nтестовый набор и видите, что он пройден успешно, вы покрякивае­\nте, ухмыляетесь или насмешливо отмахиваетесь, потому что знаете:\nпрохождение тестов не означает, что программа работает.\nКогда программа проходит такой набор тестов, нельзя принять\nрешение. Все сведения, которые мы получаем от прохождения\nтестов,..  — это то, что работает все, что тестировалось.\nНеполнота тестов оставляет вас без вариантов. Но если вы будете\nследовать тем самым трем правилам, каждая строка кода будет на­\nписана так, что тест будет пройден. Таким образом, тестовый набор\nстанет полным. Когда программа проходит набор тестов, можно\nпринять решение. Решение о развертывании.\nВот это цель! Мы хотим создать набор автоматизированных тестов,\nкоторый даст уверенность, что развертывание программного обес­\nпечения безопасно.\nИ снова хочу сказать, я не пишу вам тут картину маслом. Соблюде­\nние трех правил позволит создать полный тестовый набор, но и тут\nнельзя быть на 100 % уверенным. Есть ситуации, когда три правила", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "ВНИМАНИЕ - Полнота тестов — это показатели для команды, а не для руковод­ства. ", "output": {"text": "Менеджеры вряд ли знают, что на самом деле означают\nэти показатели. Менеджеры не должны ставить эти показатели\nсвоей целью. Команда должна применять их исключительно\nв целях сообщения сведений о стратегии тестирования.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "ЕЩЕ РАЗ ВНИМАНИЕ - Не завалите сборку на основании недостаточного прохождения тестов. ", "output": {"text": "Если вы поступите так, программисты будут вынуждены\nизбавиться от достаточного количества операторов подтверж­\nдения отсутствия ошибок, чтобы получить достаточно высокий\nпроцент выполнения. Полнота прохождения тестов — сложная\nтема, которую можно понять только в контексте глубокого зна­\nния работы кода и тестов. Не позволяйте делать ее метрикой\nдля менеджеров.\n\nРазработка через тестирование\n181\nПроектирование\nПомните ту функцию, которую было трудно протестировать, а код\nуже до этого тестировали вручную? Может, ее трудно протести­\nровать потому, что она связана с задачами, которые вы не хотите\nзапускать в тесте? Например, это может быть включение рентге­\nновского аппарата или удаление рядов из базы данных. Функцию\nтяжело протестировать, потому что она спроектирована не так,\nчтобы это можно было сделать легко. Вы сначала пишете код,\nа потом пишете тесты задним числом. Тестируемость конструкции\nбыла тем, о чем вы думали в последнюю очередь, когда писали код.\nТеперь вы столкнулись с тем, что для прохождения теста нужно\nперепроектировать код. Вы смотрите на часы и понимаете, что те­\nстирование длится слишком долго. Поскольку вы уже тестировали\nвсе вручную и знаете, что все работает, то просто уходите прочь,\nоставляя еще один пробел в тестовом наборе. А вот когда вы снача­\nла пишете тест, то все происходит совершенно иначе. У вас просто\nне получится написать функцию, которую трудно протестировать.\nПоскольку вы сначала пишете тест, то естественным образом про­\nектируете функцию так, чтобы ее легко было протестировать. Как\nписать функции так, чтобы они были легко тестируемы? Нужно\nубрать связи между ними. Тестируемость означает свободу от\nсвязей.\nКогда вы сначала пишете тесты, то размыкаете связи внутри про­\nграммы таким способом, о котором бы никогда даже не подумали.\nПрограмма будет тестируема целиком, то есть связи между функ­\nциями всей программы будут отсутствовать.\nИменно по этой причине разработку через тестирование часто\nназывают методом проектирования. Три правила в высшей мере\nспособствуют уменьшению связанности.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Смелость Пока мы видели, что если следовать трем правилам разработкичерез тестирование, то у нас появляется много преимуществ: ", "output": {"text": "мень­ше отладки, качественная низкоуровневая документация, радость\nи разделение связей. Но это лишь сопутствующие преимущества,\nни одно из них не является главной причиной применения разра­\nботки через тестирование. Настоящая причина — это воспитание\nсмелости.\nЯ уже рассказывал историю в самом начале книги, но стоит ее по­\nвторить.\nПредставьте, что вы смотрите на некий уже написанный код на\nэкране. Там бардак. Первая мысль, которая приходит в голову:\n«Нужно почистить его». Но следующая мысль будет примерно\nтакой: «Нет, я в это не полезу!» Вы думаете, что если влезть в код,\nто он перестанет работать. А если он перестанет работать, вина\nваша. Поэтому вы отстраняетесь от кода подальше, оставляя его\nгнить и чахнуть.\nВ вас говорит страх. Вы боитесь кода. Боитесь что-либо делать\nс ним. Боитесь что-то сломать, потому что будут последствия.\nТак вы отказываетесь от того единственного, что может улучшить\nкод, — от его чистки.\nЕсли в команде каждый придерживается такого поведения, код бу­\nдет портиться. Никто не возьмется его почистить. Никто не улуч­\nшит его. Каждая новая функция будет добавлена таким образом,\nчтобы свести на нет непосредственный риск для программистов.\nБудут добавлены связи и дубликаты, потому что они уменьшают\nнепосредственный риск, даже если нарушают структуру и целост­\nность кода.\n\nРазработка через тестирование\n183\nВ конце концов код становится чудовищно запутанным, как спа­\nгетти, его невозможно сопровождать, работа над таким кодом едва\nли будет продвигаться. Сложность задач будет расти в геометриче­\nской прогрессии. Менеджеры в отчаянии. Они будут нанимать все\nбольше программистов в надежде улучшить производительность,\nно улучшение не будет достигнуто.\nНаконец, достигнув критической точки, руководство согласится\nна требование программистов переписать всю программу с самого\nначала. И начинается то же самое.\nПредставьте себе другой сценарий. Вернемся к монитору, на кото­\nром мы видим запутанный код. Первая мысль, которая вас посеща­\nет, — надо почистить код. Что, если бы у вас был настолько полный\nтестовый набор, что ему можно полностью доверять? А если этот\nтестовый набор работал бы быстро? Что бы вы подумали следую­\nщим делом? Наверное, что-то вроде этого:\nБоже, думаю, просто надо поменять имя этой переменной.\nО, код все еще проходит тесты. Ладно, а теперь я разделю ту\nбольшую функцию на две поменьше… Здорово, все еще удается\nпройти… Хорошо, теперь, думаю, можно перенести одну из этих\nновых функций в другой класс. Опа! Тест не пройден. Так, ну-ка,\nвернем все… А, я понял, надо было переместить и саму перемен­\nную. Да, тест снова пройден…\nКогда у вас есть полный набор тестов, вы больше не боитесь\nвносить изменения в код. Вы больше не боитесь его чистить. Вы\nпросто возьмете и почистите код. Код будет опрятным и чистым.\nСтруктура программы останется неизменной. Вы не будете пло­\nдить массу гниющего спагетти, которая вгонит команду в уныние,\nприводящее к низкой производительности и, в конце концов,\nк провалу.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Поэтому мы применяем разработку через тестирование.", "output": {"text": " Мы при­меняем этот метод, потому что он вселяет в нас смелость поддер­\nживать код в чистоте и порядке. Смелость вести себя профессио­\nнально.\nРефакторинг\nРефакторинг — еще одна тема, достойная целой книги. К счастью,\nее уже написал Мартин Фаулер1. В этой главе мы просто обсудим\nэто тему, не углубляясь в отдельные методы. И как и прежде, в этой\nглаве нет кода.\nРефакторинг — это метод улучшения структуры кода без изме­\nнения его поведения, определенного тестами. Другими словами,\nмы вносим изменения в имена, классы, функции и выражения, не\nпроваливая никаких тестов. Мы улучшаем структуру программы\nбез воздействия на ее выполнение.\nКонечно же, эта дисциплина тесно связана с разработкой через\nтестирование. Чтобы без опасений перепроектировать код, нужен\nтестовый набор, который с высокой степенью вероятности укажет\nнам на то, что мы ничего не испортим.\nИзменения, выполненные во время рефакторинга, разнятся от\nпростых косметических до глубокой правки структуры. Такие из­\nменения могут представлять собой просто изменения в названиях\nили сложную замену операторов switch на полиморфные отправ­\nки. Большие функции будут разбиты на те, что поменьше, с более\nудачными названиями. Списки аргументов будут изменены на\n1\t Fowler M. Refactoring: Improving the Design of Existing Code. 2nd ed. Boston,\nMassachusetts: Addison-Wesley, 2019.\n\nРазработка через тестирование\n185\nобъекты. Классы с большим количеством методов будут разделе­\nны на множество мелких классов. Функции будут перемещены из\nодного класса в другой. Из классов будут выделены подклассы или\nвнутренние классы. Зависимости будут инвертированы, а модули\nперемещены через границы архитектуры.\nИ пока все это происходит, наша программа непременно проходит\nтесты.\nКрасный/зеленый/рефакторинг\nХод рефакторинга естественным образом связан с тремя правила­\nми разработки через тестирование приемом «красный/зеленый/\nрефакторинг» (рис. 5.1).\nРефакторинг\nКрасный\nЗеленый\nРис. 5.1. Цикл «красный/зеленый/рефакторинг»\n\n## Далее возвращаемся к шагу 1.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "ПРОСТОТА ПРОЕКТИРОВАНИЯ", "output": {"text": "Метод «простота проектирования» — одна из целей рефакторинга.\nПростота проектирования — метод, предполагающий написание\nтолько необходимого кода, чтобы сохранять простоту структуры,\nего небольшой размер и наибольшую выразительность.\nПравила простого проектирования Кента Бека.\n\n## Сократить количество элементов.\n\n\nНомера пунктов означают порядок действий, в котором эти пра­\nвила выполняются, и их приоритет.\nПункт 1 говорит сам за себя. Код должен пройти все тесты. Он\nдолжен работать.\nВ пункте 2 указано, что после того как код заработал, ему нужно\nпридать выразительность. Он должен явно отражать намерения\nпрограммиста. Код нужно писать так, чтобы он легко читался\nи содержал достаточно сведений. Как раз сейчас мы проводим кос­\nметический рефакторинг кода, в течение которого вносим много\nпростых изменений. Нужно также разделить большие функции на\nмелкие, дав им более простые и понятные названия.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "ПАРНОЕ ПРОГРАММИРОВАНИЕ", "output": {"text": "Метод парного программирования за годы своего существования\nоброс противоречиями и кривотолками. Многие отрицательно\nвоспринимают мысль о том, что два (и больше) человека могут\nплодотворно работать над одной и той же задачей.\nВо-первых, работа в паре не обязательна. Никого нельзя к ней\nпринуждать. Во-вторых, работа в паре не обязательно постоянна.\nСуществует много веских причин, почему иногда лучше писать\nкод в одиночестве. Желательно, чтобы доля программистов, ра­\nботающих в паре, в команде была 50 % или около того. Но это не\nтак важно. Она может быть лишь 30 %, а может и все 80 %. Право\nвыбора принадлежит членам команды.\nЧто такое парное программирование?\nПарное программирование — это совместная работа двух програм­\nмистов над одной задачей. Напарники могут работать на одной ма­", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Или они могут работать на двух машинах по сети, пока могут видеть один и тот же код и обращаться с ним", "output": {"text": "Последнее прекрасно можно осуществить\nс помощью систем доступа к рабочему столу. Такое ПО позволяет\nнапарникам находиться далеко друг от друга, если у них хорошая\nпропускная способность и голосовая связь.\nПрограммисты, работающие в паре, выполняют разную работу.\nОдин будто водитель, а другой — штурман. У водителя в руках\nинструменты — клавиатура и мышь. Штурман же внимательно\nвсматривается в монитор и дает советы. Другой вариант: один\nпрограммист пишет тест, а второй добивается его прохождения,\nпосле чего пишет ответный тест первому программисту. Иногда\nэтот метод называют «пинг-понг».\nНо чаще всего никакого разделения нет. Программисты просто си­\nдят за одной машиной и занимаются одним и тем же и по очереди\nиспользуют клавиатуру и мышь.\nПары не назначаются. Они выбирают друг друга в зависимо­\nсти от желания совместной работы над одной задачей. Менед­\nжеры не должны вмешиваться со своими расписаниями или\nматрицами.\nЧаще всего напарники быстро меняют партнера. Сессия парного\nпрограммирования может длиться день, но чаще всего они длятся\nот силы час-два. Даже работа в паре в течение лишь четверти-полу­\nчаса может принести пользу.\nИстории не распределяются по парам. За истории отвечают от­\nдельные программисты, а не оба напарника. Продолжительность\nвыполнения истории длится, как правило, гораздо дольше, чем\nработа с одним напарником.\n\nПарное программирование\n191\nВ неделю каждый программист будет тратить около половины\nсвоего времени на выполнение своих собственных задач, привлекая\nк помощи некоторых других программистов. Оставшуюся полови­\nну времени, проводимого в паре, он потратит на помощь другим\nпрограммистам с их заданиями.\nОпытным программистам следует стараться как можно чаще рабо­\nтать в паре с младшими. Младшим программистам нужно просить\nпомощи чаще у опытных, чем у других младших. Программисты\nсо специализацией должны тратить значительное количество\nвремени, работая в паре с программистами над задачами вне своей\nспециализации. Цель состоит в том, чтобы распространять знания\nи обмениваться ими, а не накапливать их в одиночку.\nЗачем работать в  паре?\nРаботая в паре, мы укрепляем командный дух. Члены команды не\nизолируются друг от друга, а ежесекундно сотрудничают. Когда\nчлен команды не может работать, другие закрывают образовав­\nшуюся брешь и двигаются к цели.\nРабота в паре — однозначно лучший способ обмениваться зна­\nниями в команде и избегать сокрытия информации отдельными\nчленами. Это лучший способ организовать команду так, чтобы\nв ней не было незаменимых сотрудников.\nМногие команды сообщали, что парное программирование сокра­\nщает количество ошибок и улучшает качество проектирования.\nЭто верно в большинстве случаев. Как правило, во время работы\nнад задачей лучше, если на нее смотрит не одна пара глаз. Дей­\nствительно, во многих командах перешли от разбора кода к работе\nв парах.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Парное программирование как  анализ  кода Парное программирование представляет собой вид анализа кода(Code Review), ", "output": {"text": " но имеет значительное преимущество. Работая\nв паре, программисты пишут код в соавторстве. Они видят уже\nнаписанный код и, как само собой разумеющееся, проводят его\nанализ с целью создания нового кода. Таким образом анализ кода —\nэто не просто статическая проверка, которая проводится, чтобы\nубедиться в том, что код соответствует нормам, принятым в ко­\nманде. Скорее это динамический обзор текущего состояния кода\nс прицелом на то, каким код должен быть в ближайшем будущем.\nА каковы издержки?\nСложно измерить издержки, возникающие при парном программи­\nровании. Прямая издержка — это то, что над одной задачей работа­\nет два человека. Очевидно, что на решение задачи не затрачивается\nдвойного усилия, но, вероятно, какие-то издержки все же есть.\nВ разных исследованиях установлено, что издержки составляют\nпримерно 15 %. Другими словами, потребуется 115 программистов,\nработающих в паре, чтобы выполнить работу 100 программистов,\nработающих индивидуально (без анализа кода).\nЕсли считать упрощенно, получается, что в команде, где в паре\nработают половину от всего времени, потери в производительно­\nсти составят менее 8 %. С другой стороны, работа в паре снимает\nнеобходимость анализа кода, и тогда нет никакой потери произ­\nводительности.\nЗатем рассмотрим преимущества — обмен знаниями, взаимное\n­обу­чение и глубокое взаимодействие. Эти преимущества невоз­\nможно просчитать, но они также весьма важны.\n\nПарное программирование\n193\nПо моему опыту и опыту многих других, программирование в паре,\nесли оно происходит непринужденно и по желанию самих програм­\nмистов, приносит довольно много пользы всей команде.\nТолько два?\nСлово «пара» подразумевает, что в сессии парного программи­\nрования работают только два программиста. Хотя чаще всего это\nтак, это не строгое правило. Иногда для решения задачи может\nсобраться группа из трех, четырех или большего количества про­\nграммистов (опять же на усмотрение программистов). Это явление\nиногда называют «совместное программирование»1.\nМенеджеры\nПрограммисты часто опасаются, что менеджеры не одобрят работу\nв парах или даже потребуют разойтись и не заниматься ерундой,\nчтобы не тратить драгоценное время. Я с таким не встречался. За\nвсе полвека, что я занимаюсь написанием кода, я никогда не видел,\nчтобы менеджеры вмешивались. В большинстве случаев, по моему\nопыту, они только рады видеть, что программисты сотрудничают,\nработая вместе. Это создает впечатление, что работа кипит.\nЕсли же вы менеджер, который хочет разогнать программистов,\nработающих в паре, опасаясь, что такая работа неэффективна,\nто отбросьте свои опасения и дайте программистам возможность\nрешить самим. В конце концов, они профессионалы. А если вы\nпрограммист и ваш менеджер требует прекратить работу в паре,\n1\t https://en.wikipedia.org/wiki/Mob_programming, https://mobprogramming.org/mob-\nprogramming-basics/.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "ЗАКЛЮЧЕНИЕ", "output": {"text": "Agile — наиболее важная составляющая всей методологии. Любая попытка применить Agile без технических\nметодов обречена на провал. Причина проста: Agile — действенный\nмеханизм при работе в большой спешке, образующей большой бес­\nпорядок. Без использования технических методов, позволяющих\nподдерживать высокий уровень качества кода, команда начнет\nстремительно и неумолимо утопать в бесконечной пучине низкой\nпроизводительности.\n\n6", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "ЦЕННОСТИ AGILE", "output": {"text": "Еще давно Кент Бек сформулировал четыре ценности Agile. Это\nсмелость, взаимодействие, обратная связь и простота.\nСмелость\nПервая из ценностей — это смелость, или, по-другому, разумная\nстепень принятия рисков. Члены команды, работающей по Agile,\nв первую очередь сосредоточены на качестве и возможностях, а не\nна каких-то политических мотивах. Они понимают, что лучший\nспособ вести проект по разработке ПО в течение долгого срока —\nпроявлять некоторую напористость.\nЕсть разница между смелостью и безрассудством. Чтобы раз­\nвернуть наименее достаточный набор функций, нужна смелость.\nСмелость нужна и для того, чтобы поддерживать высокое качество\nкода и добросовестно применять методы. При этом безрассудно\nразвертывать программу с неустойчивой структурой или такую,\nв качестве которой вы не до конца уверены. Безрассудно идти\nв ногу с графиком, принося в жертву качество.\n\nЦенности Agile\n197\nВерить в то, что качество и дисциплина повышают скорость —\nсмело, поскольку это убеждение будут постоянно оспаривать вли­\nятельные, но наивные спешащие коллеги.\nВзаимодействие\nМы ценим прямое и частое взаимодействие, которое воздвигает\nмосты между людьми. Члены Agile-команды хотят общения друг\nс другом. Программисты, клиенты, тестировщики и руководители\nне против находиться рядом друг с другом, часто общаться, и не\nтолько на встречах. Не только через электронную почту, сообще­\nния и заметки. Они ценят личные непринужденные разговоры\nтет-а-тет.\nТак команда становится сплоченной. Это происходит в быстром\nхаотичном потоке легкого и частого взаимодействия. Рождается\nогненная буря, несущая озарение, зажигающая лампочки в голо­\nвах людей. Когда вся команда в сборе, а ее члены находятся рядом\nи постоянно общаются, то происходят чудеса.\nОбратная связь\nМетоды Agile, которые мы изучили, все как один направлены на\nотдачу быстрой обратной связи ребятам, принимающим важные\nрешения. Игра в планирование, рефакторинг кода, разработка через\nтестирование, непрерывная интеграция, небольшие и частые рели­\nзы, коллективное владение, одна команда и другие методы повыша­\nют частоту обратной связи и количество передаваемых сведений.\nОни позволяют нам своевременно понять, что что-то идет не так,\nчтобы внести исправления. Они дают важные уроки того, что все", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "МЕТОДОЛОГИЧЕСКИЙ БЕСТИАРИЙ", "output": {"text": "В огромном количестве существующих методик Agile легко запу­\nтаться. Я понимаю, что их тьма-тьмущая, но не обращайте на это\nвнимания. В конце концов, независимо от того, на какие методики\nпадет ваш выбор, вы будете подстраивать и отлаживать модель\nразработки под свои нужды. Таким образом, начни вы с экстре­\nмального программирования, Scrum или других 5328 методик,\nотносящихся к Agile, вы придете к одному и тому же.\nНастоятельный совет, который я могу вам дать, — это полностью\nперенять жизненный цикл, главным образом, .\nОгромное количество команд переняли лишь внешнее кольцо,\nопределяющее взаимоотношения с клиентами, и угодили в ловуш­\nку, которую Мартин Фаулер назвал «дряблый Scrum»1. Признаки\nэтой болезни: производительность медленно падает с высокого\nуровня в начале проекта до крайне низкого, когда проект подходит\nк концу. Причиной такой потери в производительности является\nискажение и ухудшение качества самого кода.\nОказывается, что , предлага­\nемые Agile, — очень действенный способ создать огромный беспо­\nрядок. Кроме того, если вы не позаботитесь о чистоте структуры,\nкоторую выстраиваете, беспорядок будет замедлять ход работ.\nИтак, выбирайте одну из методик или вообще не выбирайте. Убе­\nдитесь, что вы учитываете все дисциплины жизненного цикла.\nСогласуйте с командой. И вперед. Помните, что смелость, взаи­\nмодействие, обратная связь и простота позволяют с постоянством\nотлаживать дисциплины и методы. Не просите разрешений. Не\n1\t https://martinfowler.com/bliki/FlaccidScrum.html.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "ПРЕОБРАЗОВАНИЕ", "output": {"text": "Переход от других методологий и моделей к Agile ведет к изме­\nнению ценностей. Ценности при использовании Agile включают\nв себя принятие рисков, быструю обратную связь, а также глубокое\nи многостороннее взаимодействие между членами коллектива,\nкоторое стирает границы внутри команды, в том числе между\nначальниками и подчиненными. Они также нацелены на ясное\nи честное поведение, а не распределение ролей и поиски крайнего.\nЭти ценности прямо противоположны ценностям крупных органи­\nзаций, которые вкладывают значительные средства в менеджеров\nсреднего звена, ценности которых — безопасность, преемствен­\nность, административное управление и выполнение плана.\nРазве возможно перевести такую организацию на Agile? Честно\nговоря, это не то, в чем я достигал больших успехов, у других я по­\nдобных успехов также не наблюдал. Я видел, как затрачивалось\nмного усилий и средств, но чтобы организация действительно\nосуществила переход, я видел редко. Уклад ценностей слишком\nотличается от тех, которых придерживаются менеджеры среднего\nзвена, чтобы их принять.\nТо, что я видел, — это переход команд и отдельных специалистов,\nпотому что команды и одиночные программисты часто следуют\nценностям, которыми руководствуется Agile.\nКак ни странно, руководители тоже часто разделяют ценности,\nприсущие Agile, например: принятие рисков, ясность и взаимо­\n\nПреобразование\n201\nдействие. В том числе по этой причине они пытаются осуществить\nпереход в своих организациях.\nДело как раз в менеджерах среднего звена. Этих ребят взяли на\nработу не для того, чтобы принимать риски или вносить ясность,\nно для того, чтобы передавать ответственность при минимальном\nвзаимодействии. Эта проблема остро стоит во многих компаниях.\nРуководство и работники в организациях разделяют мировоззре­\nние, свойственное Agile, но среднее звено мыслит наоборот. Я ни\nразу не видел, чтобы менеджеры среднего звена стояли в основе\nизменений. И вправду, с чего бы? Сопротивление таким измене­\nниям — это их работа.\nЧтобы донести свою мысль, расскажу вам несколько историй.\nСаботаж\nЕще тогда, в 2000 году, я участвовал в переходе одной организации\nна Agile. Мы заручились поддержкой начальства и программистов.\nПереход сулил большие надежды. Возникли сложности с техниче­\nскими руководителями и архитекторами. Эти ребята, неправильно\nоценив положение дел, подумали, что их значимостью стали пре­\nнебрегать.\nЗначимость архитекторов, технических руководителей проектов\nи многих других в команде, работающей по Agile, отличается, но\nникак не преуменьшена. К сожалению, ребята не понимали этого,\nвозможно, и по нашей вине. Может, мы не донесли до них то, на­\nсколько они были значимы для команды, или они просто не хотели\nучиться новым навыкам, которые бы им пригодились.\nКак бы то ни было, они тайком строили план саботажа, чтобы не\nдопустить перехода на Agile. Не буду вдаваться в подробности", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Только скажу, что как-то раз их застукали за этим и немедленно выперли с работы", "output": {"text": "Мне бы очень хотелось сказать вам о том, что после этого переход на Agile стал продвигаться семимильными шагами и закончился\nбольшим успехом. Но, увы, не могу.\nВолчонок\nУ нас отлично получилось перевести на Agile одно из подразделе­\nний компании куда крупнее. Оно переняло опыт экстремального\nпрограммирования и проделало за эти годы такую работу, что\nудостоилось статьи в журнале Computer world. Собственно, за этот\nуспех вице-президент по инженерно-техническому обеспечению,\nруководивший этим переходом, получил повышение.\nЕго заменил новый вице-президент. И, подобно возмужавшему\nволчонку, которому посчастливилось возглавить стаю, он занялся\nтем, что уничтожил все наследие своего предшественника. Это\nкоснулось и Agile. Он полностью отказался от него и вернул коман­\nде старую модель разработки, которая отличалась не в лучшую\nсторону.\nЭто привело к тому, что многие члены команды стали искать новое\nместо работы, чего, я полагаю, и добивался новый вице-президент.\nПлакса\nПоследнюю историю мне рассказали. Я не присутствовал в самый\nважный момент. Мне рассказали мои сотрудники, работавшие в то\nвремя.\n\nПреобразование\n203\nВ 2003 году моя компания переводила на Agile одну известную\nброкерскую фирму. Все шло замечательно. Велась подготовка\nруководителей высшего и среднего звена, а также разработчиков.\nОни готовились вместе. Ничего не предвещало беды.\nПотом пришла пора подвести итоги. Руководство и разработчики\nсобрались в большой аудитории. Целью было оценить ход и успеш­\nность перехода на Agile. Начальство задало вопрос: «Как обстоят\nдела?»\nС разных сторон послышались ответы: «Все отлично!»\nПотом повисло гробовое молчание, которое резко прервалось\nвсхлипами, доносящимися сзади. Кто-то заплакал. И тогда эмоцио­\nнальный подъем обрушился, и аудитория погрузилась в уныние.\nВдохновения как не бывало. «Это так сложно, — донеслось до со­\nбравшихся.  — Мы это просто не тянем».\nПосле этого начальство свернуло переход.\nМораль\nМораль всех этих историй: ожидайте любых странностей.\nПритворяйтесь\nМожет ли команда, применяющая Agile, работать в организации,\nгде есть сильное среднее звено, которое против этой методоло­\nгии? Я видел, как время от времени это происходило. Некото­\nрые команды разработчиков спокойно руководствуются Agile\nво время выполнения своей работы и в то же время выполняют\nстрогие условия, навязанные менеджерами среднего звена. По­", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "куда менеджеры среднего звена довольны соблюдением правил и нормативов, ", "output": {"text": "они оставляют разработчиков в покое, не вмеши­\nваясь в их работу.\nЭто как раз то, о чем говорили Буч и Парнас: «Притворяйтесь!»1\nКоманда работает по Agile, не объявляя об этом, и в то же время де­\nлает все для того, чтобы менеджеры среднего звена оставались до­\nвольными. Вместо того чтобы бороться с ветряными мельницами,\nтакие команды используют Agile на низком уровне, преподнося его\nтак, что для менеджеров среднего звена он выглядит безопасным\nи совместимым с их ценностями.\nНапример, менеджеры хотят получить документ об анализе, про­\nведенном на ранней стадии проекта. Команда, применяющая Agile,\nпишет большое количество первичного кода программы по всем\nканонам Agile, затем выпускает документ об анализе, запланировав\nчереду историй по производству документации. Менеджеры полу­\nчают необходимый им документ.\nВ этом есть смысл, поскольку первые несколько итераций написа­\nния кода в значительной мере ориентированы на анализ требова­\nний. То, что анализ выполнен благодаря непосредственно написа­\nнию самого кода, менеджерам среднего звена знать необязательно.\nИх не должно это волновать.\nК сожалению, мне доводилось видеть компании, где такой дурдом,\nчто если, не дай бог, среднее звено учует, что «что-то не так», оно\nприбегнет к различным уловкам, чтобы от Agile не осталось и сле­\nда. Это позор, потому что такие команды в действительности дают\nменеджерам все необходимое.\n1\t Booch G. Object-Oriented Analysis and Design with Applications. 2nd ed.\nReading, Massachusetts: Addison-Wesley, 1994. Pp. 233–234.\n\nПреобразование\n205\nУспех в  небольших организациях\nЯ видел, как некоторые средние по размеру компании перехо­\nдили на Agile. В таких компаниях тонкая прослойка менедже­\nров среднего звена — это сотрудники, которые получили свои\nдолжности, поднимаясь с низов. У них сохранился образ мыш­\nления людей, готовых к прямому взаимодействию и принятию\nрисков.\nТо, что мелкие компании полностью переходят на Agile, отнюдь не\nредкость. Там нет менеджеров среднего звена, а ценности боссов\nи разработчиков совпадают.\nУспешный переход\nотдельных  специалистов\nНаконец, в некоторых компаниях ценности Agile перенимают\nтолько отдельные сотрудники. Те, кто переходит на Agile индиви­\nдуально, чувствуют себя некомфортно в компании или команде,\nкоторые не собираются этого делать. Разница в ценностях обычно\nприводит к некоторому разделению. В лучшем случае люди, ко­\nторые осуществляют переход, объединятся, чтобы сформировать\nновые гибкие команды, которым удастся скрыться от менеджеров\nсреднего звена. Если это не получается, они, скорее всего, будут\nискать (и найдут ведь!) работу в другой компании, которая раз­\nделяет их ценности.\nЗа последние двадцать лет мы видели, как в отрасли меняются цен­\nности. Образуются новые компании, которые принимают ценности\nAgile, и программисты, которые хотят работать по методологии\nAgile, группируются в таких компаниях.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "КОУЧИНГ", "output": {"text": "Нужен ли команде, работающей по Agile, коуч? Вообще — нет. Но\nесли хорошо подумать, то иногда нужен.\nПрежде всего, следует видеть грань между тренером и коучем.\nAgile-тренер обучает команду, как организовать себя, применяя\nAgile.\nЧасто они не работают в самой компании или работают в ней, но\nсами не являются членами команды. Их цель — прививать цен­\nности Agile и обучать дисциплинам Agile. Их работа не должна\nдлиться долго. Команде, состоящей из десятка разработчиков, по­\nнадобится одна-две недели тренингов.\nAgile-тренер может говорить и делать что угодно, но всему осталь­\nному, чему нужно, разработчики научатся сами.\nВ начале перехода команды на Agile тренер может временно вы­\nступать в роли коуча, но продолжительность такого коучинга не­\nвелика. Это бремя должен на себя взять кто-то из членов команды,\nи чем скорее, тем лучше.\nКак правило, коучи и тренеры — разные люди. Коучи — это члены\nкоманды, чья задача — обеспечивать соблюдение методологии\nвнутри команды. Когда разработка кипит, у программистов может\nвозникнуть соблазн сойти с колеи. Они ненароком могут пере­\nстать работать в паре, выполнять рефакторинг кода или обращать\nвнимание на сбои, возникающие при непрерывной сборке. Коуч\nнаблюдает за тем, чтобы такого не было, и при случае указывает\nкоманде на их огрехи. Коуч выступает в качестве совести команды,\nпостоянно ей напоминая о данных себе обещаниях и о ценностях,\nкоторые те согласились соблюдать.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "СЕРТИФИКАЦИЯ", "output": {"text": "Вся существующая сертификация по Agile смехотворна и нелепа.\nНельзя относиться к такой «сертификации» всерьез. Обучение\nво время программ сертификации часто полезно, однако оно не\nдолжно сводиться к определенной роли и должно быть рассчитано\nна всех членов команды.\nНапример, от «сертификата» скрам-мастера никакого толка нет.\nСертификаты значат не больше, чем то, что кому-то некуда было\nдевать деньги и он в лучшем случае прошел двухдневные курсы.\nЛицо, выдающее сертификат, не гарантирует, что новоиспечен­\nный мастер будет хорош в роли коуча. Бессмысленность наличия\nтакого сертификата в том, что он наделяет «сертифицированного\nскрам-мастера» чем-то особенным, а это не имеет ничего общего\nс коучингом в команде. Чтобы стать коучем в команде, не нужно\nникаких обучений.\nНет ничего плохого в прохождении самого обучения, необходимого\nдля сертификации. Просто обучать только одного человека отдель­\nной роли в команде глупо. Каждый член команды, применяющей\nAgile, должен понимать ценности и методы Agile. И если один член\nкоманды подготовлен, значит, нужно подготовить и всех.\nНастоящая сертификация\nА как на самом должна выглядеть программа сертификации по\nAgile? Это должен быть семестровый курс, который сочетал бы\nобучение работе по Agile и небольшой учебный проект по гибкой\nметодологии разработки. На этих курсах будет система оценок\nи высокие планки прохождения заданий. Тот, кто выдает сертифи­\nкаты, должен гарантировать, что ученики усвоили ценности Agile", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "AGILE В  КРУПНЫХ МАСШТАБАХ", "output": {"text": "Движение Agile появилось в конце 1980-х. Его быстро признали\nспособом организовать небольшую команду, размером от 4 до\n12 разработчиков. Эти числа были нестрогими и редко озвучива­\nлись, однако все понимали, что Agile (или как мы его там называли\nдо 2001-го) не подходит для гигантских команд из тысяч разработ­\nчиков. Это не та задача, над решением которой мы бились. Тем не\nменее вопрос подняли почти сразу. А что насчет больших команд?\nЧто, если применить Agile в крупном масштабе?\nДолгие годы люди искали ответ на этот вопрос. В самом начале\nавторы Scrum предложили метод Scrum-of-Scrums. Позже мы ста­\nли наблюдать появление некоторых фирменных подходов вроде\nSAFe1 и LeSS2. На эту тему написано несколько книг.\nЯ уверен, что в этих подходах нет ничего плохого. Я уверен, что\nэти книги замечательны. Но я не пробовал этих методов и не читал\nкниг. Вы можете подумать, что я какой-то пустомеля, что выска­\nзываюсь на тему, которую не изучил. Может, вы и правы. Однако\nу меня есть своя точка зрения.\nAgile создан для малых и средних команд. Точка. Он хорошо ра­\nботает для таких команд. Agile никогда не предназначался для\nбольших команд.\n1\t https://ru.wikipedia.org/wiki/Scaled_Agile_Framework.\n2\t https://less.works/ru/.\n\nAgile в крупных масштабах\n211\nПочему мы не пробовали решить проблему больших команд?\nДа потому что проблема больших команд решается огромным\nколичеством специалистов вот уже больше пяти тысяч лет. Эта\nпроблема больших команд — проблема культур и цивилизаций.\nИ если в какой-то мере судить о нашей нынешней цивилизации,\nэту проблему решили достаточно неплохо.\nКак построили пирамиды в Египте? Надо было решить проблему\nбольших команд. Как получилось победить во Второй мировой\nвойне? Надо было решить проблему больших команд. Как удалось\nотправить человека в космос и благополучно вернуть его на Зем­\nлю? Надо было решить проблему больших команд.\nНо такие большие проекты — не единственные достижения боль­\nших команд, не правда ли? Как получилось развернуть телефон­\nную сеть, построить автомагистраль, создать интернет, произвести\nмобильные телефоны или автомобили? Это все сотворили большие\nкоманды.\nИнфраструктура и средства обороны нашей обширной, охваты­\nвающей весь земной шар цивилизации — прямое свидетельство\nтого, что мы уже решили проблему организации больших команд.\nБольшие команды — проблема уже решенная.\nТа проблема, которую все еще не решили тогда, в конце 1980-х,\nкогда зарождалось движение Agile — это проблема организации\nработы малых команд разработчиков. Мы не знали, как эффектив­\nно организовать относительно малую группу программистов так,\nчтобы была максимальная отдача. И эту проблему решил Agile.\nВажно понимать, что Agile создали для решения проблемы органи­\nзации небольшой команды разработчиков, а не просто небольшой", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "ПО отличаются от тех, что имеются в других видах деятельности", "output": {"text": "Разработка похожа на строительство, за исключением того что не\nстроится ничего осязаемого. Разработка похожа на математику, за\nисключением того что ничего нельзя доказать. Разработка похожа\nна естествознание своей эмпиричностью, но при этом не откры­\nвается никаких законов природы. Разработка похожа на бухгал­\nтерское дело, за исключением того что она описывает поведение,\nупорядоченное по времени, а не факты о числах.\nРазработка ПО действительно не похожа ни на что другое. По­\nэтому для того, чтобы организовать небольшую команду разработ­\nчиков, нужен набор особых дисциплин, которые подстроены под\nуникальность разработки.\nПосмотрите на дисциплины и методы, о которых мы говорили на\nстраницах этой книги. Обратите внимание, что они все до единого,\nпочти без исключения, подстроены и отлажены под уникальные\nстороны разработки. Присмотритесь к методам, начиная от оче­\nвидных вроде разработки через тестирование и рефакторинга до\nболее неоднозначных вроде игры в планирование.\n\nAgile в крупных масштабах\n213\nСуть в том, что Agile создан для сферы разработки ПО. В частно­\nсти, речь идет о небольших командах программистов. Мне непри­\nятно, когда меня спрашивают, как внедрить Agile в сферу производ­\nства аппаратного обеспечения, строительства или в другой процесс.\nЯ всегда отвечаю, что не знаю, потому что Agile существует для\nсферы разработки ПО.\nА что, если масштабировать Agile? Думаю, ничего не выйдет. Орга­\nнизовать большие команды можно, разбив их на несколько мелких.\nAgile решает проблему небольших команд разработчиков. Про­\nблема организации небольших команд в большие уже решена. По­\nэтому мой ответ на вопрос о применении Agile в крупном масштабе\nтаков: просто распределите ваших разработчиков по небольшим\nкомандам, которые будут работать по Agile, а потом применяйте\nобычные способы управления и научно-исследовательские методы,\nчтобы руководить этими командами. Не нужно никаких особых\nправил.\nТеперь мне могут задать еще один вопрос. Если разработка ПО\nв небольших командах настолько уникальна, что пришлось изобре­\nсти Agile, почему такая уникальность не относится к организации\nмаленьких команд разработчиков в большие? Разве не существует\nчего-то уникального в области разработки ПО, что выходит за\nпределы организации небольших команд разработчиков и влияет\nна организацию больших?\nСомневаюсь, потому что проблема больших команд, которую мы\nрешили более пяти тысяч лет назад, — это вопрос слаженного\nсотрудничества самых разных команд. Команды, работающие по\nAgile, — лишь один вид несметного числа команд, которые нужно\nскоординировать для создания чего-то большего. Координация ко­\nманд различных назначений — уже решенная проблема. Я не вижу", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "ИНСТРУМЕНТЫ AGILE", "output": {"text": "Авторы Тим Оттингер и Джефф Лангр,\n16 апреля 2019 года1\nМастера осваивают свои инструменты. Столяры овладевают мо­\nлотком, метром, пилой, долотом, рубанком и уровнем. Все эти\nинструменты недороги и отлично подходят мастеру в начале его\nтрудового пути. По мере роста своих потребностей столяр учится\nпользоваться инструментами посерьезнее (которые, как правило,\nи дороже): дрелью, гвоздезабивным пистолетом, токарным и фре­\nзерным станком, САПР, ЧПУ и много чем еще.\n1\t Приводится с разрешения.\n\nИнструменты Agile\n215\nОднако мастера столярного дела не расстаются с ручным инстру­\nментом, который отлично подходит для работы. Используя только\nручной инструмент, умелый мастер может выполнить работу ка­\nчественнее и иногда даже быстрее, чем приводным инструментом.\nКак следствие, толковый столяр осваивает ручной инструмент,\nпрежде чем перейти к более совершенным. Столяры изучают пре­\nдел возможностей ручного инструмента, и поэтому у них есть по­\nнимание, когда нужно прибегнуть к приводному.\nВне зависимости от того, какой инструмент используется, ручной\nили приводной, столяр всегда стремится овладеть каждым ин­\nструментом из своего арсенала. Такое мастерство позволяет ему\nсосредоточиться непосредственно на ремесле, например на изго­\nтовлении изящной мебели высокого качества, а не на инструменте.\nБез должного овладения инструмент — плохой помощник, а при\nнеумелом применении может даже нанести вред как изделию, так\nи незадачливому работнику.\nСредства разработки\nРазработчикам ПО в начале работы требуется освоить целый ряд\nинструментов: Хотя бы один язык программирования, а чаще больше. Интегрированную среду разработки или текстовый редактор,\nподходящий программисту (vim, Emacs и т.  д.). Различные форматы данных (JSON, XML, YAML и т.  д.) и язы­\nки разметки (в том числе HTML). Командную строку и скрипты для взаимодействия с операци­\nонной системой. Системы управления версиями (Git. Тут без вариантов).", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Средства для непрерывной интеграции и сборки (Jenkins,\nTeamCity, GoCD и т.  д.).", "output": {"text": "Средства развертывания и управления сервером (Docker,\nKubernetes, Ansible, Chef, Puppet и т.  д.). Средства коммуникации (электронная почта, Slack, английский\nязык). Инструменты тестирования (фреймворки для модульного те­\nстирования, Cucumber, Selenium и т.  д.).\nВсе эти инструменты необходимы для создания ПО. Без них на се­\nгодняшний день невозможно ничего сделать. В некотором смысле,\nэто «набор ручных инструментов» разработчика.\nЧтобы освоить многие из этих инструментов и использовать их\nс отдачей, придется попотеть. Тем временем положение дел по­\nстоянно меняется, поэтому мастерски овладеть тем или иным\nинструментом становится все большим испытанием. Грамотный\nразработчик ищет пути наименьшего сопротивления и наиболь­\nшую пользу от применяемых инструментов, выбирая те, которые\nпри затраченных усилиях дают большую отдачу.\nЧто делает инструмент эффективным?\nНабор инструментов стремительно меняется, потому что мы по­\nстоянно узнаем более действенные способы достигать своих целей.\nЗа последние несколько десятков лет мы видели широкое разно­\nобразие систем управления версиями: PVCS, Clear Case, Microsoft\nVisual Source Safe, Star Team, Perforce, CVS, Subversion, Mercurial\nи прочие. Все они страдали от каких-то недостатков: слишком\nнестабильные, слишком проприетарные или закрытые, слишком\nмедленные, слишком въедливые, слишком жуткие или сложные.\n\nИнструменты Agile\n217\nВ итоге победил тот, который преодолел большинство ограниче­\nний, — Git.\nОдна из сильных сторон Git в том, что он дает уверенность, что\nисходный код будет в сохранности. Если вы уже давно работаете,\nто наверняка использовали какие-то из перечисленных систем и,\nвероятно, время от времени нервничали. Требуется соединение\nс сервером в реальном времени, иначе ваша работа под угрозой.\nРепозиторий CVS время от времени повреждал файлы, после чего\nприходилось устраивать пляски с бубном в надежде восстановить\nданные. Сервер репозитория иногда падал, даже при наличии\nрезервной копии, и можно было прождать пол рабочего дня. Не­\nкоторые проприетарные системы также страдали повреждением\nданных в репозиториях. Вы висите на телефоне часами, разгова­\nривая с поддержкой, при этом отстегивая деньги на сторону за воз­\nможность привести их в порядок. При использовании Subversion\nвы опасались вести много веток, потому что чем больше файлов\nнаходилось в репозитории, тем дольше переключались ветки (ино­\nгда это занимало несколько минут).\nХороший инструмент должен быть удобен в использовании, а не\nзаставлять вас содрогаться при одном лишь его виде. Git быстрый,\nон дает возможность вносить изменения в код локально, а не толь­\nко на сервере, позволяет работать из локального репозитория без\nсоединения по сети; он отлично поддерживает работу в несколь­\nких репозиториях и нескольких ветках, а еще искусно выполняет\nслияние версий.\nУ Git достаточно ясный и понятный интерфейс. Получается, что\nнаучившись работать в Git однажды, вам не придется особо думать\nо самом инструменте. Вас будут волновать куда более насущные\nвопросы: безопасность хранения данных и управление версиями\nисходного кода. Инструмент стал прозрачен.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Git — это функциональный и сложный инструмент. И что значит изучить его хорошо?", "output": {"text": " К счастью, работает принцип 80/20. Достаточ­\nно малая часть возможностей Git, скажем, процентов 20, поможет\nвам справиться с более чем 80 % повседневных задач, которые бу­\nдут встречаться во время управления исходным кодом. Большую\nчасть всего необходимого можно освоить за минуты. Сведения по\nвсему остальному можно найти в Сети.\nПростота и эффективность использования Git привели к совер­\nшенно непредвиденному новому подходу, как создавать программ­\nное обеспечение. Линус Торвальдс подумал бы, что использовать\nGit как инструмент для быстрого избавления от маленьких ку­\nсочков кода — сумасшествие, но это именно то, что продвигают\nсторонники метода Микадо1 и TCR (Test&&Commit || Revert)2.\nИ даже, хотя ключевой стороной Git является его способность\nочень эффективно управлять ветками, бесчисленные команды\nпочти без исключения ведут trunk-based разработку с помощью\nGit. Инструмент претерпел экзаптацию3, то есть эффективно ис­\nпользуется способами, которые не предполагали авторы.\nХорошие инструменты выполняют следующие задачи: помогают людям достигать своих целей; позволяют их достаточно быстро освоить; стремятся быть прозрачными для пользователей;\n1\t Ellnestam O., Brolund D. The Mikado Method. Shelter Island, New York:\nManning Publications, 2014.\n2\t Beck K. test && commit || revert. 2018. URL: https://medium.com/@kentbeck_7670/\ntest-commitrevert-870bbd756864.\n3\t Классический пример экзаптации: оперение птиц первоначально использо­\nвалось для регуляции температуры, в дальнейшем оно было адаптировано\nдля полета. — Примеч. ред.\n\nИнструменты Agile\n219 способны адаптироваться и экзаптироваться; доступны по стоимости.\nМы приводим Git в качестве примера хорошего инструмента…\nна 2019 год. Возможно, вы читаете это уже в будущем, и на дворе\nдругой год. Времена меняются, меняются и инструменты.\nФизические инструменты Agile\nПользователи Agile известны тем, что используют маркерные доски,\nклейкую ленту и наклейки разных размеров (маленькие и размером\nс флипчарт), чтобы работа была наглядной. Эти простые «ручные\nорудия» обладают всеми качествами хорошего инструмента: Помогают сделать ход работы наглядным и управляемым. Интуитивно понятны и не требуют особой подготовки. Не требуют значительной когнитивной нагрузки. Их можно\nлегко использовать, сосредоточившись на других задачах. Легко экзаптируемы. Ни одно из этих средств не было создано\nименно для управления ходом разработки ПО. Легко адаптируемы под конкретные потребности. Можно ис­\nпользовать клейкую ленту или офисный пластилин, прикре­\nплять картинки или значки, добавлять различные пометки,\nа еще по-своему использовать различные цвета и значки, чтобы\nне упустить ни одного нюанса. Все они недороги, и их легко приобрести.\nКоманды, располагающиеся в одном пространстве, могут легко\nуправлять крупным и сложным проектом с помощью лишь этих\nпростых и недорогих физических инструментов. Вы можете транс­\nлировать ключевую информацию с помощью листа из флипчар­", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "закрепив его на стену клейкой лентой. Такое представление обобщает важные тенденции и факты как для членов команды,", "output": {"text": "так и для спонсоров. С помощью таких представлений можно изо­\nбражать и представлять новые сведения прямо на лету. Гибкость\nпочти не ограничена.\nНо ограничения есть у каждого инструмента. Одно из основных\nограничений физических инструментов в том, что они не очень\nдейственны для распределенных команд. Только для сотрудников,\nнаходящихся в пределах видимости. Еще физические инструменты\nне сохраняют историю автоматически, поэтому есть только теку­\nщее состояние.\nА может, автоматизируем?\nПроект, в котором впервые применяли экстремальное програм­\nмирование (Chrysler Comprehensive Compensation System), вели\nпреимущественно с помощью физических инструментов. По мере\nраспространения Agile рос интерес к автоматизированным про­\nграммным средствам. На это есть вполне разумные основания: Программные средства хорошо позволяют осуществлять сбор\nданных в однородном виде. С помощью однородных данных можно легко составлять до­\nклады, графики и схемы, выглядящие профессионально. Легко вести историю и хранить данные. Можно мгновенно делиться данными, вне зависимости от ме­\nстонахождения адресата. Благодаря средствам вроде электронных таблиц, доступных\nпо сети, можно работать в полностью распределенной команде\nв режиме реального времени.\n\nИнструменты Agile\n221\nНекоторым ребятам, больше привыкшим к вылизанным презен­\nтациям и программам, физические инструменты кажутся чем-то\nотсталым. И поскольку мы работаем в отрасли разработки ПО,\nдля многих из нас автоматизация всего, чего только возможно, —\nестественное стремление.\nПрограммные средства в студию!\nИли...  может, не надо? Давайте остановимся и хорошенько подума­\nем. В программных средствах может отсутствовать часть функций,\nкоторые нужны вашей команде. Если у вас есть инструмент, то путь\nнаименьшего сопротивления — это исходить из возможностей ин­\nструмента, вне зависимости от того, отвечает ли он потребностям\nкоманды.\nКоманде сперва следует определиться, каким образом она собира­\nется вести работы, затем уже подбирать средства именно под свои\nпотребности.\nРаботники используют инструменты, а не инструменты — ра­\nботников.\nНикому не хочется зависеть от чужого мнения. Что бы вы ни дела­\nли, вам хочется разобраться в том, как нужно работать, прежде чем\nчто-то автоматизировать. Но вопрос не в том, какие инструменты\nиспользовать: физические или программные. Вопрос должен сто­\nять так: хорошие инструменты у нас или нет?\nСистемы управления жизненным\nциклом  приложений\nВскоре после появления Agile были созданы многочисленные про­\nграммы для управления проектами, которые ведутся с помощью", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Существуют самые разные системы управления с жизнен­ным циклом приложений (ALM) на базе Agile, как с открытым исходным кодом, так и в красивой блестящей обертке за при­личные деньги", "output": {"text": " Они позволяют собирать данные, образующиеся\nв ходе работы, управлять длинными списками функций и еще не\nвыполненных задач, создавать сложные графики, представлять\nсводки работы команд в совокупности, а еще выполнять некоторые\nоперации с числами.\nАвтоматизированные системы, которые помогут справиться с по­\nдобной работой, возможно, упорядочат эти процессы, для нашего\nже удобства. Помимо своих основных, системы ALM наделены\nдругими полезными функциями. Большая часть ALM позволяет\nвести удаленное взаимодействие, отслеживать историю, выполнять\nнекоторые рутинные бухгалтерские операции, а еще их можно\nгибко настроить под требования пользователя. Можно с помощью\nграфопостроителя создавать профессиональные многоцветные\nграфики на листах огромных форматов, которые можно развеши­\nвать как стенгазеты в пространстве, в котором находится команда.\nИ все же, несмотря на богатый функционал и коммерческий успех,\nALM невозможно назвать хорошим инструментом. Эта неудача\nбудет нам хорошим уроком. Хороший инструмент можно изучить достаточно быстро. ALM,\nкак правило, громоздки и требуют специальной подготовки перед\nих использованием (давайте-ка вспомним, когда мы в последний\nраз были на обучении по индексным карточкам). Даже несмотря\nна обучение, команде приходится отвлекаться на поиск в ин­\nтернете, чтобы выяснить, как выполнить ту или иную простую\nзадачу. Многие нехотя принимают сложность этих систем, пы­\nтаясь вникнуть глубже и во всем разобраться, но в конце концов\nмирятся с тем, что работа идет медленно и неповоротливо.\n\nИнструменты Agile\n223 Хорошие инструменты стремятся к прозрачности для пользо­\nвателей. Мы постоянно видим, как члены команды выискивают\nкакую-то ведущую логику в попытке разобраться в программе.\nВо время работы с карточками с историями они ведут себя слов­\nно пьяницы, размахивающие кулаками. Они слоняются по веб-\nстраницам, повсюду вставляя скопированный текст, стараются\nсвязать истории между собой или с их родительскими эпиками.\nОни теряются в историях, задачах и заданиях в попытке выстро­\nить их в слаженную систему. Это бардак. Эти средства требуют\nслишком много внимания. Хорошие инструменты способны адаптироваться и экзап­\nтироваться. Хотите добавить поля в виртуальной карточ­\nке в ALM? Вам придется найти программиста экспертного\nуровня, который посвятил (или даже пожертвовал) себя под­\nдержке необходимой программы. Или все закончится тем,\nчто вы отправите запрос на изменение поставщику. Дело пяти\nсекунд при использовании простых физических инструментов\nоборачивается пятидневной, а может и пятинедельной, за­\nдержкой при использовании ALM. Эксперименты с быстрой\nобратной связью в ходе работ становятся невозможными.\nИ, само собой, если вам вообще не нужны дополнительные\nполя, кто-то должен обратить изменения и перевыпустить\nпрограмму в измененной конфигурации. Системы ALM плохо\nадаптируются. Хорошие инструменты доступны по стоимости. Лицензия на\nALM, которая может стоить несколько тысяч долларов в год, —\nтолько начало. Установка и использование этих систем может\nпотребовать значительных дополнительных расходов на под­\nготовку, поддержку и, иногда, настройку под ваши потребности.\nТекущее обслуживание и администрирование выльются в до­\nполнительные затраты к уже немалым имеющимся.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "ALM -становится средством пристыдить программиста и выжать из него все соки. ", "output": {"text": "Там, где команда раньше собиралась на утренний стендап-\nмитинг (или ежедневный скрам), теперь она собирается, для того\nчтобы внести поправки в ALM. Система заменила личное взаимо­\nдействие автоматизированным отчетом о состоянии пользователя.\nХуже того, системы ALM часто не могут транслировать инфор­\nмацию, в отличие от физических средств. Вам нужно выполнить\nвход и копаться в данных, чтобы найти нужные сведения. Когда\nвы находите нужные сведения, они часто идут вместе с кучей не­\nнужных. Иногда два-три графика или изображения, которые вам\nнужны, могут находиться на разных страницах. Нет повода думать,\nчто ALM никогда не станут хорошим инструментом. Но если вам\nнужна доска с карточками и нужно использовать ПО, я бы посо­\nветовал какое-нибудь универсальное средство вроде Trello1. Оно\nпростое, быстрое, дешевое, расширяемое и неплохо выглядит.\nНаши способы вести работы постоянно изменяются. Сначала\nбыла SCCS, потом RCS, потом CVS, потом Subversion и потом уже\n1\t Опять же на 2019 год. Времена меняются.\n\nКоучинг — альтернативный взгляд\n225\nGit. В течение многих лет мы видели море изменений в способах\nуправления исходным кодом. Похожую эволюцию мы наблюдали\nна примере инструментов тестирования, средств развертывания\nи прочего (не будем перечислять). Вероятно, мы увидим и похожее\nразвитие систем ALM.\nЕсли смотреть на текущее состояние большинства систем ALM, то\nразумнее и безопаснее начать с простых физических инструментов.\nВозможно, позже вы задумаетесь о внедрении ALM. Удостоверь­\nтесь, что систему легко изучить, она прозрачна для повседневного\nиспользования, легко адаптируется и в ваших возможностях ее\nприобрести и запустить. Самое главное, убедитесь, что с ее по­\nмощью удастся организовать работу так, как нужно вам, и что\nвложения будут не напрасны.\nКОУЧИНГ  — АЛЬТЕРНАТИВНЫЙ ВЗГЛЯД\nАвтор Дэймон Пул, 14 мая 2019 года1\nДэймон Пул — это мой друг, который во многом\nсо мной не соглашается. Коучинг в Agile как раз\nпредмет наших разногласий. Вот я и рассудил, что\nего точка зрения также интересна и будет полезно\nее вам поведать.\nДядя Боб\nМножество путей к  Agile\nМожно прийти к Agile разными способами. И на самом деле многие\nиз нас пошли по этому пути непреднамеренно. Кто-то может ут­\n1\t Используется с разрешения.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "что Манифест Agile появился из-за того, что его авторы заметили, что им было по пути, и они решили рассказать о нем,чтобы другие могли отправиться в этот путь вместе с ними.", "output": {"text": "Мой путь в Agile начался с того, что в 1977-м я посетил один\nмагазин бытовой техники, в котором, как оказалось, продавали\nкомпьютеры TRS-80. Я был новичком и помогал одному опыт­\nному программисту проводить отладку игры Star Trek тем, что\nпросто задавал ему вопросы. Сейчас это называется парным\nпрограммированием. И, оказывается, задавать вопросы — важная\nчасть коучинга.\nС того времени примерно до 2001-го я, сам того не зная, работал\nпо Agile. Я писал код только в небольших командах, где задачи\nтасовались между их членами. Клиентом в основном была фирма,\nв который мы работали. Я уделял большое внимание тому, что\nсейчас называют карточками с историями, и мы выпускали про­\nдукт только небольшими и частыми релизами. Но потом, когда\nя уже работал в AccuRey, наши мажорные релизы стали выходить\nвсе реже, и в 2005-м разрыв дошел до полутора лет. Целых 4 года\nя непреднамеренно работал по каскадной модели. Это был ужас,\nа я даже не понимал почему. Более того, меня считали специали­\nстом по каскадной модели. Если не углубляться в подробности, эта\nистория знакома многим.\nПуть к  Agile\nМое знакомство с Agile было болезненным. Еще в 2005 году, до\nтого как конференции Agile Alliance и им подобные стали сказоч­\nно популярными, были конференции, которые проводил журнал\nSoftware Development. Я выступал докладчиком на конференции\nSoftware Development East, и после моего выступления о методах\n\nКоучинг — альтернативный взгляд\n227\nуправления распределенными командами разработчиков, в кото­\nром не было ни слова об Agile, я вдруг обнаружил себя в окру­\nжении ведущих мыслителей отрасли, среди которых были Боб\nМартин, Джошуа Кериевский, Майк Кон и Скотт Эмблер. Мне\nказалось, что все интересующие их темы сводились к карточкам,\nпользовательским историям, разработке через тестирование\nи парному программированию. Я был в ужасе от того, чем были\nзаняты мысли таких гигантов, их слова резали мне слух, словно\nбритвой.\nСпустя несколько месяцев, во время изучения Agile с целью его\nразоблачить, меня будто ударило током. Как программиста и пред­\nпринимателя меня озарило, и я понял, что Agile — это алгоритм\nпоиска наиболее ценных функций для рынка ПО и скорейшего\nпревращения их в доход.\nПосле такого воодушевления во мне развилась страсть советовать\nAgile всем. Я вел бесплатные вебинары, выкладывал посты в блог,\nвыступал на конференциях, присоединился и участвовал во встре­\nче Agile New England, проходившей в окрестностях Бостона. Делал\nвсе, чтобы распространить Agile повсюду. Когда люди делились,\nкакие трудности у них возникали при внедрении Agile, я был по­\nлон решимости им помочь. Я перешел в режим решения проблем\nи объяснял, что нужно делать.\nИ я стал замечать, что мой подход часто вызывал возражения и все\nбольше вопросов. Так было не только у меня. Я видел, как многие\nсторонники Agile на конференциях вступали в противоборство\nс теми, кто еще не осознал всю его прелесть. И до меня стало дохо­\nдить, что людям, которые по-настоящему приняли Agile и с отдачей\nего применяют, нужен другой подход для передачи знаний об Agile\nи опыте его использования, который бы учитывал особенности\nи обстоятельства каждого обучаемого.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Сертификация ICP-ACC включает в себя навыки, необходимые коучу:", "output": {"text": " активное слушание, эмоциональный интеллект, подача\nсебя, умение дать четкую и прямую обратную связь, задавать от­\nкрытые и наводящие вопросы, а также держаться беспристраст­\nно. Полный набор профессиональных качеств коуча еще шире.\nНапример, Международная федерация коучинга (ICF), которая\nобъединяет более 35 000 сертифицированных профессиональных\nкоучей, различает 70 специализаций по 11 категориям. Чтобы стать\nсертифицированным профессиональным коучем, нужно пройти\n1\t Adkins L. Coaching Agile Teams: A Companion for ScrumMasters, Agile Coach­\nes, and Project Managers in Transition. Boston, Massachusetts: Addison-Wesley,\n2010.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Инструменты коуча Многие системы, практики, методы и техники, применяемые в со­обществе Agile для обучения ", "output": {"text": "этой методологии и работе по ней,\nсовместимы с целями профессионального коучинга. Существуют\nнекие «инструменты коуча», чтобы помочь отдельным людям\nи группам открыть для себя, какие преграды встают у них на пути,\nи принять самостоятельное решение, как продвигаться вперед.\nКоучинг дает еще ценный навык — многосторонний опрос, одно\nиз назначений которого «задавать вопросы, которые приводят\nк открытиям, озарениям, заинтересованности или действиям».\nВзгляд в прошлое, особенно способы вроде «команда с лучшими\nрезультатами во все времена» или «шесть шляп», помогает коман­\nде самостоятельно находить возможности для изменений и не­\nзависимо решать, как эти возможности использовать. Открытое\nпространство (иными словами, не конференция) — это способ\nпровести многосторонний опрос в большой группе, даже в целой\nорганизации.\nЕсли вы проходили формальное обучение по Agile или его мето­\nдам, то, вероятно, участвовали в каких-то играх, которые давали\nпредставление о понятиях, принятых в Agile. Это игра с монетами,\nсимуляторы Scrum, пицца Kanban или постройка городка из кир­\nпичиков лего.\nБлагодаря этим играм участники получают наглядное представ­\nление о силе самоорганизации, размере небольших партий, коман­\n\nКоучинг — альтернативный взгляд\n231\nдах с тасовкой функций, разработке через тестирование, Scrum\nи Kanban. Когда игры проводят с намерением повысить уровень\nосведомленности участников, а затем позволяют им решить, что\nделать дальше, участники чувствуют дух профессионального коу­\nчинга.\nЧисло таких игр неуклонно растет. Многие из них можно найти на\ntastycupcakes.org, retromat.org и liberatingstructures.com.\nПрофессиональных навыков коуча\nнедостаточно\nЕсли мы работаем с командой, которая ничего никогда не слышала\nо Kanban, но ей это может пойти на пользу, никакие многосторон­\nние опросы или другие профессиональные техники коуча не помо­\nгут вдруг нарисовать Kanban в голове участника обучения. В таком\nслучае Agile-коуч переключается в режим, в котором предлагает\nподелиться потенциально полезным опытом. Если участники про­\nявляют интерес, тогда коуч делится своими знаниями, стараясь\nвернуться в русло проводимого обучения поскорее, как только\nкоманда усвоит новые знания.\nСуществует шесть областей знаний, которые стараются дать Agile-\nкоучи: набор методов Agile, переход на Agile, управление продук­\nтом в Agile,  Agile, ведение встреч и коучинг.\nУ каждого коуча свой набор навыков. Большинство организаций\nначинают с поисков Agile-коуча, у которого есть опыт работы с ме­\nтодами Agile. По мере того как компании продвигаются в своих\nпоисках, они приходят к тому, что ценны все области знаний.\nОдной из областей компетенции, которую компании постоянно\nнедооценивают, является необходимость для каждого, кто зани­", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Это важно, чтобы сосредоточиться на добавлении новой функциональности с новыми тестами, а не ", "output": {"text": "на постоянном обновле­\nнии существующего кода и тестов и/или возрастании технического\nдолга, что увеличивает скорость.\nКоучинг в  нескольких командах\nГде-то в 2012 году, по мере того как все больше организаций успеш­\nно налаживало работу с командами, произошел огромный всплеск\nинтереса в применении Agile в крупных масштабах. То есть переход\nорганизаций с традиционной основы на поддержку методологии\nAgile.\nСейчас большинство коучей по Agile проводят обучение в услови­\nях нескольких команд, а иногда даже десятков и сотен. И часто все\nначинается с того, что работники изолированно распределены по\nтрем или более не связанным между собой проектам.\nНе все из этих «команд» работают вместе для достижения общей\nцели, но все они работают в традиционной среде, где мыслят кате­\nгориями многолетнего финансирования, планирования портфелей\nи разработки проектов, вместо того чтобы ориентироваться на\nкомандный подход и выпуск качественного продукта.\nAgile в  крупных масштабах\nПроблема Agile в крупных масштабах весьма похожа на проблему\nAgile на уровне команды. Извлечь пользу из Agile — значит найти\nи удалить за каких-то пару недель все препятствия, возникающие\nна пути у команды при согласовании общих усилий, для того чтобы\n\nКоучинг — альтернативный взгляд\n233\nперейти от заказа до готового релиза. В этом и состоит трудность,\nно она преодолима. Еще труднее сделать так, чтобы команда вы­\nпускала релизы по требованию.\nПри попытках согласовать усилия нескольких команд для полу­\nчения единого результата такие трудности преумножаются и уве­\nличиваются. К несчастью, Agile в крупной организации обычно\nстараются внедрить традиционным способом организации проекта.\nТо есть происходит командно-административное внедрение огром­\nного количества изменений, выбранных для предварительного\nпреобразования. И когда я говорю об огромном числе, я говорю\nбуквально о тысячах изменений. Речь идет о тысячах, потому что\nкогда вы просите сотни человек предпринимать десятки измене­\nний в их повседневной работе, у них это может как получиться,\nтак и нет, в зависимости от того, насколько сильно эти изменения\nбьют по каждому из них лично. Достаточно даже сказать, что план\nизучить тот крупный набор методов Agile выглядит примерно\nкак «по плану нам нужно реализовать вот этот огромный ворох\nтребований».\nИз своего опыта работы со многими организациями, пытавшимися\nперейти на Agile (многие из них насчитывали сотни команд), и ра­\nботы со многими опытными Agile-коучами я понял самое важное:\nпроблема успешного перехода на Agile — это точно такая же про­\nблема, что и создание программного обеспечения.\nЛучше всего создавать ПО, полагаясь на частое взаимодействие\nс клиентом. Так и здесь: приживутся только те изменения, которые\nнапрямую связаны с тем, что люди, находящиеся под их влиянием,\nхотят и понимают в зависимости от своих собственных обстоя­\nтельств. Другими словами, я считаю, что самая действенная стра­\nтегия перехода на Agile — это воспринимать  как\nдерзкое предприятие с применением профессионального коучинга.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "с  помощью Agile и  коуча Манифест Agile сам по себе замечательный шаблон для", "output": {"text": " коучинга и согласования работы нескольких команд: «Дайте им среду\nи поддержку, в которой они нуждаются, и доверьте им выполнение\nработы». В подтверждение вышесказанного у сообщества Agile\nесть несметное число паттернов для масштабирования, которые\nсовместимы с ценностями и принципами Манифеста Agile. Гово­\nря это, я имею в виду не наборы методов, а отдельные методы, из\nкоторых эти наборы состоят.\nВсе эти наборы суть готовые рецепты, состоящие из отдельных\nметодов Agile. Вместо того чтобы действовать по одному из этих\nрецептов, можно подготовить свой собственный рецепт с Agile\nи коучем, который безупречно подходит именно вам. Если по ва­\nшему рецепту получается SAFe, Nexus, LeSS или Scrum@Scale, то\nзамечательно!\nМы приводим краткий обзор того, как самые успешные Agile-\nкоучи, работающие с крупными предприятиями, сочетают свое ре­\nмесло и Agile, и это лучшим образом сказывается на организации.\nНа уровне отдельных людей смысл коучинга в том, чтобы помогать\nим решать проблемы самостоятельно. А коучинг на уровне команд\nи организаций помогает самостоятельно достигать своих целей\nцелым командам.\nПрежде всего, коуч рассматривает всех, кого затронет переход\nна Agile, в качестве клиентов. Затем, проводя ретроспективы,\nмероприятия в опенспейсах и прочее, он выясняет, чтó клиенты\nсчитают вызовами и возможностями. Становится понятно, сколь­\nко работы нужно провести, чтобы внедрить Agile. Затем с помо­\nщью групповых средств принятия решений, например точечного\nголосования, коуч определяет, с чего нужно начинать в первую\n\nКоучинг — альтернативный взгляд\n235\nочередь. Потом он помогает организации провести несколько\nнаиболее важных изменений. Затем проводит ретроспективу\nи повторяет действия.\nКонечно, для многих участников такое  будет про­\nисходить впервые. Одного коучинга недостаточно, важно также\nпроводить обучение и тренинги, чтобы сотрудники могли прини­\nмать решения, будучи достаточно осведомленными.\nНаращивание внедрения Agile\nНиже приведен список отдельных методов для внедрения Agile.\nЭтот список был изначально создан и периодически обновлялся\nпосредством трех главных ступеней в Agile-коучинге — устране­\nния дублей, сбора идей на стикерах и точечного голосования при\nучастии группы из примерно десятка корпоративных коучей. Для\nсправки здесь приведено обобщенное описание этих методов. Су­\nществует гораздо больше методов Agile, которые здесь не перечис­\nлены. Рассмотрим для начала этот список. Например, вместо того\nчтобы внедрять Scrum, Kanban, экстремальное программирование\nили один из наборов методов для масштабирования Agile, поду­\nмайте, какой метод из списка ниже наиболее уместен для текущих\nпотребностей той или иной группы или команды, и внедрите его.\nПопробуйте его применять некоторое время, потом повторите\nдействия. Практики Kanban: методы Kanban основаны на наглядности\nхода работ (с помощью карточек на стене), ограничении коли­\nчества выполняемых работ и прохождении работы через разные\nстадии. Scrum и экстремальное программирование (XP): эти две мето­\nдологии часто увязывают вместе, потому что они очень похожи,", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "В SAFe, например, их упоминают совместно как ScrumXP. Обе методологии включа­ют в себя большое разнообразие методов, например", "output": {"text": " короткие\nежедневные собрания команды, «владелец продукта», «фаси­\nлитатор процесса» (он же «скрам-мастер»), ретроспективы,\nкросс-функциональность команд, пользовательские истории,\nнебольшие релизы, рефакторинг, заблаговременное написание\nтестов и парное программирование. Распределение командных событий; когда командные события,\nтакие как стендап-митинги и ретроспективы, распределены по\nвремени между несколькими командами, тогда возможно под­\nнимать ежедневные и системные препятствия по дереву эска­\nлации. Такое распределение по времени задает время начала\nи конца итераций, а также их продолжительность. Команды, не\nработающие по итерациям, которые могут выпускать релизы\nпо требованию, могут соотносить свой рабочий график с любой\nдругой каденцией. Деревья эскалации: если есть смысл всегда работать над чем-\nлибо, что приносит наибольшую пользу, тогда есть смысл без­\nотлагательно поднимать препятствия по строго намечен­ному\nпути эскалации. Они применимы к широко используемому\nметоду Scrum of Scrums и не такому известному retrospec­\ntive of retrospectives. Одним из паттернов для этого является\nфрактальный паттерн масштабирования для Scrum@Scale\nпосредством Scrum, Scrum of Scrums и даже Executive Action\nTeam. Регулярное межкомандное взаимодействие: этот метод пред­\nполагает регулярное взаимодействие между мастерами Scrum,\nвладельцами продукта и членами команды, которые работают\nсообща на результат. Один из способов это обеспечить — прово­\nдить регулярные события на открытом пространстве.\n\nКоучинг — альтернативный взгляд\n237 Kanban портфеля: традиционные способы управления порт­\nфелями способствуют распределению работников по несколь­\nким командам, что ведет к неконтролируемой многозадачно­\nсти. Многозадачность создает трение, увеличивает сложность\nи снижает производительность. Kanban портфеля накладыва­\nет ограничения на количество выполняемых работ на уровне\nинициативы и обеспечивает постоянное внимание на работе,\nприносящей наибольшую пользу. Одновременное управление\nменьшим количеством проектов также значительно упрощает\n(или даже решает) проблему согласования нескольких команд.\nKanban портфеля лучше всего работает в паре с наименее воз­\nможным приростом (Minimum Viable Increment). Наименее возможный прирост: существует много вариантов\nразвития этой идеи, но все они сводятся к обдумыванию того,\nкакой путь короче и позволит скорее получить наибольшую\nпользу. Растущее число организаций принимают другую край­\nность — внедряют непрерывную доставку, регулярно и часто\nвыпускают небольшие обновления, иногда по несколько раз на\nдню.\nДобиваться большого,\nсосредоточившись  на  меньшем\nБольшинство случаев внедрения Agile в нескольких командах\nодновременно сталкивается с проблемой того, что их члены боль­\nше думают о преодолении сложности, а не о решении задач для\nдостижения простоты. По своему опыту могу сказать, что один из\nкраеугольных камней применения Agile в крупных масштабах —\nэто высокий уровень применения Agile на уровне команд и очень\nнизкий уровень сложности во всех структурах. Когда у вас целая\nфлотилия быстроходных лодок, то практически незачем связы­", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "Ниже приведены некоторые методы, как правило,ассоциирующиеся с Agile на уровне команды,", "output": {"text": " которые выполняют\nфункцию двойного назначения в качестве инструмента согласова­\nния работы нескольких команд. Принципы SOLID: хотя эти принципы важны на любом уровне\nорганизации, они особенно полезны для упрощения согласо­\nвания работы нескольких команд посредством значительного\nсокращения зависимостей. Небольшие и ценные пользовательские истории: небольшие,\nсамостоятельно выпускаемые истории ограничивают количе­\nство зависимостей, а это упрощает согласование нескольких\nкоманд. Небольшие и частые релизы: независимо от того, будут ли эти\nрелизы предоставлены клиенту, практика наличия продукта,\nготового к релизу, у всех команд помогает выявлять пробле­\nмы координации и архитектуры. Появляется возможность\nотыскать и устранить корень проблемы. Некоторые команды,\nработающие по Scrum, забывают об этом, но в самом Scrum\nговорится: «На каждом этапе продукт должен быть в рабочем\nсостоянии, независимо от того, решит ли владелец продукта\nвыпустить релиз». Это означает, что нужно согласовать работу\nкоманды с работой других команд, от которых зависит состо­\nяние продукта. Непрерывная интеграция: в экстремальном программировании\nделается еще больший упор на согласованность, этот метод при­\nзывает проводить слияние всего продукта после каждой отметки\nоб изменении. Простота проектирования: этот метод также известен как\n«независимость проектирования», считается одним из труд­\n\nКоучинг — альтернативный взгляд\n239\nнейших для изучения методов, поскольку он один из самых\nнелогичных. Команды тяжело справляются с этим методом,\nдаже когда им не нужно согласовывать свои действия с други­\nми командами. При согласовании работы нескольких команд\nмонолитные, централизованные, заранее спланированные ар­\nхитектуры создают огромные зависимости между командами,\nкоторые, как правило, заставляют их работать в тесной связи\nмежду собой, что нарушает большую часть обещаний Agile.\nПростота проектирования, особенно в сочетании с такими\nметодами, как микросервисная архитектура, позволяет при­\nменять Agile в крупных масштабах.\nБудущее Agile-коучинга\nВ последние несколько лет профессиональный коучинг и фасили­\nтация все прочнее занимают свое место среди дисциплин Agile. На\nкурсах скрам-мастера с расширенной сертификацией (ACSM), про­\nводимых Scrum Alliance, есть несколько учебных задач, связанных\nс коучингом и фасилитацией, а программы «сертифицированный\nкомандный коуч» (CTC) и «сертифицированный корпоративный\nкоуч» (CEC) требуют усвоения еще большего количества навыков\nфасилитации и коучинга. Руководство по Scrum дает определение\nскрам-мастера как того, кто проводит коучинг.\nПоскольку все больше людей проходят курсы профессионального\nкоучинга и встречают профессиональных коучей, которые рабо­\nтают в сообществе Agile, коучинг в Agile привлекает к себе все\nбольше внимания.\nКажется, в последние пару месяцев наблюдается рост интереса\nк профессиональному коучингу. Люди все чаще пропускают об­\nучение по программе ICP-ACC и сразу идут на обучение по ICF.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": ""}}
{"instruction": "Проаналізуй цей запит", "input": "ПОХМЕЛЬЕ ОТ АGILE", "output": {"text": "Переход из одной культуры в другую был непрост. Компаниям\nтребовалась помощь извне, чтобы осуществить его в своих ор­\nганизациях. Появился новый вид специалистов — Agile-коучи.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}
{"instruction": "Проаналізуй цей запит", "input": "Мастерство высшего уровня. Было создано много различных программ сертификации. ", "output": {"text": "Неко­торые сертификаты можно получить, просто пройдя двухдневные\nкурсы.\nПродать методы Agile менеджерам среднего звена было легко —\nвсем им хотелось, чтобы ПО выпускалось быстрее. «Инжини­\nринг — это несложно. Если наладить процесс разработки, с ним\nтоже будет все в порядке, — говорили менеджерам.  — Дело всегда\nв людях». И они покупали. Руководители работают с людьми\nи покуда занимают свою должность, они счастливы, когда их под­\nчиненные работают быстрее.\nМножество компаний на самом деле получили пользу от перехода\nна Agile, и сегодня их положение дел гораздо лучше, чем до этого.\nМногие из этих компаний могут развертывать ПО несколько раз\nв день, бизнес и технологии у них работают действительно как\nодна команда. Но так, конечно, далеко не у всех. Менеджеры в по­\nпытке ускорить разработчиков используют полную прозрачность\nпроцесса для контроля каждого шага. Agile-коучи, у которых\nнет опыта ведения бизнеса и опыта технических работ, обучают\nменеджеров и говорят разработчикам, что им делать. Дорожные\nкарты и вехи определяются менеджерами и навязываются ко­\nмандам разработчиков — разработчики могут оценивать работу,\nно их заставляют вписывать свои оценки в навязанные вехи. До­\nвольно часто можно встретить проекты, в которых используются\nсоответствующие итерации и пользовательские истории, уже\nраспределенные руководством на следующие полгода-год. Если\nразработчик не в состоянии угнаться за всеми единицами слож­\nности историй за спринт, ему придется работать в следующем\nспринте больше, чтобы наверстать упущенное. Ежедневные стен­\nдап-митинги становятся встречами, где разработчики должны\nделать доклад о ходе работ владельцам продукта и Agile-коучам,\n\nПохмелье от Аgile\n245\nподробно рассказывая о том, над чем они работают и когда эти\nработы закончат. Если владелец продукта думает, что разработчи­\nки тратят слишком много времени на автоматизированные тесты,\nрефакторинг, парное программирование или что-то подобное, он\nпросто команде запрещает это делать.\nВ их модели Agile нет никакой стратегическо-технической ра­\nботы. В ней нет требований к архитектуре или проектированию.\nПорядок таков, что нужно просто сосредоточиться на какой-либо\nневыполненной работе из списка, которую нужно выполнить не­\nзамедлительно и которой присвоили наивысший приоритет. И так\nодно задание с наивысшим приоритетом следует за другим. Такой\nподход приводит к длинной последовательности итеративных\nтактических работ и накоплению технического долга. Хрупкое\nпрограммное обеспечение, знаменитые монолиты (или распреде­\nленные монолиты, если говорить о командах, которые пробуют\nиспользовать микросервисную архитектуру) становятся в порядке\nвещей. Ошибки и неполадки оказываются излюбленной темой для\nобсуждения на ежедневном стендап-митинге и ретроспективах.\nРелизы выходят не так часто, как ожидали клиенты. Тестирование\nвручную занимает целые дни, а то и недели. И надежда на то, что\nприменение Agile убережет от всех напастей, бесследно уходит.\nМенеджеры обвиняют разработчиков, что те слишком медленно\nработают. Разработчики обвиняют менеджеров, что те не дают им\nпроводить необходимые стратегические и технические работы.\nВладельцы продукта не считают себя частью команды, поэтому не\nберут на себя никакой ответственности за то, что дела пошли не\nтак. Начинает преобладать порядок «свои против чужих».\nЭто то, что мы называем похмельем от Agile. После долгих лет вло­\nжения средств в переход на Agile компании понимали, что у них до\nсих пор много тех же проблем, которые были до него. И конечно,\nво всем виноват Agile.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}
{"instruction": "Проаналізуй цей запит", "input": "ОЖИДАНИЕ И  РЕАЛЬНОСТЬ", "output": {"text": "Переход на Agile, который полностью сосредоточен на процессе,\nнельзя назвать полным переходом. В то время как коучи по Agile\nнаправляют менеджеров и команды поставщиков в работе по Agile,\nникто не помогает разработчикам изучать \nAgile и инжиниринг. Предположение о том, что налаживание со­\nтрудничества между людьми улучшит показатели по инжинирингу,\nв высшей мере ошибочно.\nСлаженное сотрудничество убирает некоторые барьеры, кото­\nрые мешают работать, но не обязательно добавляет мастер­\nства работникам.\nС внедрением Agile появляются и большие надежды: команды\nразработчиков должны выпускать ПО, готовое к релизу в про­\nизводство, сразу как реализована какая-либо функция или, по\nкрайней мере, в конце каждой итерации. Для большинства команд\nразработчиков это изменение значительно. Нет для них иного\nпути перехода на Agile, кроме изменения подхода к работе, а это\nозначает, что нужно изучать и совершенствовать новые методы.\nНо встает несколько вопросов. Как правило, во время перехода на\nAgile на повышение квалификации разработчиков не выделяется\nбюджет. Клиенты не учитывают снижения темпов разработчиков\nпри переходе на Agile. Большинство даже не знает, что разработчи­\nкам нужно изучить новые методы. Им сказали, что если они будут\nлучше сотрудничать, то разработчики будут работать быстрее.\nВыпуск ПО в продакшен каждые две недели требует большой дис­\nциплины и развитых технических навыков, тех навыков, которых\nобычно не отыщешь в командах, выпускающих ПО несколько раз\nв год. Все становится намного хуже, когда предполагается, что не­\nсколько команд с внушительным числом разработчиков в каждой\n\nВсе дальше друг от друга\n247\nи работающих над одними и теми же системами, будут выпускать\nПО в продакшен сразу, как только реализуют какие-либо функции.\nУровень мастерства команд в технических практиках и инжини­\nринге должен быть высоким, чтобы развертывать ПО в продакшен\nнесколько раз в день, при этом не подрывая стабильность всей\nсистемы. Разработчики не могут просто выбрать что-то из списка\nневыполненных задач, начать писать код и думать, что все будет\nхорошо, когда релиз пойдет в производство. Им нужно стратеги­\nческое мышление. Им нужно модульное проектирование с воз­\nможностью параллельной работы.\nИм нужно постоянно принимать изменения и при этом обеспе­\nчивать постоянную возможность развернуть систему. Для этого\nим постоянно нужно создавать ПО — и гибкое, и надежное. Но\nсохранять равновесие между гибкостью, надежностью и необхо­\nдимостью непрерывно развертывать ПО в продакшен в высшей\nмере тяжело, и такого равновесия нельзя достичь без необходимых\nнавыков инжиниринга.\nНельзя думать, что команды смогут развить эти навыки просто\nблагодаря комфортной и сплоченной обстановке. В обретении этих\nтехнических навыков командам нужна поддержка. Эту поддержку\nможно оказать сочетанием коучинга, тренингов, экспериментиро­\nвания и поощрения самообразования. Agile в бизнесе прямо связан\nс тем, как быстро компании могут выпускать ПО, а это означает\nэволюцию их навыков инжиниринга и технических методов.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}
{"instruction": "Проаналізуй цей запит", "input": "ВСЕ ДАЛЬШЕ ДРУГ ОТ ДРУГА", "output": {"text": "Конечно, не каждый случай перехода на Agile сопровождается все­\nми проблемами, описанными выше, или, по крайней мере, не в та­", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}
{"instruction": "Проаналізуй цей запит", "input": "ВЫСШЕЕ МАСТЕРСТВО РАЗРАБОТКИ", "output": {"text": "Чтобы повысить планку профессиональных навыков разработки\nи восстановить некоторые изначальные цели Agile, группа разра­\nботчиков собралась на встрече в Чикаго в ноябре 2008 года, чтобы\nсоздать новое движение — мастеров разработки ПО (Software\nCraftsmanship). Эта встреча напоминала саммит Agile, который\nпрошел в 2001 году, на ней разработчики утвердили основной на­\nбор ценностей и создали новый манифест1 на основе Манифеста\nAgile:\nЯвляясь устремленными к совершенству мастерами разработ­\nки ПО, мы повышаем уровень профессиональной разработки\nПО, делая это сами и помогая другим осваивать наше ремесло.\nЗанимаясь этой деятельностью, мы прежде всего научились\nценить:\n1\t https://manifesto.softwarecraftsmanship.org/#/ru-ru.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}
{"instruction": "Проаналізуй цей запит", "input": "ИДЕОЛОГИЯ ПРОТИВ МЕТОДОЛОГИИ", "output": {"text": "Идеология — это система идей и идеалов. А методология — систе­\nма методов и практик. Идеология определяет идеалы, на которые\nнужно держать курс. Можно использовать одну или несколь­\nко методологий для достижения этих идеалов — они являются", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}
{"instruction": "Проаналізуй цей запит", "input": "ПО", "output": {"text": "(ASD), методов Crystal, разработки, управляемой функциональ­\nностью (FDD), а также другие методологии Agile служат одной\nи той же цели.\nМетодологии и методы — как дополнительное колесико в детском\nвелосипеде: они хороши поначалу. Как и в случае с ребенком,\nкоторый учится кататься на велосипеде, такие колесики помогут\nнаучиться безопасно и легко кататься. Когда ребенок становится\nувереннее, мы поднимаем колесики, чтобы он мог потренировать­\nся держать равновесие. Потом убираем одно из дополнительных\nколесиков. А за ним и другое.\nТеперь ребенок может кататься без посторонней помощи. Но если\nмы слишком сильно сосредоточимся на важности тренировочных\nколес и не будем их долго убирать, ребенок привыкнет к ним и не\nзахочет без них кататься. Чрезмерное внимание к методологии или\nнабору методов отвлекает команды и организации от их действи­\nтельных целей. Цель — научить ребенка ездить на велосипеде, а не\nвнедрить тренировочные колеса.\nДжим Хайсмит в своей книге Agile Project Management: Creating\nInnovative Products пишет: «Принципы без методов — ноль без\n1\t https://agilemanifesto.org/iso/ru/principles.html.\n\nЕсть ли в мастерстве разработки методы?\n253\nпалочки, в то время как методы без принципов, как правило, заучи­\nвают механически, без лишних раздумий. Принципы направляют\nметоды. Методы воплощают принципы. Они идут рука об руку»1.\nХотя методологии и методы являются средством для достижения\nцели, мы не должны преуменьшать их важность. Профессионалов\nопределяют по тому, как они работают. Мы не можем заявлять,\nчто у нас есть какие-то принципы и ценности, если наши методы\nработы не согласуются с ними.\nХорошие специалисты могут точно сказать, как будут вести работу\nпри тех или иных обстоятельствах. Они владеют широким набором\nметодов и могут их применять в зависимости от потребностей.\nЕСТЬ ЛИ В  МАСТЕРСТВЕ РАЗРАБОТКИ МЕТОДЫ?\nВ мастерстве разработки нет методов. Скорее оно способствует\nвечному поиску лучших методов и способов работы. Хорошие\nметоды хороши до тех пор, пока мы не обнаружим новые, кото­\nрые придут им на замену. Закрепление определенных методов\nза мастерством разработки ПО ослабило бы это мастерство с по­\nявлением новых методов. Но это не значит, что международное\nсообщество мастеров разработки не советует применять никакие\nметоды. Наоборот, со времени создания в 2008 году и по сей день\nсообщество признает экстремальное программирование лучшим\nнабором методов Agile для разработки ПО.\nРазработка через тестирование, рефакторинг, простота проекти­\nрования, непрерывная интеграция и парное программирование\nвысоко ценятся в сообществе мастеров разработки ПО, но это\n1\t Highsmith J. Agile Project Management: Creating Innovative Products, 2nd ed.\nBoston, Massachusetts: Addison-Wesley, 2009. P. 85.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}
{"instruction": "Проаналізуй цей запит", "input": "А  НЕ  НА  МЕТОДЕ", "output": {"text": "Распространенная ошибка в сообществах Agile и мастеров разра­\nботки ПО в том, что они больше внимания уделяют методам, а не\nценностям, которые лежат в основе этих методов. Возьмем, к при­\nмеру, разработку через тестирование. Один из наиболее частых\nвопросов, которые задаются в сообществах мастеров разработки\nПО: «Как убедить моего руководителя/коллегу/команду приме­\nнять разработку через тестирование?» Так вопрос ставить нельзя.\nПроблема здесь в том, что мы скорее предлагаем решение, чем\nпринимаем проблему. Никто не станет работать по-другому, если\nне показать им ценности.\n\nОбсуждение методов\n255\nВместо того чтобы силком тянуть к разработке через тестирование,\nможно найти согласие в том, что полезно будет сократить общее\nвремя тестирования программы. Сколько времени сегодня занима­\nет тестирование? Два часа? Два дня? Две недели? Сколько людей\nэтим занимается?\nА что, если сократить время до 20 минут? Двух минут? Или даже\n2 секунд? А что, если бы могли проводить его в любое время на­\nжатием на кнопку? Даст ли это нам хорошую отдачу от вложений?\nСтанет ли наша жизнь от этого легче? Сможем ли мы выпускать\nнадежное ПО быстрее?\nЕсли мы соглашаемся в том, что ответ будет «да», то можно уже\nговорить о методах, которые помогут нам достичь наших целей.\nРазработка через тестирование станет в этом случае естественным\nвыбором. Тех, кому не нравится разработка через тестирование, мы\nспросим, какой метод они предпочитают. Какой метод, который по­\nзволит достичь поставленных целей с тем же или лучшим успехом,\nони смогут предложить?\nПри обсуждении методов необходимо в первую очередь догово­\nриться о целях. Единственное, чего не нужно допускать, — отказ\nот метода без предложения лучшей альтернативы.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}
{"instruction": "Проаналізуй цей запит", "input": "ОБСУЖДЕНИЕ МЕТОДОВ", "output": {"text": "Обсуждение методов должно проходить на нужном уровне с ком­\nпетентными людьми. Если мы хотим применять методы, которые\nулучшат сотрудничество в деловой и технологической областях,\nнам нужно вовлечь в обсуждение представителей этих областей.\nЕсли разработчики обсуждают методы, которые им понадобятся\nдля улучшения процесса создания ПО, тогда не следует пригла­", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}
{"instruction": "Проаналізуй цей запит", "input": "ВЛИЯНИЕ МАСТЕРСТВА НА ЛИЧНОСТЬ\nРАЗРАБОТЧИКА", "output": {"text": "Мастерство разработки ПО оказывает глубокое влияние на лич­\nность. Мы часто видим, как люди проводят разделение между\nличной жизнью и профессиональной деятельностью. Фразы вроде\n«я не хочу говорить о работе после того, как выйду из офиса» или\n«в жизни у меня другие интересы» произносят так, будто работа —\nэто что-то плохое и скверное, или то, чем вы вынуждены занимать­\nся без всякого желания.\nКогда мы делим свою жизнь на несколько, эти жизни находятся\nв постоянном столкновении, что уже приносит проблемы. Ради\nодной жизни приходится жертвовать другой, независимо от той,\nчто мы выберем.\nФилософия мастерства в том, что разработка — это профессия.\nЕсть разница между наличием работы и профессии. Работа — это\nто, чем мы занимаемся, но это не часть нашей личности. Профессия\nже, с другой стороны, — часть нашего «я». Когда спрашивают про", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}
{"instruction": "Проаналізуй цей запит", "input": "ВЛИЯНИЕ МАСТЕРСТВА НА ОТРАСЛЬ\nРАЗРАБОТКИ", "output": {"text": "С 2008 года по всему миру растет число сообществ мастеров раз­\nработки ПО, организуются конференции, которые привлекают\nдесятки тысяч разработчиков. В то время как в сообществах Agile\nбольше внимания уделяется взаимодействию между людьми и про­\nцессу создания программного обеспечения, в сообществах мастеров\nбольше внимания уделяется технической стороне вопроса. Они\nвсегда были главными сторонниками экстремального программи­\nрования и многих других технических методов, распространяя их\n\nВлияние мастерства на компании\n259\nсреди большого числа разработчиков и компаний во всем мире.\nИменно благодаря сообществам мастеров разработки ПО мно­\nгие разработчики стали изучать разработку через тестирование,\nнепрерывную интеграцию, парное программирование, простоту\nпроектирования, рефакторинг, принципы SOLID и чистого кода.\nОни также учатся создавать программы на основе микросервисной\nархитектуры, автоматизировать конвейеры развертывания и пере­\nносить программы в облако.\nОни изучают новые языки и парадигмы программирования. Они\nизучают новые технологии и новые способы тестирования и сопро­\nвождения своих продуктов. Разработчики в сообществе мастеров\nсоздают безопасные и дружелюбные пространства, где могут встре­\nтиться с единомышленниками и поговорить о профессии.\nВ сообществах мастеров разработки ПО найдется место каждому.\nС самого начала одной из главных целей мастеров разработки было\nсобрать самых разных разработчиков, для того чтобы они могли\nучиться друг у друга и повышать профессиональную планку.\nВ сообществах мастеров признаются участники любого уровня\nтехнического развития, на встречах приветствуется любой разра­\nботчик, независимо от его опыта. Сообщество преданно относится\nк подготовке нового поколения профессионалов, организует раз­\nличные мероприятия, где люди, которые присоединяются к от­\nрасли разработки, могут изучить основные методы искусного\nсоздания ПО.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}
{"instruction": "Проаналізуй цей запит", "input": "ВЛИЯНИЕ МАСТЕРСТВА НА КОМПАНИИ", "output": {"text": "Мастерство разработки ПО получает все большее признание. Мно­\nгие компании, которые перешли на Agile, теперь смотрят в сторону", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}
{"instruction": "Проаналізуй цей запит", "input": "ВЫСШЕЕ МАСТЕРСТВО И  AGILE", "output": {"text": "Некоторые из факторов, побуждающих создание движения ма­\nстеров разработки ПО, были связаны с разочарованием многих\nразработчиков от пути развития Agile. Из-за этого некоторые\nсчитали, что движение мастеров и Agile противоречили друг дру­\nгу. Участники движения мастеров разработки ПО, которые также\nучаствовали в движении Agile, критиковали Agile за слишком\nбольшое внимание к процессу разработки и нехватку внимания\nк инжинирингу. Участники движения Agile критиковали движение\nмастеров за слишком узкий подход и пренебрежение реальными\nделовыми и человеческими проблемами.\nХотя обе стороны выказывали некоторое беспокойство, большая\nчасть разногласий была связана с племенными инстинктами и, соб­\nственно, с принципиальным расхождением мнений. В сущности,\nстремления обоих движений очень схожи. Оба движения стремят­\nся к удовлетворенности клиентов, ценят тесное сотрудничество", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}
{"instruction": "Проаналізуй цей запит", "input": "ЗАКЛЮЧЕНИЕ", "output": {"text": "На встрече в Сноуберде в 2001 году Кент Бек выразил мысль, что\nодна из задач Agile — построить мост над пропастью, разделяющей\nбизнес и разработчиков. К сожалению, когда менеджеры проекта\nнаводнили сообщество Agile, разработчики, которые в первую\nочередь создали сообщество, почувствовали себя обездоленными\nи недооцененными. Таким образом, они ушли, чтобы основать\nдвижение мастеров разработки ПО. Выходит, что старые терки\nникуда не делись.\nИ как бы то ни было, цели обоих сообществ — Agile и мастеров —\nпочти одни и те же. Эти два движения не должны идти раздельно.\nМожно только надеяться, что однажды они снова воссоединятся.\n\n8", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}
{"instruction": "Проаналізуй цей запит", "input": "ЗАКЛЮЧЕНИЕ", "output": {"text": "Вот такие дела. В этой книге — мои воспоминания, мнение, всякие\nразглагольствования и бредни об Agile. Надеюсь, вам было инте­\nресно, и вы почерпнули даже что-то полезное для себя.\nВозможно, Agile — наиболее значительная и устойчивая револю­\nция в методах разработки ПО на нашей памяти. Такая значимость\nи устойчивость — свидетельство того, что те 17 ребят в феврале\n2001 года в Сноуберде, что в Юте, спустили снежный ком вниз\nс очень высокого холма. Нестись на этом коме, наблюдая за тем,\nкак он растет и набирает скорость, как сносит валуны и деревья,\nмне было очень весело.\nЯ написал эту книгу, потому что подумал, что наступило вре­\nмя, когда кто-то должен встать и сказать о том, каким Agile был\nи каким он должен быть и сейчас. Я посчитал, что настало время\nвернуться к основам.\nЭти основы были, есть и будут теми самыми методами из круга\nжизненного цикла Рона Джеффриса. Эти основы представляют\nсобой ценности, принципы и методы из книги Кента Бека Extreme", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Мастерство высшего уровня"}}
{"instruction": "Проаналізуй цей запит", "input": "ПОСЛЕСЛОВИЕ", "output": {"text": "Автор Эрик Кричлоу, 5 апреля 2019 года\n\n266\nПослесловие\nЯ могу легко вспомнить свою первую работу, где решили перей­\nти на Agile. Был 2008 год. Нашу компанию приобрела крупная\nорганизация. Происходили значительные изменения в политике,\nделопроизводстве и штате сотрудников. Еще я могу вспомнить\nпарочку других работ, где акцент ставился на методы Agile. Ритуа­\nлы соблюдались неукоснительно: планирование спринта, демон­\nстрация, обзор спринта… В одной из этих компаний всех штатных\nразработчиков направили на двухдневные тренинги по Agile, где\nони получили сертификаты скрам-мастеров. Я был разработчиком\nмобильных приложений, и меня попросили написать мобильное\nприложение для игры в Agile-покер.\nНо за 11 лет, с тех пор как я впервые познакомился с Agile, я ра­\nботал в нескольких компаниях, где уже точно не помню, исполь­\nзовался Agile или нет. Возможно, потому что Agile стал настолько\nвездесущим, что его легко принять как данность и даже не думать\nо нем. Или, может быть, потому что до сих пор значительное ко­\nличество организаций не перешло на него.\nКогда я узнал об Agile, то не испытал особого восторга. У каскад­\nной модели, возможно, есть свои проблемы, но в моей компании\nне тратили много времени на написание проектной документа­\nции. У меня, разработчика, в основном был такой порядок: мне\nв устной форме передавали, какой функционал нужен к следую­\nщему релизу, назначали дату выпуска релиза и отпускали на все\nчетыре стороны колдовать. Это, конечно, могло приводить к лю­\nтому марафону на выживание, но зато я мог свободно выстраи­\nвать свои действия так, как хочу. Мне не нужно было часто давать\nотчеты и проводить анализ на ежедневных стендап-митингах,\nгде пришлось бы объяснять, над чем я работал вчера и что я буду\nделать сегодня. Если я решал потратить неделю на изобретение\nколеса, мне в этом никто не мешал, никто не осуждал мой выбор,\n\n267\nПослесловие\nпотому что все находились в блаженном неведении относительно\nтого, чем я занимался.\nБывший директор по разработке, который шефствовал над нами\nтогда, называл нас «писаками». Нам просто нравилось лупить\nпо клавиатуре на Диком Западе разработки ПО. Он был прав.\nИ в какой-то мере методы Agile, будучи чем-то новым, царили у нас\nв голове, склоняя нас к инакомыслию.\nAgile пришлось потрудиться, чтобы завоевать мое доверие.\nБыло бы самонадеянно полагать, что Agile — это стандарт де-факто\nв отрасли разработки ПО или что все разработчики принимают\nего с распростертыми объятиями. С другой стороны, было бы не­\nвежеством отрицать значимость Agile в мире разработки. Но что\nэто вообще значит? В чем, собственно, его значимость?\nСпросите разработчиков в какой-нибудь компании, работающей\nпо Agile, что такое этот самый Agile. И ответ, скорее всего, будет\nсовсем другим, чем ответ любого из тех, кто находится в должно­\nсти выше менеджера. Возможно, именно здесь эта книга наиболее\nпоучительна.\nРазработчики понимают Agile как методологию для оптимизации\nпроцесса разработки и для того, чтобы сделать разработку более\nпредсказуемой, практичной и управляемой. Вполне логично, что\nмы смотрим на него с этой точки зрения, потому что это та точка\nзрения, которая самым непосредственным образом влияет на нас.\nПо своему опыту могу сказать, что многие разработчики понятия\nне имеют о том, что менеджеры используют метрики и данные,\nполученные при работе по методам Agile. В некоторых компаниях\nкоманда разработчиков принимает участие во встречах, когда эти\n\n268\nПослесловие\nметрики обсуждаются. Однако во многих других компаниях разра­\nботчики остаются в неведении, что такие обсуждения вообще есть.\nБолее того, возможно, в каких-то компаниях таких обсуждений не\nпроводят в принципе.\nХотя я уже давно знал об этой особенности Agile, я все еще видел\nпользу в том, чтобы понять изначальный замысел и ход мышления\nоснователей методологии, о которой рассказывается в этой книге.\nБыло бы здорово и увидеть основателей Agile просто как людей.\nОни были не какими-то суперархитекторами разработки, не были\nрукоположены магистром Ордена инженерной мысли или избраны\nширокими народными массами разработчиков, чтобы передать\nканоны. Это были разработчики, наделенные опытом, обладавшие\nидеями, как облегчить себе жизнь и работу и избежать стрессов.\nИм надоело работать в командах, чья работа обречена на провал,\nпоэтому им хотелось создать условия, способствующие благо­\nполучию.\nТак можно сказать про большинство разработчиков, которых\nя встречал в каждой компании, где работал.\nЕсли бы встреча в Сноуберде прошла на 15 лет позже, могло быть\nи так, что я бы сам организовал эту встречу и изложил бы те са­\nмые идеи, и на встрече было бы много разработчиков, с которыми\nя работал лично. Но будучи лишь еще одной группой опытных\nразработчиков, они были склонны к полетам фантазии, которые\nне всегда приживались в корпоративной реальности. Может быть,\nвсе это работает, как задумано, в мире высококлассных консуль­\nтантов, наделенных властью выставлять требования и подчинять\nорганизации и руководство своим убеждениям, но большинство из\nнас — пехота, винтики в механизме фабрик по созданию программ.\nНас можно заменить, у нас мало рычагов влияния. Поэтому когда\nдело доходит до таких штуковин, как «Билль о правах», мы по­\n\n269\nПослесловие\nнимаем, что это идеал, но не то, что большинство из нас встречает\nв действительности.\nСегодня из сообществ в соцсетях я с радостью узнаю, что многие\nновые разработчики выходят за привычные рамки бакалавриата\ncomputer science и графика работы с девяти до пяти, что они со­\nтрудничают с другими разработчиками по всему миру, учатся,\nприменяют свои знания и опыт, чтобы обучать и вдохновлять\nновоиспеченных программистов.\nЯ весь в ожидании того, что следующая волна массовых изменений\nв методологии возникнет благодаря молодым звездам, которые\nсмогут собираться вместе с помощью цифровых технологий.\nТак что, пока мы ожидаем следующего большого события, которое\nпринесет нам новое поколение, давайте уделим минутку и пере­\nсмотрим то, где сейчас находимся и с чем приходится иметь дело.\nТеперь, когда вы прочитали эту книгу, у вас есть пища для размыш­\nлений. Рассмотрим Agile с тех сторон, о которых вы, возможно, зна­\nли, но о которых не особо задумывались. Подумайте о нем с точки\nзрения бизнес-аналитика, менеджера проекта или любого другого\nменеджера, непосредственно не связанного с разработкой, ответ­\nственного за планирование релизов или создание дорожных карт\nразвития продукта. Подумайте над тем, какую пользу им приносит\nвклад разработчиков в методы Agile. Поймите, каким образом ваш\nвклад в работу влияет не только на вашу рабочую нагрузку в тече­\nние следующих двух недель. Затем вернитесь и снова просмотрите\nкнигу. Если вы подойдете к ней с более широкой перспективы,\nдумаю, вы по крупицам соберете еще больше полезных идей.\nКак только вы это сделаете, попросите другого разработчика из\nкомпании прочитать эту книгу и провести такой же анализ. Може­\n\nПослесловие\nте дать почитать эту книгу даже кому-то… кто и вовсе не разработ­\nчик. Дайте ее кому-нибудь из тех, кто представляет вашу компанию\nна уровне бизнеса. Я почти гарантирую, что «Билль о правах» —\nэто что-то из области того, о чем они никогда и не думали. Жить\nстанет намного приятнее, если вы сможете до них донести, что эти\nправа так же неотъемлемы для Agile, как и метрики, которые они\nполучают при его использовании.\nМожно сказать, что Agile стал чем-то вроде религии в области раз­\nработки. Многие из нас считают его лучшей практикой. Почему?\nДля многих — потому что так сказали. Это стало традицией: так\nнадо. В понимании нового поколения корпоративных разработчи­\nков просто так заведено. Они, и даже многие «старички», вообще\nне знают суть Agile — какие у него изначальные цели, задачи и ме­\nтоды. Можно что угодно говорить о религии, но истинные привер­\nженцы — это те, кто старается понять то, во что они верят, помимо\nверы в то, о чем им говорят. Как и в случае с религией, нет единой\nобщепринятой версии, которая подходит каждому.\nПредставьте, насколько большое значение имеет интерес к истокам\nсвоей религии, понимание событий и идей, которые образовали то,\nчто впоследствии признали каноном. Когда речь заходит о про­\nфессиональной жизни, получается в точности то же самое. Делайте\nтак же везде, где это того стоит: проповедуйте такой подход там,\nгде имеете вес, восстановите первоначальную цель, цель, о кото­\nрой вы и практически все, с кем вы когда-либо работали, мечтали,\nговорили и, вероятно, от которой в итоге отказались. Сделать до­\nстижимым успех в разработке программного обес­печения. Сделать\nдостижимыми цели организации. Сделать процесс создания про­\nдукта лучше.\n\nРоберт Мартин\nЧистый Agile. Основы гибкости\nПеревел с английского И. Сигайлюк\n\nЗаведующая редакцией\nЮ. Сергиенко\n\nВедущий редактор\nК. Тульцева\n\nЛитературный редактор\nЕ. Тихонова\n\nХудожественный редактор\nВ. Мостипан\n\nКорректоры\nМ. Молчанова, Г. Шкатова\n\nВерстка\nЛ. Егорова\nИзготовлено в России. Изготовитель: ООО «Прогресс книга».\nМесто нахождения и фактический адрес: 194044, Россия, г. Санкт-Петербург,\nБ. Сампсониевский пр., д. 29А, пом. 52. Тел.: +78127037373.\nДата изготовления: 05.2020. Наименование: книжная продукция. Срок годности: не ограничен.\nНалоговая льгота — общероссийский классификатор продукции ОК 034-2014, 58.11.12 —\nКниги печатные профессиональные, технические и научные.\nИмпортер в Беларусь: ООО «ПИТЕР М», 220020, РБ, г. Минск, ул. Тимирязева, д. 121/3, к. 214, тел./факс: 208 80 01.\nПодписано в печать 27.04.20. Формат 70×100/16. Бумага офсетная. Усл. п. л. 28,380. Тираж 1000. Заказ 0000.\nОтпечатано в ОАО «Первая Образцовая типография». Филиал «Чеховский Печатный Двор».\n142300, Московская область, г. Чехов, ул. Полиграфистов, 1.\nСайт: www.chpk.ru. E-mail: marketing@chpk.ru\nФакс: 8(496) 726-54-10, телефон: (495) 988-63-87\n\nР. Мартин\nЧИСТЫЙ КОД: СОЗДАНИЕ,", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Заключение"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Заключение"}}
{"instruction": "Проаналізуй цей запит", "input": "АНАЛИЗ И РЕФАКТОРИНГ", "output": {"text": "Плохой код может работать, но он будет мешать развитию проекта и ком­\nпании-разработчика, требуя дополнительные ресурсы на поддержку\nи «укрощение». Каким же должен быть код? Эта книга полна реальных\nпримеров, позволяющих взглянуть на код с различных направлений:\nсверху вниз, снизу вверх и даже изнутри. Вы узнаете много нового о коде.\nБолее того, научитесь отличать хороший код от плохого, узнаете, как пи­\nсать хороший код и как преобразовать плохой код в хороший.\nР. Мартин\nЧИСТАЯ АРХИТЕКТУРА.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Заключение"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Заключение"}}
{"instruction": "Проаналізуй цей запит", "input": "ИСКУССТВО РАЗРАБОТКИ\nПРОГРАММНОГО ОБЕСПЕЧЕНИЯ", "output": {"text": "«Идеальный программист» и «Чистый код» — легендарные бестселлеры\nРоберта Мартина — рассказывают, как достичь высот профессионализма.\n«Чистая архитектура» продолжает эту тему, но не предлагает несколько\nвариантов в стиле «решай сам», а объясняет, что именно следует делать,\nпо какой причине и почему именно такое решение станет принципиаль­\nно важным для вашего успеха. Роберт Мартин дает прямые и лаконичные\nответы на ключевые вопросы архитектуры и дизайна. «Чистую архитек­\nтуру» обязаны прочитать разработчики всех уровней, системные анали­\nтики, архитекторы и каждый программист, который желает подняться по\nкарьерной лестнице или хотя бы повлиять на людей, которые занимаются\nданной работой. Все архитектуры подчиняются одним и тем же правилам!\nР. Мартин\nИДЕАЛЬНЫЙ ПРОГРАММИСТ.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Заключение"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Заключение"}}
{"instruction": "Проаналізуй цей запит", "input": "КАК СТАТЬ ПРОФЕССИОНАЛОМ\nРАЗРАБОТКИ ПО", "output": {"text": "Всех программистов, которые добиваются успеха в мире разработки ПО,\nотличает один общий признак: они больше всего заботятся о качестве\nсоздаваемого программного обеспечения. Это — основа для них. Потому\nчто они являются профессионалами своего дела. Книга насыщена прак­\nтическими советами в отношении всех аспектов программирования: от\nоценки проекта и написания кода до рефакторинга и тестирования. Эта\nкнига — больше, чем описание методов, она о профессиональном под­\nходе к процессу разработки.", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Заключение"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=sharing", "category": "Agile", "subcategory": "Заключение"}}
{"instruction": "Проаналізуй цей запит", "input": "Для чего данный навык: для эффективной коммуникации в команде и повышения эффективности в работе. Для того, чтоб задавать вопросы так, чтобы их было легко понять и просто ответить. Научиться отвечать так, чтобы ответы были понятны и полностью раскрывали вопрос, а еще дополняли информацией из смежных областей. Для простого общения, без дополнительных смыслов и подтекстов ", "output": {"text": "В любой организации на каждом этапе ее работы сотрудники общаются друг с другом, передают между собой важную информацию и получают задачи от руководства, дают обратную связь. В общем понимание это и есть коммуникация — процесс обмена информацией. Но в организации коммуникации разворачиваются в двух форматах, как межличностные и непосредственно как организационные.", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1c035Bz4R5JdgAs2JaRxnLYrBi-JVlJO58Qp5zoQwRWA/edit?tab=t.0", "category": "Effective Communication", "subcategory": "Active Listening"}}, "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1c035Bz4R5JdgAs2JaRxnLYrBi-JVlJO58Qp5zoQwRWA/edit?tab=t.0", "category": "Effective Communication", "subcategory": "Active Listening"}}
{"instruction": "Проаналізуй цей запит", "input": "Agile обеспечивает основу, в которую мы привносим другие навыки ради углубления понимания и использования Agile людьми Книга исследует каждую из смежных дисциплин, близких к Agile. Например, мы не знакомим agile-команды с сутью бизнес- и лайф-коу-чинга, потому что рассмотрение индивидуальной программы каждого человека отодвигает в тень цель команды — получение на постоянной", "output": {"text": "Read more in book", "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "chewing gum"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "chewing gum"}}
{"instruction": "Проаналізуй цей запит", "input": "soft skills - Levels", "output": {"text": "Посилання на документ: https://docs.google.com/spreadsheets/d/1Ys3M0_4YdRZLwuYyVUZzzsRRWEYmvUwSD9vECJ_hVgg/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/spreadsheets/d/1Ys3M0_4YdRZLwuYyVUZzzsRRWEYmvUwSD9vECJ_hVgg/edit?usp=drivesdk", "category": "soft skills - Levels"}}, "metadata": {"language": "ua", "source": "https://docs.google.com/spreadsheets/d/1Ys3M0_4YdRZLwuYyVUZzzsRRWEYmvUwSD9vECJ_hVgg/edit?usp=drivesdk", "category": "soft skills - Levels"}}
{"instruction": "Проаналізуй цей запит", "input": "Soft skills chapters", "output": {"text": "Посилання на документ: https://docs.google.com/spreadsheets/d/1psIU9c2cojqVQJri5nUZ-q86M9ys5_J4GRoXlmDIAHQ/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/spreadsheets/d/1psIU9c2cojqVQJri5nUZ-q86M9ys5_J4GRoXlmDIAHQ/edit?usp=drivesdk", "category": "Soft skills chapters"}}, "metadata": {"language": "ua", "source": "https://docs.google.com/spreadsheets/d/1psIU9c2cojqVQJri5nUZ-q86M9ys5_J4GRoXlmDIAHQ/edit?usp=drivesdk", "category": "Soft skills chapters"}}
{"instruction": "Проаналізуй цей запит", "input": "Issue_Problem solving - Level 1 - Personal Effectiveness", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1R7GSufS4sRHVnS6DJ_GRuKdsS8bhbuFYvgE9WNDy_2k/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1R7GSufS4sRHVnS6DJ_GRuKdsS8bhbuFYvgE9WNDy_2k/edit?usp=drivesdk", "category": "Issue_Problem solving - Level 1 - Personal Effectiveness"}}, "metadata": {"language": "en", "source": "https://docs.google.com/document/d/1R7GSufS4sRHVnS6DJ_GRuKdsS8bhbuFYvgE9WNDy_2k/edit?usp=drivesdk", "category": "Issue_Problem solving - Level 1 - Personal Effectiveness"}}
{"instruction": "Проаналізуй цей запит", "input": "Feedback skills - Level 2-3 - Effective Communication", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1RfbDQQ7by0lrha8exo5zqnSRJxYr7NKKDu9ClSTLzvQ/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1RfbDQQ7by0lrha8exo5zqnSRJxYr7NKKDu9ClSTLzvQ/edit?usp=drivesdk", "category": "Feedback skills - Level 2-3 - Effective Communication"}}, "metadata": {"language": "en", "source": "https://docs.google.com/document/d/1RfbDQQ7by0lrha8exo5zqnSRJxYr7NKKDu9ClSTLzvQ/edit?usp=drivesdk", "category": "Feedback skills - Level 2-3 - Effective Communication"}}
{"instruction": "Проаналізуй цей запит", "input": "Методології. Waterfall, Agile, Scrum, Kanban", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1jsYx3Nt7NlVJGJieubf21K12W73YQKjjw0tJP9zMMaM/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1jsYx3Nt7NlVJGJieubf21K12W73YQKjjw0tJP9zMMaM/edit?usp=drivesdk", "category": "Методології. Waterfall, Agile, Scrum, Kanban"}}, "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1jsYx3Nt7NlVJGJieubf21K12W73YQKjjw0tJP9zMMaM/edit?usp=drivesdk", "category": "Методології. Waterfall, Agile, Scrum, Kanban"}}
{"instruction": "Проаналізуй цей запит", "input": "Види ІТ-компаній. Моделі", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1jdJmtM86QsCvZFXor9LTwQnQVSnI6rikNx2Sx3bHUFI/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1jdJmtM86QsCvZFXor9LTwQnQVSnI6rikNx2Sx3bHUFI/edit?usp=drivesdk", "category": "Види ІТ-компаній. Моделі"}}, "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1jdJmtM86QsCvZFXor9LTwQnQVSnI6rikNx2Sx3bHUFI/edit?usp=drivesdk", "category": "Види ІТ-компаній. Моделі"}}
{"instruction": "Проаналізуй цей запит", "input": "Estimation skills - Business acumen", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/14pj5U8r7QqOfDPRHkxd1M50iJ7MZNjh76Dvsrk5u_TE/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/14pj5U8r7QqOfDPRHkxd1M50iJ7MZNjh76Dvsrk5u_TE/edit?usp=drivesdk", "category": "Estimation skills - Business acumen"}}, "metadata": {"language": "en", "source": "https://docs.google.com/document/d/14pj5U8r7QqOfDPRHkxd1M50iJ7MZNjh76Dvsrk5u_TE/edit?usp=drivesdk", "category": "Estimation skills - Business acumen"}}
{"instruction": "Проаналізуй цей запит", "input": "Meeting skills - Level 1 - Effective Communication", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1-x2Ah_8TULllUN5nJtfYay-zzAunYcQxrHPgjG05QlQ/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1-x2Ah_8TULllUN5nJtfYay-zzAunYcQxrHPgjG05QlQ/edit?usp=drivesdk", "category": "Meeting skills - Level 1 - Effective Communication"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1-x2Ah_8TULllUN5nJtfYay-zzAunYcQxrHPgjG05QlQ/edit?usp=drivesdk", "category": "Meeting skills - Level 1 - Effective Communication"}}
{"instruction": "Проаналізуй цей запит", "input": "Customer focus skills - Level 2- Business acumen", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1PNgM6AZwCkZWMQf9cmGPbPot-gTRKYbNT5p6_79a-08/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1PNgM6AZwCkZWMQf9cmGPbPot-gTRKYbNT5p6_79a-08/edit?usp=drivesdk", "category": "Customer focus skills - Level 2- Business acumen"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1PNgM6AZwCkZWMQf9cmGPbPot-gTRKYbNT5p6_79a-08/edit?usp=drivesdk", "category": "Customer focus skills - Level 2- Business acumen"}}
{"instruction": "Проаналізуй цей запит", "input": "Inspiration and engagement _ Motivation skills - Level 2 - Team work", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1HF1055FEGwF6F0ewKy9AhKWbSuy9bOcEpVoz0GW36tc/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1HF1055FEGwF6F0ewKy9AhKWbSuy9bOcEpVoz0GW36tc/edit?usp=drivesdk", "category": "Inspiration and engagement _ Motivation skills - Level 2 - Team work"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1HF1055FEGwF6F0ewKy9AhKWbSuy9bOcEpVoz0GW36tc/edit?usp=drivesdk", "category": "Inspiration and engagement _ Motivation skills - Level 2 - Team work"}}
{"instruction": "Проаналізуй цей запит", "input": "Inspiration and engagement _ Motivation skills - Level 1 - Team work", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1zB9Ti1SeWh7hX2cPXK9_kTrb0mpCVIEcKsTW7QktQWw/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1zB9Ti1SeWh7hX2cPXK9_kTrb0mpCVIEcKsTW7QktQWw/edit?usp=drivesdk", "category": "Inspiration and engagement _ Motivation skills - Level 1 - Team work"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1zB9Ti1SeWh7hX2cPXK9_kTrb0mpCVIEcKsTW7QktQWw/edit?usp=drivesdk", "category": "Inspiration and engagement _ Motivation skills - Level 1 - Team work"}}
{"instruction": "Проаналізуй цей запит", "input": "How to Run Effective Meetings_ The 10 Step Guide.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1hTed-xmMxBCdFcYYIpHJhUeruKbDhsKu/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1hTed-xmMxBCdFcYYIpHJhUeruKbDhsKu/view?usp=drivesdk", "category": "How to Run Effective Meetings_ The 10 Step Guide.pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1hTed-xmMxBCdFcYYIpHJhUeruKbDhsKu/view?usp=drivesdk", "category": "How to Run Effective Meetings_ The 10 Step Guide.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Growing & coaching  - Level 1 REDMINE- Team Work", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1pyFDU4SQSJqUPq28-Whbh7CS9tYCgLPeOqcdZUTTYq4/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1pyFDU4SQSJqUPq28-Whbh7CS9tYCgLPeOqcdZUTTYq4/edit?usp=drivesdk", "category": "Growing & coaching  - Level 1 REDMINE- Team Work"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1pyFDU4SQSJqUPq28-Whbh7CS9tYCgLPeOqcdZUTTYq4/edit?usp=drivesdk", "category": "Growing & coaching  - Level 1 REDMINE- Team Work"}}
{"instruction": "Проаналізуй цей запит", "input": "Менеджерский выбор_ как мы принимаем решения.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1qA4TFR-dF-gJX1rCCeaQtEIz2m1U0WFf/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1qA4TFR-dF-gJX1rCCeaQtEIz2m1U0WFf/view?usp=drivesdk", "category": "Менеджерский выбор_ как мы принимаем решения.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1qA4TFR-dF-gJX1rCCeaQtEIz2m1U0WFf/view?usp=drivesdk", "category": "Менеджерский выбор_ как мы принимаем решения.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Active listening - Effective Communication", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1yTXTnCP3NunKCeuO7O72bRC27OmaVviXnb3Sa2NkE0k/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1yTXTnCP3NunKCeuO7O72bRC27OmaVviXnb3Sa2NkE0k/edit?usp=drivesdk", "category": "Active listening - Effective Communication"}}, "metadata": {"language": "en", "source": "https://docs.google.com/document/d/1yTXTnCP3NunKCeuO7O72bRC27OmaVviXnb3Sa2NkE0k/edit?usp=drivesdk", "category": "Active listening - Effective Communication"}}
{"instruction": "Проаналізуй цей запит", "input": "Written communication - Effective Communication", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1phUBPfgClvCw3xLs-L7d_r5q3zz0QdJsO_8eEDCjvIk/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1phUBPfgClvCw3xLs-L7d_r5q3zz0QdJsO_8eEDCjvIk/edit?usp=drivesdk", "category": "Written communication - Effective Communication"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1phUBPfgClvCw3xLs-L7d_r5q3zz0QdJsO_8eEDCjvIk/edit?usp=drivesdk", "category": "Written communication - Effective Communication"}}
{"instruction": "Проаналізуй цей запит", "input": "Conflict management -Level 1  Team work", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1QCsyDQ9mI-tORZtVitc7k6aSKy_6IXmEplGuJeNS3yg/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1QCsyDQ9mI-tORZtVitc7k6aSKy_6IXmEplGuJeNS3yg/edit?usp=drivesdk", "category": "Conflict management -Level 1  Team work"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1QCsyDQ9mI-tORZtVitc7k6aSKy_6IXmEplGuJeNS3yg/edit?usp=drivesdk", "category": "Conflict management -Level 1  Team work"}}
{"instruction": "Проаналізуй цей запит", "input": "Cultural Differences skills - Effective Communication", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1U-r-_au__imtHcqvsCTJg_daVtZCGILQ-NHqdGCHAbU/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1U-r-_au__imtHcqvsCTJg_daVtZCGILQ-NHqdGCHAbU/edit?usp=drivesdk", "category": "Cultural Differences skills - Effective Communication"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1U-r-_au__imtHcqvsCTJg_daVtZCGILQ-NHqdGCHAbU/edit?usp=drivesdk", "category": "Cultural Differences skills - Effective Communication"}}
{"instruction": "Проаналізуй цей запит", "input": "Team time management - Business acumen", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1uo_-QK3IDkwVGasYC9JayqQxzO06zDUarVV7hP1fI7U/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1uo_-QK3IDkwVGasYC9JayqQxzO06zDUarVV7hP1fI7U/edit?usp=drivesdk", "category": "Team time management - Business acumen"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1uo_-QK3IDkwVGasYC9JayqQxzO06zDUarVV7hP1fI7U/edit?usp=drivesdk", "category": "Team time management - Business acumen"}}
{"instruction": "Проаналізуй цей запит", "input": "Decision making - Level 3 - Personal Effectiveness", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1lWWBtdPurTb-zzl0aPk3gvLVbE80anxkWmahlnVK2qQ/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1lWWBtdPurTb-zzl0aPk3gvLVbE80anxkWmahlnVK2qQ/edit?usp=drivesdk", "category": "Decision making - Level 3 - Personal Effectiveness"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1lWWBtdPurTb-zzl0aPk3gvLVbE80anxkWmahlnVK2qQ/edit?usp=drivesdk", "category": "Decision making - Level 3 - Personal Effectiveness"}}
{"instruction": "Проаналізуй цей запит", "input": "Decision making - Level 1 -  Personal Effectiveness", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1GCJ9EjzBOuKaH9x7a_3Rp_yk0a_KWC-guJARtb2ao9Y/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1GCJ9EjzBOuKaH9x7a_3Rp_yk0a_KWC-guJARtb2ao9Y/edit?usp=drivesdk", "category": "Decision making - Level 1 -  Personal Effectiveness"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1GCJ9EjzBOuKaH9x7a_3Rp_yk0a_KWC-guJARtb2ao9Y/edit?usp=drivesdk", "category": "Decision making - Level 1 -  Personal Effectiveness"}}
{"instruction": "Проаналізуй цей запит", "input": "Delegating and control - Level 2 -  Team work", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/19U8nqIU-yc7QXVWSQLEhqrbCnQaBMvcXgNKDxc5qqyA/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/19U8nqIU-yc7QXVWSQLEhqrbCnQaBMvcXgNKDxc5qqyA/edit?usp=drivesdk", "category": "Delegating and control - Level 2 -  Team work"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/19U8nqIU-yc7QXVWSQLEhqrbCnQaBMvcXgNKDxc5qqyA/edit?usp=drivesdk", "category": "Delegating and control - Level 2 -  Team work"}}
{"instruction": "Проаналізуй цей запит", "input": "Delegating and control - Level 1 -  Team work", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1Px49cUTtUR8eMsQoTFqSK4aTydxH8nZwZGfFofcMw4A/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1Px49cUTtUR8eMsQoTFqSK4aTydxH8nZwZGfFofcMw4A/edit?usp=drivesdk", "category": "Delegating and control - Level 1 -  Team work"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1Px49cUTtUR8eMsQoTFqSK4aTydxH8nZwZGfFofcMw4A/edit?usp=drivesdk", "category": "Delegating and control - Level 1 -  Team work"}}
{"instruction": "Проаналізуй цей запит", "input": "Leading changes -Level 1- Business acumen", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/18O25LaFz-PuEBrHKzt1nyLBpcwi3Y47koCdfhwi4cmg/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/18O25LaFz-PuEBrHKzt1nyLBpcwi3Y47koCdfhwi4cmg/edit?usp=drivesdk", "category": "Leading changes -Level 1- Business acumen"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/18O25LaFz-PuEBrHKzt1nyLBpcwi3Y47koCdfhwi4cmg/edit?usp=drivesdk", "category": "Leading changes -Level 1- Business acumen"}}
{"instruction": "Проаналізуй цей запит", "input": "Leading changes -Level 3- Business acumen", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1q2j1Z8dXrMF5FxXA7IK6Cvbh2_6ekP_CK6dDJbAlOdY/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1q2j1Z8dXrMF5FxXA7IK6Cvbh2_6ekP_CK6dDJbAlOdY/edit?usp=drivesdk", "category": "Leading changes -Level 3- Business acumen"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1q2j1Z8dXrMF5FxXA7IK6Cvbh2_6ekP_CK6dDJbAlOdY/edit?usp=drivesdk", "category": "Leading changes -Level 3- Business acumen"}}
{"instruction": "Проаналізуй цей запит", "input": "Decision making - Level 2 -  Personal Effectiveness", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/17wvBgndH2KDhl6BJy-XftxT7sWgNmMSmNyNuO5uR400/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/17wvBgndH2KDhl6BJy-XftxT7sWgNmMSmNyNuO5uR400/edit?usp=drivesdk", "category": "Decision making - Level 2 -  Personal Effectiveness"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/17wvBgndH2KDhl6BJy-XftxT7sWgNmMSmNyNuO5uR400/edit?usp=drivesdk", "category": "Decision making - Level 2 -  Personal Effectiveness"}}
{"instruction": "Проаналізуй цей запит", "input": "Заметки менеджера_ проблема последней мили _ True Engineering.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1_okvl-WaD0U2beeKfa8BMQUncXjd7hVe/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1_okvl-WaD0U2beeKfa8BMQUncXjd7hVe/view?usp=drivesdk", "category": "Заметки менеджера_ проблема последней мили _ True Engineering.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1_okvl-WaD0U2beeKfa8BMQUncXjd7hVe/view?usp=drivesdk", "category": "Заметки менеджера_ проблема последней мили _ True Engineering.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Growing & coaching - Level 1 - Team work", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1caIX0dSHm6Iu-AYehL6IQYGbo8wjeVAfXOUBp6L7HB4/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1caIX0dSHm6Iu-AYehL6IQYGbo8wjeVAfXOUBp6L7HB4/edit?usp=drivesdk", "category": "Growing & coaching - Level 1 - Team work"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1caIX0dSHm6Iu-AYehL6IQYGbo8wjeVAfXOUBp6L7HB4/edit?usp=drivesdk", "category": "Growing & coaching - Level 1 - Team work"}}
{"instruction": "Проаналізуй цей запит", "input": "Growing & coaching - Level 2 - Team work", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1zpXtKGKfA9Z3RjvzA7Li92pFplF5yef6fTAhMveODEM/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1zpXtKGKfA9Z3RjvzA7Li92pFplF5yef6fTAhMveODEM/edit?usp=drivesdk", "category": "Growing & coaching - Level 2 - Team work"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1zpXtKGKfA9Z3RjvzA7Li92pFplF5yef6fTAhMveODEM/edit?usp=drivesdk", "category": "Growing & coaching - Level 2 - Team work"}}
{"instruction": "Проаналізуй цей запит", "input": "Conflict management -Level 2  Team work", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1BWKP9OineazCcZS9-3C1aH8cIbF2zDFLKOfz063pNEw/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1BWKP9OineazCcZS9-3C1aH8cIbF2zDFLKOfz063pNEw/edit?usp=drivesdk", "category": "Conflict management -Level 2  Team work"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1BWKP9OineazCcZS9-3C1aH8cIbF2zDFLKOfz063pNEw/edit?usp=drivesdk", "category": "Conflict management -Level 2  Team work"}}
{"instruction": "Проаналізуй цей запит", "input": "Conflict management -Level 3  Team work", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1ZL7V26pxs2f9OCDC6TQLqFz9jFY-FSP2RlrpZlYmUGY/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1ZL7V26pxs2f9OCDC6TQLqFz9jFY-FSP2RlrpZlYmUGY/edit?usp=drivesdk", "category": "Conflict management -Level 3  Team work"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1ZL7V26pxs2f9OCDC6TQLqFz9jFY-FSP2RlrpZlYmUGY/edit?usp=drivesdk", "category": "Conflict management -Level 3  Team work"}}
{"instruction": "Проаналізуй цей запит", "input": "Inspiration and engagement _ Motivation skills - Level 3 - Team work", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1eDlrd4XvwOLlYSNL99KZJg36802C0gE9i2pcsZasKFU/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1eDlrd4XvwOLlYSNL99KZJg36802C0gE9i2pcsZasKFU/edit?usp=drivesdk", "category": "Inspiration and engagement _ Motivation skills - Level 3 - Team work"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1eDlrd4XvwOLlYSNL99KZJg36802C0gE9i2pcsZasKFU/edit?usp=drivesdk", "category": "Inspiration and engagement _ Motivation skills - Level 3 - Team work"}}
{"instruction": "Проаналізуй цей запит", "input": "Personal time management - Personal Effectiveness", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/13uycb4FILWpkrodobXIJ5mHzUJDgRnzF3zGXY0Iroxk/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/13uycb4FILWpkrodobXIJ5mHzUJDgRnzF3zGXY0Iroxk/edit?usp=drivesdk", "category": "Personal time management - Personal Effectiveness"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/13uycb4FILWpkrodobXIJ5mHzUJDgRnzF3zGXY0Iroxk/edit?usp=drivesdk", "category": "Personal time management - Personal Effectiveness"}}
{"instruction": "Проаналізуй цей запит", "input": "Team building _ forming  skills - Level 2- Team Work", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/13_X9nry0ojLSgi6MiM1M41dRuec7SNutbdip1cHPrT0/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/13_X9nry0ojLSgi6MiM1M41dRuec7SNutbdip1cHPrT0/edit?usp=drivesdk", "category": "Team building _ forming  skills - Level 2- Team Work"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/13_X9nry0ojLSgi6MiM1M41dRuec7SNutbdip1cHPrT0/edit?usp=drivesdk", "category": "Team building _ forming  skills - Level 2- Team Work"}}
{"instruction": "Проаналізуй цей запит", "input": "Team Building skills - Level 1 - Team Work ", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1Ok6mzUC0jezryqkK3TE3p6rs03OaXBpOyvw5PxyYv6U/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1Ok6mzUC0jezryqkK3TE3p6rs03OaXBpOyvw5PxyYv6U/edit?usp=drivesdk", "category": "Team Building skills - Level 1 - Team Work "}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1Ok6mzUC0jezryqkK3TE3p6rs03OaXBpOyvw5PxyYv6U/edit?usp=drivesdk", "category": "Team Building skills - Level 1 - Team Work "}}
{"instruction": "Проаналізуй цей запит", "input": "Leading changes -Level 2- Business acumen", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1WA2UD8VD4HwkgF56HMYaUx1o2-k6vIZFs7KuzcyR4cA/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1WA2UD8VD4HwkgF56HMYaUx1o2-k6vIZFs7KuzcyR4cA/edit?usp=drivesdk", "category": "Leading changes -Level 2- Business acumen"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1WA2UD8VD4HwkgF56HMYaUx1o2-k6vIZFs7KuzcyR4cA/edit?usp=drivesdk", "category": "Leading changes -Level 2- Business acumen"}}
{"instruction": "Проаналізуй цей запит", "input": "Feedback - Level 1 - Effective Communication", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1M8JSyIN2KsZlkSaVdhRJmEH_ZBU3AYotvotUVAl63to/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1M8JSyIN2KsZlkSaVdhRJmEH_ZBU3AYotvotUVAl63to/edit?usp=drivesdk", "category": "Feedback - Level 1 - Effective Communication"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1M8JSyIN2KsZlkSaVdhRJmEH_ZBU3AYotvotUVAl63to/edit?usp=drivesdk", "category": "Feedback - Level 1 - Effective Communication"}}
{"instruction": "Проаналізуй цей запит", "input": "Feedback 360 - как правильно заполнять", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/109heKabS6Tg2Qzm3cXtwvup3hLdzRMpt-8Qg8VE5MPM/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/109heKabS6Tg2Qzm3cXtwvup3hLdzRMpt-8Qg8VE5MPM/edit?usp=drivesdk", "category": "Feedback 360 - как правильно заполнять"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/109heKabS6Tg2Qzm3cXtwvup3hLdzRMpt-8Qg8VE5MPM/edit?usp=drivesdk", "category": "Feedback 360 - как правильно заполнять"}}
{"instruction": "Проаналізуй цей запит", "input": "Что такое One2one митинг", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1BOp0ujU8ICh8z-i9zBsWgzKMA79JW-lamTxAQn5wHgI/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1BOp0ujU8ICh8z-i9zBsWgzKMA79JW-lamTxAQn5wHgI/edit?usp=drivesdk", "category": "Что такое One2one митинг"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1BOp0ujU8ICh8z-i9zBsWgzKMA79JW-lamTxAQn5wHgI/edit?usp=drivesdk", "category": "Что такое One2one митинг"}}
{"instruction": "Проаналізуй цей запит", "input": "Empathy - Level 2 - Personal Effectiveness", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1EL-DiCx2LlrsH6rCGwQqb3gfwUfrs2PRJS_rWkQd8kE/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1EL-DiCx2LlrsH6rCGwQqb3gfwUfrs2PRJS_rWkQd8kE/edit?usp=drivesdk", "category": "Empathy - Level 2 - Personal Effectiveness"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1EL-DiCx2LlrsH6rCGwQqb3gfwUfrs2PRJS_rWkQd8kE/edit?usp=drivesdk", "category": "Empathy - Level 2 - Personal Effectiveness"}}
{"instruction": "Проаналізуй цей запит", "input": "Leadership skills - Personal Effectiveness", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1aBCfNEZ17meKm8iOATWdWtUTI0yGWkTX6vWkfYT0KD8/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1aBCfNEZ17meKm8iOATWdWtUTI0yGWkTX6vWkfYT0KD8/edit?usp=drivesdk", "category": "Leadership skills - Personal Effectiveness"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1aBCfNEZ17meKm8iOATWdWtUTI0yGWkTX6vWkfYT0KD8/edit?usp=drivesdk", "category": "Leadership skills - Personal Effectiveness"}}
{"instruction": "Проаналізуй цей запит", "input": "Empathy - Level 1 - Personal Effectiveness", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1-c4Mxh67Kb4r0cCKFlkD12pUE0HH1NF42OWzL8gMe1g/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1-c4Mxh67Kb4r0cCKFlkD12pUE0HH1NF42OWzL8gMe1g/edit?usp=drivesdk", "category": "Empathy - Level 1 - Personal Effectiveness"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1-c4Mxh67Kb4r0cCKFlkD12pUE0HH1NF42OWzL8gMe1g/edit?usp=drivesdk", "category": "Empathy - Level 1 - Personal Effectiveness"}}
{"instruction": "Проаналізуй цей запит", "input": "Decision making - Personal Effectiveness", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1ofCjWEjjzEJY6fRheQoLs4Tn7BqYIc-ziUlUanLZPns/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1ofCjWEjjzEJY6fRheQoLs4Tn7BqYIc-ziUlUanLZPns/edit?usp=drivesdk", "category": "Decision making - Personal Effectiveness"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1ofCjWEjjzEJY6fRheQoLs4Tn7BqYIc-ziUlUanLZPns/edit?usp=drivesdk", "category": "Decision making - Personal Effectiveness"}}
{"instruction": "Проаналізуй цей запит", "input": "Всё, что вам нужно знать о технике Pomodoro - Лайфхакер.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1lEno1s7lGSq83lpiqXJRABR1SWkkBKl6/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1lEno1s7lGSq83lpiqXJRABR1SWkkBKl6/view?usp=drivesdk", "category": "Всё, что вам нужно знать о технике Pomodoro - Лайфхакер.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1lEno1s7lGSq83lpiqXJRABR1SWkkBKl6/view?usp=drivesdk", "category": "Всё, что вам нужно знать о технике Pomodoro - Лайфхакер.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Как все успеть_ методики тайм-менеджмента — управляй временем эффективнее.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1Blp96pJSYGsWOPJv3hsdosSxQiKdjoo7/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1Blp96pJSYGsWOPJv3hsdosSxQiKdjoo7/view?usp=drivesdk", "category": "Как все успеть_ методики тайм-менеджмента — управляй временем эффективнее.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1Blp96pJSYGsWOPJv3hsdosSxQiKdjoo7/view?usp=drivesdk", "category": "Как все успеть_ методики тайм-менеджмента — управляй временем эффективнее.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Метод «Съешь лягушку!» Брайана Трейси_ разбираем на гифках _ skillbox media.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1AKTS-7tNwY7dB2d-tCOOPkQpzsTn1N_C/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1AKTS-7tNwY7dB2d-tCOOPkQpzsTn1N_C/view?usp=drivesdk", "category": "Метод «Съешь лягушку!» Брайана Трейси_ разбираем на гифках _ skillbox media.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1AKTS-7tNwY7dB2d-tCOOPkQpzsTn1N_C/view?usp=drivesdk", "category": "Метод «Съешь лягушку!» Брайана Трейси_ разбираем на гифках _ skillbox media.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "7 правил делового общения в мессенджерах.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drivesdk", "category": "7 правил делового общения в мессенджерах.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drivesdk", "category": "7 правил делового общения в мессенджерах.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "10 правил написания деловых электронных сообщений.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1F69aQBgPhbDom658IIf4X3S9JwdocghL/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1F69aQBgPhbDom658IIf4X3S9JwdocghL/view?usp=drivesdk", "category": "10 правил написания деловых электронных сообщений.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1F69aQBgPhbDom658IIf4X3S9JwdocghL/view?usp=drivesdk", "category": "10 правил написания деловых электронных сообщений.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Negotiations - Effective Communication", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1GL8UjdpKNlsE3pdokWo3prgd-jJ2f0wuyWfsle0Hpv4/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1GL8UjdpKNlsE3pdokWo3prgd-jJ2f0wuyWfsle0Hpv4/edit?usp=drivesdk", "category": "Negotiations - Effective Communication"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1GL8UjdpKNlsE3pdokWo3prgd-jJ2f0wuyWfsle0Hpv4/edit?usp=drivesdk", "category": "Negotiations - Effective Communication"}}
{"instruction": "Проаналізуй цей запит", "input": "Meeting skills - Level 2 - Effective Communication", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1S4YCCPMBCbrbCWTSorS9EAewzau5syNDkhTCdQuhf8s/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1S4YCCPMBCbrbCWTSorS9EAewzau5syNDkhTCdQuhf8s/edit?usp=drivesdk", "category": "Meeting skills - Level 2 - Effective Communication"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1S4YCCPMBCbrbCWTSorS9EAewzau5syNDkhTCdQuhf8s/edit?usp=drivesdk", "category": "Meeting skills - Level 2 - Effective Communication"}}
{"instruction": "Проаналізуй цей запит", "input": "Presentation - Effective Communication", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1VrYqBqS1kTtTDpbSm4Hav0LyIzxtlDYwj0s-s9I67p0/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1VrYqBqS1kTtTDpbSm4Hav0LyIzxtlDYwj0s-s9I67p0/edit?usp=drivesdk", "category": "Presentation - Effective Communication"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1VrYqBqS1kTtTDpbSm4Hav0LyIzxtlDYwj0s-s9I67p0/edit?usp=drivesdk", "category": "Presentation - Effective Communication"}}
{"instruction": "Проаналізуй цей запит", "input": "Cultural Difference skills - level 2 - Effective Communication", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1HSAEi4bKnR_C4dDXBhlQP_ZjN93dJwm5fDQHlH6Twaw/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1HSAEi4bKnR_C4dDXBhlQP_ZjN93dJwm5fDQHlH6Twaw/edit?usp=drivesdk", "category": "Cultural Difference skills - level 2 - Effective Communication"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1HSAEi4bKnR_C4dDXBhlQP_ZjN93dJwm5fDQHlH6Twaw/edit?usp=drivesdk", "category": "Cultural Difference skills - level 2 - Effective Communication"}}
{"instruction": "Проаналізуй цей запит", "input": "Копия Leading changes -Level 1- Business acumen", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1f2j2ZxaKmbZtqp0UcoGxQzUyUG6FJ5ddDtF3LttM9CY/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1f2j2ZxaKmbZtqp0UcoGxQzUyUG6FJ5ddDtF3LttM9CY/edit?usp=drivesdk", "category": "Копия Leading changes -Level 1- Business acumen"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1f2j2ZxaKmbZtqp0UcoGxQzUyUG6FJ5ddDtF3LttM9CY/edit?usp=drivesdk", "category": "Копия Leading changes -Level 1- Business acumen"}}
{"instruction": "Проаналізуй цей запит", "input": "Communication skills - Effective Communication", "output": {"text": "Посилання на документ: https://docs.google.com/document/d/1c035Bz4R5JdgAs2JaRxnLYrBi-JVlJO58Qp5zoQwRWA/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1c035Bz4R5JdgAs2JaRxnLYrBi-JVlJO58Qp5zoQwRWA/edit?usp=drivesdk", "category": "Communication skills - Effective Communication"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/document/d/1c035Bz4R5JdgAs2JaRxnLYrBi-JVlJO58Qp5zoQwRWA/edit?usp=drivesdk", "category": "Communication skills - Effective Communication"}}
{"instruction": "Проаналізуй цей запит", "input": "A Manager’s Guide to Coaching-страницы-1,30-40.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1ToN4i_ECB6pLFtDN56fIoJFvUrd9yNbJ/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1ToN4i_ECB6pLFtDN56fIoJFvUrd9yNbJ/view?usp=drivesdk", "category": "A Manager’s Guide to Coaching-страницы-1,30-40.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1ToN4i_ECB6pLFtDN56fIoJFvUrd9yNbJ/view?usp=drivesdk", "category": "A Manager’s Guide to Coaching-страницы-1,30-40.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "a manager guide to Coaching .pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1F3VXdly65QiwBuqQ-OV1l3xLFv4SNu6_/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1F3VXdly65QiwBuqQ-OV1l3xLFv4SNu6_/view?usp=drivesdk", "category": "a manager guide to Coaching .pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1F3VXdly65QiwBuqQ-OV1l3xLFv4SNu6_/view?usp=drivesdk", "category": "a manager guide to Coaching .pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Meyer_Karta-kulturnyh-razlichiy-Kak-lyudi-dumayut-rukovodyat-i-dobivayutsya-celey-v-mezhdunarodnoy-srede.J0MDSQ.569422.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1yUQ4osC7y0OHxr9vf2PLW5ByVoCi4FAa/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1yUQ4osC7y0OHxr9vf2PLW5ByVoCi4FAa/view?usp=drivesdk", "category": "Meyer_Karta-kulturnyh-razlichiy-Kak-lyudi-dumayut-rukovodyat-i-dobivayutsya-celey-v-mezhdunarodnoy-srede.J0MDSQ.569422.pdf"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1yUQ4osC7y0OHxr9vf2PLW5ByVoCi4FAa/view?usp=drivesdk", "category": "Meyer_Karta-kulturnyh-razlichiy-Kak-lyudi-dumayut-rukovodyat-i-dobivayutsya-celey-v-mezhdunarodnoy-srede.J0MDSQ.569422.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Books – 2022", "output": {"text": "Посилання на документ: https://docs.google.com/spreadsheets/d/1cLfUUSQ3hsbK_mmQwzMw5kdMcc4ve7AapfyfAl62iZ4/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/spreadsheets/d/1cLfUUSQ3hsbK_mmQwzMw5kdMcc4ve7AapfyfAl62iZ4/edit?usp=drivesdk", "category": "Books – 2022"}}, "metadata": {"language": "en", "source": "https://docs.google.com/spreadsheets/d/1cLfUUSQ3hsbK_mmQwzMw5kdMcc4ve7AapfyfAl62iZ4/edit?usp=drivesdk", "category": "Books – 2022"}}
{"instruction": "Проаналізуй цей запит", "input": "english-for-tech_1.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/11MYEMyt8gzVc2Wl2r3uwJhdeiXkeY5iB/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/11MYEMyt8gzVc2Wl2r3uwJhdeiXkeY5iB/view?usp=drivesdk", "category": "english-for-tech_1.pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/11MYEMyt8gzVc2Wl2r3uwJhdeiXkeY5iB/view?usp=drivesdk", "category": "english-for-tech_1.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Копия Ox_English_for_Meetings.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1m6DhEI3OnlJYZdCWSwEAUs0_8i35mQg_/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1m6DhEI3OnlJYZdCWSwEAUs0_8i35mQg_/view?usp=drivesdk", "category": "Копия Ox_English_for_Meetings.pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1m6DhEI3OnlJYZdCWSwEAUs0_8i35mQg_/view?usp=drivesdk", "category": "Копия Ox_English_for_Meetings.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "100 Most Useful Productivity Hacks.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1iy5kWDCaiDnw5tAdFMYS2MUuv72mJR2H/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1iy5kWDCaiDnw5tAdFMYS2MUuv72mJR2H/view?usp=drivesdk", "category": "100 Most Useful Productivity Hacks.pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1iy5kWDCaiDnw5tAdFMYS2MUuv72mJR2H/view?usp=drivesdk", "category": "100 Most Useful Productivity Hacks.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Stress Management Workbook.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1sfhascFDc_BIk19adbZWJ5kWYvI4sUUE/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1sfhascFDc_BIk19adbZWJ5kWYvI4sUUE/view?usp=drivesdk", "category": "Stress Management Workbook.pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1sfhascFDc_BIk19adbZWJ5kWYvI4sUUE/view?usp=drivesdk", "category": "Stress Management Workbook.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "A Manager’s Guide to Coaching.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1ufgzpPU6EsvFVfvUE4t14A9AaW39QNNc/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1ufgzpPU6EsvFVfvUE4t14A9AaW39QNNc/view?usp=drivesdk", "category": "A Manager’s Guide to Coaching.pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1ufgzpPU6EsvFVfvUE4t14A9AaW39QNNc/view?usp=drivesdk", "category": "A Manager’s Guide to Coaching.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Копия The culture map.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/18GcXRNBrqd43_wFTAlCYxI_EmSa9QLn1/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/18GcXRNBrqd43_wFTAlCYxI_EmSa9QLn1/view?usp=drivesdk", "category": "Копия The culture map.pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/18GcXRNBrqd43_wFTAlCYxI_EmSa9QLn1/view?usp=drivesdk", "category": "Копия The culture map.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "THE_80-20_PRINCIPLE_1999_Richard_Koch (1).pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1hYYdt9nuZrmQA76BhvygS2mn_JUVGHLd/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1hYYdt9nuZrmQA76BhvygS2mn_JUVGHLd/view?usp=drivesdk", "category": "THE_80-20_PRINCIPLE_1999_Richard_Koch (1).pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1hYYdt9nuZrmQA76BhvygS2mn_JUVGHLd/view?usp=drivesdk", "category": "THE_80-20_PRINCIPLE_1999_Richard_Koch (1).pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Alex_Yu_System_Design_Interview_An_Insider_s_Guide_Independently.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=drivesdk", "category": "Alex_Yu_System_Design_Interview_An_Insider_s_Guide_Independently.pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1imSknPMQf7uEORLWPCgs2KE-rVWh1DKS/view?usp=drivesdk", "category": "Alex_Yu_System_Design_Interview_An_Insider_s_Guide_Independently.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Ben-Shahar_Tal_-_The_Pursuit_of_Perfect.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1jGlM6OhG94n__oWzX106v1JTeaQxFr6b/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1jGlM6OhG94n__oWzX106v1JTeaQxFr6b/view?usp=drivesdk", "category": "Ben-Shahar_Tal_-_The_Pursuit_of_Perfect.pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1jGlM6OhG94n__oWzX106v1JTeaQxFr6b/view?usp=drivesdk", "category": "Ben-Shahar_Tal_-_The_Pursuit_of_Perfect.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Хориков_В_Принципы_юнит_тестирования_Для_профессионалов_2021.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1zcHTwaGuyCU5FHrAP8cOIQBVDqTXHv5L/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1zcHTwaGuyCU5FHrAP8cOIQBVDqTXHv5L/view?usp=drivesdk", "category": "Хориков_В_Принципы_юнит_тестирования_Для_профессионалов_2021.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1zcHTwaGuyCU5FHrAP8cOIQBVDqTXHv5L/view?usp=drivesdk", "category": "Хориков_В_Принципы_юнит_тестирования_Для_профессионалов_2021.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Святослав_Куликов_Тестирование_ПО@bzd_channel.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1SXFSWE7hkXKnmTZBkko16J_PyIx8hCao/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1SXFSWE7hkXKnmTZBkko16J_PyIx8hCao/view?usp=drivesdk", "category": "Святослав_Куликов_Тестирование_ПО@bzd_channel.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1SXFSWE7hkXKnmTZBkko16J_PyIx8hCao/view?usp=drivesdk", "category": "Святослав_Куликов_Тестирование_ПО@bzd_channel.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Лутц М. - Изучаем Python, том 2 - 2020.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1OSZLL-MkTTK3mW_NO2d-br5b7uIkr_Qn/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1OSZLL-MkTTK3mW_NO2d-br5b7uIkr_Qn/view?usp=drivesdk", "category": "Лутц М. - Изучаем Python, том 2 - 2020.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1OSZLL-MkTTK3mW_NO2d-br5b7uIkr_Qn/view?usp=drivesdk", "category": "Лутц М. - Изучаем Python, том 2 - 2020.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Программист-прагматик.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1Xi_RHeJyg6pLVDzLf85kDvttcI6s0OxV/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1Xi_RHeJyg6pLVDzLf85kDvttcI6s0OxV/view?usp=drivesdk", "category": "Программист-прагматик.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1Xi_RHeJyg6pLVDzLf85kDvttcI6s0OxV/view?usp=drivesdk", "category": "Программист-прагматик.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Лутц_М_Изучаем_Python,_том_1,_5_е_издание_2019.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1OLQ1chi7uQZcUD1u4ksHlxyjOCd6WiU6/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1OLQ1chi7uQZcUD1u4ksHlxyjOCd6WiU6/view?usp=drivesdk", "category": "Лутц_М_Изучаем_Python,_том_1,_5_е_издание_2019.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1OLQ1chi7uQZcUD1u4ksHlxyjOCd6WiU6/view?usp=drivesdk", "category": "Лутц_М_Изучаем_Python,_том_1,_5_е_издание_2019.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Head_First_Patterny_proektirovania.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/117W_equISzjRFrklFaQwCqWidR6Qa8i_/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/117W_equISzjRFrklFaQwCqWidR6Qa8i_/view?usp=drivesdk", "category": "Head_First_Patterny_proektirovania.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/117W_equISzjRFrklFaQwCqWidR6Qa8i_/view?usp=drivesdk", "category": "Head_First_Patterny_proektirovania.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Безопасно_by_design.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1C_FJ-BbxZJz417qK7I5xvJ_wBRmW8BVc/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1C_FJ-BbxZJz417qK7I5xvJ_wBRmW8BVc/view?usp=drivesdk", "category": "Безопасно_by_design.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1C_FJ-BbxZJz417qK7I5xvJ_wBRmW8BVc/view?usp=drivesdk", "category": "Безопасно_by_design.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Горбунов. Типографика и вёрстка.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1zH85Eq0jVmuMsjM2eNQRMlCLDCI0m_31/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1zH85Eq0jVmuMsjM2eNQRMlCLDCI0m_31/view?usp=drivesdk", "category": "Горбунов. Типографика и вёрстка.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1zH85Eq0jVmuMsjM2eNQRMlCLDCI0m_31/view?usp=drivesdk", "category": "Горбунов. Типографика и вёрстка.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Усов_В_Swift_Разработка_приложений_под_iOS_на_основе_фреймворка.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1HN8Qolv3PQzHKqMJknHEVJXqrSniAG6G/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1HN8Qolv3PQzHKqMJknHEVJXqrSniAG6G/view?usp=drivesdk", "category": "Усов_В_Swift_Разработка_приложений_под_iOS_на_основе_фреймворка.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1HN8Qolv3PQzHKqMJknHEVJXqrSniAG6G/view?usp=drivesdk", "category": "Усов_В_Swift_Разработка_приложений_под_iOS_на_основе_фреймворка.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Martin_Chistaya-arhitektura.589541.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1ygi6fjhlNBq8ehpxsShyfoeUfJdmanl-/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1ygi6fjhlNBq8ehpxsShyfoeUfJdmanl-/view?usp=drivesdk", "category": "Martin_Chistaya-arhitektura.589541.pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1ygi6fjhlNBq8ehpxsShyfoeUfJdmanl-/view?usp=drivesdk", "category": "Martin_Chistaya-arhitektura.589541.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Git_Практическое_руководство_Управление_и_контроль_версий_в_разработке.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1p7ElxzYFKmotBWpiV_kgqnK1Y_eWP7BF/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1p7ElxzYFKmotBWpiV_kgqnK1Y_eWP7BF/view?usp=drivesdk", "category": "Git_Практическое_руководство_Управление_и_контроль_версий_в_разработке.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1p7ElxzYFKmotBWpiV_kgqnK1Y_eWP7BF/view?usp=drivesdk", "category": "Git_Практическое_руководство_Управление_и_контроль_версий_в_разработке.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Изучаем_React_Практическое_руководство.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1nDm5vOEDBaxorzW24SwYCfB2L_CTPKS1/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1nDm5vOEDBaxorzW24SwYCfB2L_CTPKS1/view?usp=drivesdk", "category": "Изучаем_React_Практическое_руководство.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1nDm5vOEDBaxorzW24SwYCfB2L_CTPKS1/view?usp=drivesdk", "category": "Изучаем_React_Практическое_руководство.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Аллен_Б_Дауни_Основы_Python_Научитесь_думать_как_программист_Манн.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1VX7GyHACKCxQ7qD2yQHsnAK9jsPdYioU/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1VX7GyHACKCxQ7qD2yQHsnAK9jsPdYioU/view?usp=drivesdk", "category": "Аллен_Б_Дауни_Основы_Python_Научитесь_думать_как_программист_Манн.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1VX7GyHACKCxQ7qD2yQHsnAK9jsPdYioU/view?usp=drivesdk", "category": "Аллен_Б_Дауни_Основы_Python_Научитесь_думать_как_программист_Манн.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Idealny_programmist.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1uo9w7YzruE9JDSjQsCvfbbBNgy1JTugm/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1uo9w7YzruE9JDSjQsCvfbbBNgy1JTugm/view?usp=drivesdk", "category": "Idealny_programmist.pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1uo9w7YzruE9JDSjQsCvfbbBNgy1JTugm/view?usp=drivesdk", "category": "Idealny_programmist.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Р.Мартин - Чистый код.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1X838yQHD9Du2gg9oaDc-WXZKWFqSo9Wg/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1X838yQHD9Du2gg9oaDc-WXZKWFqSo9Wg/view?usp=drivesdk", "category": "Р.Мартин - Чистый код.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1X838yQHD9Du2gg9oaDc-WXZKWFqSo9Wg/view?usp=drivesdk", "category": "Р.Мартин - Чистый код.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Хоффман_Э_Безопасность_веб_приложений_Бестселлеры_O_Reilly_2021.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1y-y8RO0Q0J8s30oY-G5XSzsJXY0LDXnU/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1y-y8RO0Q0J8s30oY-G5XSzsJXY0LDXnU/view?usp=drivesdk", "category": "Хоффман_Э_Безопасность_веб_приложений_Бестселлеры_O_Reilly_2021.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1y-y8RO0Q0J8s30oY-G5XSzsJXY0LDXnU/view?usp=drivesdk", "category": "Хоффман_Э_Безопасность_веб_приложений_Бестселлеры_O_Reilly_2021.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Sidelnikov_Naglyadnyy-CSS.637383.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1a2WGQCMgoKb-gM25mg3ZqfuPq_r2vPaj/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1a2WGQCMgoKb-gM25mg3ZqfuPq_r2vPaj/view?usp=drivesdk", "category": "Sidelnikov_Naglyadnyy-CSS.637383.pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1a2WGQCMgoKb-gM25mg3ZqfuPq_r2vPaj/view?usp=drivesdk", "category": "Sidelnikov_Naglyadnyy-CSS.637383.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Alan_Beaulieu-Learning_SQL-RU (1).pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1vJTwyJMjr9EmekKeD0NnkO5IBzgOhOGj/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1vJTwyJMjr9EmekKeD0NnkO5IBzgOhOGj/view?usp=drivesdk", "category": "Alan_Beaulieu-Learning_SQL-RU (1).pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1vJTwyJMjr9EmekKeD0NnkO5IBzgOhOGj/view?usp=drivesdk", "category": "Alan_Beaulieu-Learning_SQL-RU (1).pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Спрингер_В_Гид_по_Computer_Science,_расширенное_издание_Библиотека (4).pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1G6Xz0wX2a_4pCXlCxMmQ2jtWlcz6yYKc/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1G6Xz0wX2a_4pCXlCxMmQ2jtWlcz6yYKc/view?usp=drivesdk", "category": "Спрингер_В_Гид_по_Computer_Science,_расширенное_издание_Библиотека (4).pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1G6Xz0wX2a_4pCXlCxMmQ2jtWlcz6yYKc/view?usp=drivesdk", "category": "Спрингер_В_Гид_по_Computer_Science,_расширенное_издание_Библиотека (4).pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "DAMA-DMBOK RUS.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1ugDGmd1aIeY7tXxOqrHTKbb0ypXJCkX0/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1ugDGmd1aIeY7tXxOqrHTKbb0ypXJCkX0/view?usp=drivesdk", "category": "DAMA-DMBOK RUS.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1ugDGmd1aIeY7tXxOqrHTKbb0ypXJCkX0/view?usp=drivesdk", "category": "DAMA-DMBOK RUS.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Rita Mulcahy - PMP Exam Prep, Tenth Edition (2020).pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/129-gn7p0sGSmIbrJGbP6THrQfg_69qR9/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/129-gn7p0sGSmIbrJGbP6THrQfg_69qR9/view?usp=drivesdk", "category": "Rita Mulcahy - PMP Exam Prep, Tenth Edition (2020).pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/129-gn7p0sGSmIbrJGbP6THrQfg_69qR9/view?usp=drivesdk", "category": "Rita Mulcahy - PMP Exam Prep, Tenth Edition (2020).pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Управление_проектами_Полный_курс.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1R7jYPW7aN_3O3n3CYeG30BUpn-E_uDuN/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1R7jYPW7aN_3O3n3CYeG30BUpn-E_uDuN/view?usp=drivesdk", "category": "Управление_проектами_Полный_курс.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1R7jYPW7aN_3O3n3CYeG30BUpn-E_uDuN/view?usp=drivesdk", "category": "Управление_проектами_Полный_курс.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Knowdemia PMBOK 7th Edition Knowdemia.com.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/19T9vTOYGX6FHlgzFRFms7q8qBG2I-nXc/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/19T9vTOYGX6FHlgzFRFms7q8qBG2I-nXc/view?usp=drivesdk", "category": "Knowdemia PMBOK 7th Edition Knowdemia.com.pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/19T9vTOYGX6FHlgzFRFms7q8qBG2I-nXc/view?usp=drivesdk", "category": "Knowdemia PMBOK 7th Edition Knowdemia.com.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Roman-ob-upravlenii-pr.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1lGlWfakeYVU5UoBEApq-jOV6OMVFy2Iz/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1lGlWfakeYVU5UoBEApq-jOV6OMVFy2Iz/view?usp=drivesdk", "category": "Roman-ob-upravlenii-pr.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1lGlWfakeYVU5UoBEApq-jOV6OMVFy2Iz/view?usp=drivesdk", "category": "Roman-ob-upravlenii-pr.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Bruks_Mificheskiy-cheloveko-mesyac.BKU4ew.146089.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1Ajp3un7G-AvaoXTazRbqulOYneW5UFkn/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1Ajp3un7G-AvaoXTazRbqulOYneW5UFkn/view?usp=drivesdk", "category": "Bruks_Mificheskiy-cheloveko-mesyac.BKU4ew.146089.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1Ajp3un7G-AvaoXTazRbqulOYneW5UFkn/view?usp=drivesdk", "category": "Bruks_Mificheskiy-cheloveko-mesyac.BKU4ew.146089.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "И. Адизес. Идеальный руководитель.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1X5g2GuIAQAurCW8aqSXCeRqaAtao9g8w/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1X5g2GuIAQAurCW8aqSXCeRqaAtao9g8w/view?usp=drivesdk", "category": "И. Адизес. Идеальный руководитель.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1X5g2GuIAQAurCW8aqSXCeRqaAtao9g8w/view?usp=drivesdk", "category": "И. Адизес. Идеальный руководитель.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "BABOK_IIBA_A_Guide_to_the_Business_Analysis_Body_of_Knowledge_International.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1LdVk3lpqMHBN_of54Pt1y_uVvvH5py8e/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1LdVk3lpqMHBN_of54Pt1y_uVvvH5py8e/view?usp=drivesdk", "category": "BABOK_IIBA_A_Guide_to_the_Business_Analysis_Body_of_Knowledge_International.pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1LdVk3lpqMHBN_of54Pt1y_uVvvH5py8e/view?usp=drivesdk", "category": "BABOK_IIBA_A_Guide_to_the_Business_Analysis_Body_of_Knowledge_International.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Международный_институт_бизнес_анализа_IIBA_BABOK_v3_Руководство.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1TNKXy02M4QpcUoLdyGjX289dN97miyQa/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1TNKXy02M4QpcUoLdyGjX289dN97miyQa/view?usp=drivesdk", "category": "Международный_институт_бизнес_анализа_IIBA_BABOK_v3_Руководство.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1TNKXy02M4QpcUoLdyGjX289dN97miyQa/view?usp=drivesdk", "category": "Международный_институт_бизнес_анализа_IIBA_BABOK_v3_Руководство.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Принципы работы с требованиями.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1ckX6ri226IiagnrCFdG5KXlM7TOqDeeX/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1ckX6ri226IiagnrCFdG5KXlM7TOqDeeX/view?usp=drivesdk", "category": "Принципы работы с требованиями.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1ckX6ri226IiagnrCFdG5KXlM7TOqDeeX/view?usp=drivesdk", "category": "Принципы работы с требованиями.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Вигерс Разработка требований к ПО.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1V-rGXEXc9f3EjNp9taA73Uvx9PnbdtUs/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1V-rGXEXc9f3EjNp9taA73Uvx9PnbdtUs/view?usp=drivesdk", "category": "Вигерс Разработка требований к ПО.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1V-rGXEXc9f3EjNp9taA73Uvx9PnbdtUs/view?usp=drivesdk", "category": "Вигерс Разработка требований к ПО.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Теория_и_практика_бизнес_анализа_T_1.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1B_s9WTi5mDuB-0c1RsWNA54sKLe_VwDz/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1B_s9WTi5mDuB-0c1RsWNA54sKLe_VwDz/view?usp=drivesdk", "category": "Теория_и_практика_бизнес_анализа_T_1.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1B_s9WTi5mDuB-0c1RsWNA54sKLe_VwDz/view?usp=drivesdk", "category": "Теория_и_практика_бизнес_анализа_T_1.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Теория_и_практика_бизнес_анализа_T_2.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1LDOIkEeakZXt6UXtuH23-opB48Uf2Rdt/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1LDOIkEeakZXt6UXtuH23-opB48Uf2Rdt/view?usp=drivesdk", "category": "Теория_и_практика_бизнес_анализа_T_2.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1LDOIkEeakZXt6UXtuH23-opB48Uf2Rdt/view?usp=drivesdk", "category": "Теория_и_практика_бизнес_анализа_T_2.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Алистер Коберн - Современные методы описания функциональных требований к системам.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1_BX4mEKVnCkr8j6SV8RjFQvv_Yfoyt9M/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1_BX4mEKVnCkr8j6SV8RjFQvv_Yfoyt9M/view?usp=drivesdk", "category": "Алистер Коберн - Современные методы описания функциональных требований к системам.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1_BX4mEKVnCkr8j6SV8RjFQvv_Yfoyt9M/view?usp=drivesdk", "category": "Алистер Коберн - Современные методы описания функциональных требований к системам.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Kozlov_Kak_okazyivat_vliyanie_na_lyudey_v_zhizni_i_biznese_fa94aa_179329.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1586gdfjjKzjmovPHr1RtaQpI6SnS0M4g/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1586gdfjjKzjmovPHr1RtaQpI6SnS0M4g/view?usp=drivesdk", "category": "Kozlov_Kak_okazyivat_vliyanie_na_lyudey_v_zhizni_i_biznese_fa94aa_179329.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1586gdfjjKzjmovPHr1RtaQpI6SnS0M4g/view?usp=drivesdk", "category": "Kozlov_Kak_okazyivat_vliyanie_na_lyudey_v_zhizni_i_biznese_fa94aa_179329.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Peregovory_s_monstrami_Kak_dogovoritsya_s_silnymi_mira_sego.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1_lvCdJbcS-gmY5BvEVO5nBn6ZGNz2utK/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1_lvCdJbcS-gmY5BvEVO5nBn6ZGNz2utK/view?usp=drivesdk", "category": "Peregovory_s_monstrami_Kak_dogovoritsya_s_silnymi_mira_sego.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1_lvCdJbcS-gmY5BvEVO5nBn6ZGNz2utK/view?usp=drivesdk", "category": "Peregovory_s_monstrami_Kak_dogovoritsya_s_silnymi_mira_sego.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Otchayannye_akkaunt-menedzhery.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/110JWptrHOcEPoECGJl42UvKXCyYkF0l5/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/110JWptrHOcEPoECGJl42UvKXCyYkF0l5/view?usp=drivesdk", "category": "Otchayannye_akkaunt-menedzhery.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/110JWptrHOcEPoECGJl42UvKXCyYkF0l5/view?usp=drivesdk", "category": "Otchayannye_akkaunt-menedzhery.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Спроси маму.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1yBdiXMGoFxg4P8zI9-gmkoLLhDW4fOsO/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1yBdiXMGoFxg4P8zI9-gmkoLLhDW4fOsO/view?usp=drivesdk", "category": "Спроси маму.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1yBdiXMGoFxg4P8zI9-gmkoLLhDW4fOsO/view?usp=drivesdk", "category": "Спроси маму.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Uitmor_Vnutrennyaya-sila-lidera-Kouching-kak-metod-upravleniya-personalom.cpSiYQ.424115.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1erTPStuprSZ44p68NwE5sjn_vthJ5UUM/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1erTPStuprSZ44p68NwE5sjn_vthJ5UUM/view?usp=drivesdk", "category": "Uitmor_Vnutrennyaya-sila-lidera-Kouching-kak-metod-upravleniya-personalom.cpSiYQ.424115.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1erTPStuprSZ44p68NwE5sjn_vthJ5UUM/view?usp=drivesdk", "category": "Uitmor_Vnutrennyaya-sila-lidera-Kouching-kak-metod-upravleniya-personalom.cpSiYQ.424115.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Koaktivnyi_kouchingh_Provieriennyie_printsipy_lichnostnogho_i_okinier.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1jf_N0LoMZiZ86cw9adm5dDab8ORigXa1/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1jf_N0LoMZiZ86cw9adm5dDab8ORigXa1/view?usp=drivesdk", "category": "Koaktivnyi_kouchingh_Provieriennyie_printsipy_lichnostnogho_i_okinier.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1jf_N0LoMZiZ86cw9adm5dDab8ORigXa1/view?usp=drivesdk", "category": "Koaktivnyi_kouchingh_Provieriennyie_printsipy_lichnostnogho_i_okinier.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Uitmor_Kouching-Osnovnye-principy-i-praktiki-kouchinga-i-liderstva.qFoLew.636656.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1kvO_wVTNGRSQgk28vXw7ZASan93to6Tc/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1kvO_wVTNGRSQgk28vXw7ZASan93to6Tc/view?usp=drivesdk", "category": "Uitmor_Kouching-Osnovnye-principy-i-praktiki-kouchinga-i-liderstva.qFoLew.636656.pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1kvO_wVTNGRSQgk28vXw7ZASan93to6Tc/view?usp=drivesdk", "category": "Uitmor_Kouching-Osnovnye-principy-i-praktiki-kouchinga-i-liderstva.qFoLew.636656.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Koaktivny_kouching.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1dYoFQ--PKcYoXMU74UuOktXNC6QpAkEJ/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1dYoFQ--PKcYoXMU74UuOktXNC6QpAkEJ/view?usp=drivesdk", "category": "Koaktivny_kouching.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1dYoFQ--PKcYoXMU74UuOktXNC6QpAkEJ/view?usp=drivesdk", "category": "Koaktivny_kouching.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Коучинг Джон Уитмор.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1ksZs69Es3-0vimyHdTYVWOXF-cD00e0A/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1ksZs69Es3-0vimyHdTYVWOXF-cD00e0A/view?usp=drivesdk", "category": "Коучинг Джон Уитмор.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1ksZs69Es3-0vimyHdTYVWOXF-cD00e0A/view?usp=drivesdk", "category": "Коучинг Джон Уитмор.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Scrum (Josh Wright).pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1O6XruCiO5e_zDqacgzbagOrNhXPvdj-s/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1O6XruCiO5e_zDqacgzbagOrNhXPvdj-s/view?usp=drivesdk", "category": "Scrum (Josh Wright).pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1O6XruCiO5e_zDqacgzbagOrNhXPvdj-s/view?usp=drivesdk", "category": "Scrum (Josh Wright).pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "AGILE_in_Practice_Practical_Use_cases_on_Project_Management_Methods.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1UV5cNTYPhzNEpV9gf5nnklGRYd1ujXyL/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1UV5cNTYPhzNEpV9gf5nnklGRYd1ujXyL/view?usp=drivesdk", "category": "AGILE_in_Practice_Practical_Use_cases_on_Project_Management_Methods.pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1UV5cNTYPhzNEpV9gf5nnklGRYd1ujXyL/view?usp=drivesdk", "category": "AGILE_in_Practice_Practical_Use_cases_on_Project_Management_Methods.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Рубин_К_Основы_Scrum_Практическое_руководство_по_гибкой_разработке.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1tx4s6pDUSYo8n16wOPEj8cRTAVW9hv2k/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1tx4s6pDUSYo8n16wOPEj8cRTAVW9hv2k/view?usp=drivesdk", "category": "Рубин_К_Основы_Scrum_Практическое_руководство_по_гибкой_разработке.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1tx4s6pDUSYo8n16wOPEj8cRTAVW9hv2k/view?usp=drivesdk", "category": "Рубин_К_Основы_Scrum_Практическое_руководство_по_гибкой_разработке.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Макконнелл_С_Еще_более_эффективный_Agile_2021.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1QxxdE4jYvLiAQgl2kMXp7VQBiYAmgwXQ/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1QxxdE4jYvLiAQgl2kMXp7VQBiYAmgwXQ/view?usp=drivesdk", "category": "Макконнелл_С_Еще_более_эффективный_Agile_2021.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1QxxdE4jYvLiAQgl2kMXp7VQBiYAmgwXQ/view?usp=drivesdk", "category": "Макконнелл_С_Еще_более_эффективный_Agile_2021.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "agile-ocenka-i-planirovanie-proektov-53886.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1gm_7Sg1ZtALMIEW3KkIxdF2zrkr7Fs71/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1gm_7Sg1ZtALMIEW3KkIxdF2zrkr7Fs71/view?usp=drivesdk", "category": "agile-ocenka-i-planirovanie-proektov-53886.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1gm_7Sg1ZtALMIEW3KkIxdF2zrkr7Fs71/view?usp=drivesdk", "category": "agile-ocenka-i-planirovanie-proektov-53886.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Паттон_Дж_Пользовательские_истории.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1Ke3I7r10uPC4wBk2L1kOdz2l-KYu7V3D/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1Ke3I7r10uPC4wBk2L1kOdz2l-KYu7V3D/view?usp=drivesdk", "category": "Паттон_Дж_Пользовательские_истории.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1Ke3I7r10uPC4wBk2L1kOdz2l-KYu7V3D/view?usp=drivesdk", "category": "Паттон_Дж_Пользовательские_истории.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Loffler_Retrospektiva-v-Agile.602968.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1PBwLfayuW3J0FH8nIj0EfNxJVdzRyssc/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1PBwLfayuW3J0FH8nIj0EfNxJVdzRyssc/view?usp=drivesdk", "category": "Loffler_Retrospektiva-v-Agile.602968.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1PBwLfayuW3J0FH8nIj0EfNxJVdzRyssc/view?usp=drivesdk", "category": "Loffler_Retrospektiva-v-Agile.602968.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "pdfcoffee.com_put-skram-mastera-pdf-pdf-free.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1u8eYQKyrVlIuvfiKWB3oxLwV-HA_kUa9/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1u8eYQKyrVlIuvfiKWB3oxLwV-HA_kUa9/view?usp=drivesdk", "category": "pdfcoffee.com_put-skram-mastera-pdf-pdf-free.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1u8eYQKyrVlIuvfiKWB3oxLwV-HA_kUa9/view?usp=drivesdk", "category": "pdfcoffee.com_put-skram-mastera-pdf-pdf-free.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Adkins_L._Kouching_Agile_Komand_Ruk.a4.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1ba1MiguiYXNk1PQ3xaJoKgIpa_BcOIFM/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1ba1MiguiYXNk1PQ3xaJoKgIpa_BcOIFM/view?usp=drivesdk", "category": "Adkins_L._Kouching_Agile_Komand_Ruk.a4.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1ba1MiguiYXNk1PQ3xaJoKgIpa_BcOIFM/view?usp=drivesdk", "category": "Adkins_L._Kouching_Agile_Komand_Ruk.a4.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Agile._._2020.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=drivesdk", "category": "Agile._._2020.pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1cVNOKcuVMUQT9vbVI8qor_zDavluFFdV/view?usp=drivesdk", "category": "Agile._._2020.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Dorofeev_Dzhedayskie-tehniki-Kak-vospitat-svoyu-obezyanu-opustoshit-inboks-i-sberech-mysletoplivo.SVhkuA.481115.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1a6lM8DLWVQXbLFas5mKvEie5KFL2Nah7/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1a6lM8DLWVQXbLFas5mKvEie5KFL2Nah7/view?usp=drivesdk", "category": "Dorofeev_Dzhedayskie-tehniki-Kak-vospitat-svoyu-obezyanu-opustoshit-inboks-i-sberech-mysletoplivo.SVhkuA.481115.pdf"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1a6lM8DLWVQXbLFas5mKvEie5KFL2Nah7/view?usp=drivesdk", "category": "Dorofeev_Dzhedayskie-tehniki-Kak-vospitat-svoyu-obezyanu-opustoshit-inboks-i-sberech-mysletoplivo.SVhkuA.481115.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Bok_Rabota-rulit-Pochemu-bolshinstvo-lyudey-v-mire-hotyat-rabotat-imenno-v-Google-.zXfMrg.420017.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1mCwdztAzAaybKgpsCpsfhc7Ds5vXgUyA/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1mCwdztAzAaybKgpsCpsfhc7Ds5vXgUyA/view?usp=drivesdk", "category": "Bok_Rabota-rulit-Pochemu-bolshinstvo-lyudey-v-mire-hotyat-rabotat-imenno-v-Google-.zXfMrg.420017.pdf"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1mCwdztAzAaybKgpsCpsfhc7Ds5vXgUyA/view?usp=drivesdk", "category": "Bok_Rabota-rulit-Pochemu-bolshinstvo-lyudey-v-mire-hotyat-rabotat-imenno-v-Google-.zXfMrg.420017.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "THE_80-20_PRINCIPLE_1999_Richard_Koch.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1j7WM9D1zR8lLl9j20w73nw7GhQW1X0yx/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1j7WM9D1zR8lLl9j20w73nw7GhQW1X0yx/view?usp=drivesdk", "category": "THE_80-20_PRINCIPLE_1999_Richard_Koch.pdf"}}, "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1j7WM9D1zR8lLl9j20w73nw7GhQW1X0yx/view?usp=drivesdk", "category": "THE_80-20_PRINCIPLE_1999_Richard_Koch.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Adizes_Upravlyaya-izmeneniyami.9riHkA.370675.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1K_EaEYzCNSm3yc8iZifar6MgUY72qEQs/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1K_EaEYzCNSm3yc8iZifar6MgUY72qEQs/view?usp=drivesdk", "category": "Adizes_Upravlyaya-izmeneniyami.9riHkA.370675.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1K_EaEYzCNSm3yc8iZifar6MgUY72qEQs/view?usp=drivesdk", "category": "Adizes_Upravlyaya-izmeneniyami.9riHkA.370675.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Bregman_Emocionalnaya-smelost.MaHvwA.560185.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/138bSebYJ89T50JeBj09as1c60e94dC5n/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/138bSebYJ89T50JeBj09as1c60e94dC5n/view?usp=drivesdk", "category": "Bregman_Emocionalnaya-smelost.MaHvwA.560185.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/138bSebYJ89T50JeBj09as1c60e94dC5n/view?usp=drivesdk", "category": "Bregman_Emocionalnaya-smelost.MaHvwA.560185.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Harvard-Business-Review-HBR-_Metody-prinyatiya-resheniy.wrdkjw.492170.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1gUN7l7BI8ZESn73Oxi-YZAvpKts-7Int/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1gUN7l7BI8ZESn73Oxi-YZAvpKts-7Int/view?usp=drivesdk", "category": "Harvard-Business-Review-HBR-_Metody-prinyatiya-resheniy.wrdkjw.492170.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1gUN7l7BI8ZESn73Oxi-YZAvpKts-7Int/view?usp=drivesdk", "category": "Harvard-Business-Review-HBR-_Metody-prinyatiya-resheniy.wrdkjw.492170.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "O-Rayli-III_Pobedit-s-pomoshchyu-innovaciy-Prakticheskoe-rukovodstvo-po-upravleniyu-organizacionnymi-izmeneniyami-i-obnovleniyami.8OFhAA.416597.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1FevzpfXCPFQzKNjPOq5_FDaFgpDMQSwb/view?usp=drivesdk", "metadata": {"language": "en", "source": "https://drive.google.com/file/d/1FevzpfXCPFQzKNjPOq5_FDaFgpDMQSwb/view?usp=drivesdk", "category": "O-Rayli-III_Pobedit-s-pomoshchyu-innovaciy-Prakticheskoe-rukovodstvo-po-upravleniyu-organizacionnymi-izmeneniyami-i-obnovleniyami.8OFhAA.416597.pdf"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1FevzpfXCPFQzKNjPOq5_FDaFgpDMQSwb/view?usp=drivesdk", "category": "O-Rayli-III_Pobedit-s-pomoshchyu-innovaciy-Prakticheskoe-rukovodstvo-po-upravleniyu-organizacionnymi-izmeneniyami-i-obnovleniyami.8OFhAA.416597.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Rysev_Tehnologii-liderstva-O-Bogah-Geroyah-i-Rukovoditelyah.Q0waAA.295567.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1Sl1skvxVJJFOqFj7NYDg3Fgp0bU_0wwR/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1Sl1skvxVJJFOqFj7NYDg3Fgp0bU_0wwR/view?usp=drivesdk", "category": "Rysev_Tehnologii-liderstva-O-Bogah-Geroyah-i-Rukovoditelyah.Q0waAA.295567.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1Sl1skvxVJJFOqFj7NYDg3Fgp0bU_0wwR/view?usp=drivesdk", "category": "Rysev_Tehnologii-liderstva-O-Bogah-Geroyah-i-Rukovoditelyah.Q0waAA.295567.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Harvard-Business-Review-HBR-_Upravlenie-izmeneniyami.WJmjgQ.621510.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1iUe8IqG7Caj__S_LOb1BTRiRhXa6Vtnj/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1iUe8IqG7Caj__S_LOb1BTRiRhXa6Vtnj/view?usp=drivesdk", "category": "Harvard-Business-Review-HBR-_Upravlenie-izmeneniyami.WJmjgQ.621510.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1iUe8IqG7Caj__S_LOb1BTRiRhXa6Vtnj/view?usp=drivesdk", "category": "Harvard-Business-Review-HBR-_Upravlenie-izmeneniyami.WJmjgQ.621510.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Брайан Трейси Делегирование и управление.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1m2_UsrBxlmo483PX-SvOx6NTQGkPDWAU/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1m2_UsrBxlmo483PX-SvOx6NTQGkPDWAU/view?usp=drivesdk", "category": "Брайан Трейси Делегирование и управление.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1m2_UsrBxlmo483PX-SvOx6NTQGkPDWAU/view?usp=drivesdk", "category": "Брайан Трейси Делегирование и управление.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Lensioni_Pyat-porokov-komandy.Vicm6g.334856.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/15wOzEPbM3thYN0M1ndOErI2HehjPQjgh/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/15wOzEPbM3thYN0M1ndOErI2HehjPQjgh/view?usp=drivesdk", "category": "Lensioni_Pyat-porokov-komandy.Vicm6g.334856.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/15wOzEPbM3thYN0M1ndOErI2HehjPQjgh/view?usp=drivesdk", "category": "Lensioni_Pyat-porokov-komandy.Vicm6g.334856.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Dzheyon_Put-Samsung-Strategii-upravleniya-izmeneniyami-ot-mirovogo-lidera-v-oblasti-innovaciy-i-dizayna.AFgddg.485793.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1gsEGf1krTHLDhISSU3rDA3FkBRWcuMkU/view?usp=drivesdk", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1gsEGf1krTHLDhISSU3rDA3FkBRWcuMkU/view?usp=drivesdk", "category": "Dzheyon_Put-Samsung-Strategii-upravleniya-izmeneniyami-ot-mirovogo-lidera-v-oblasti-innovaciy-i-dizayna.AFgddg.485793.pdf"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1gsEGf1krTHLDhISSU3rDA3FkBRWcuMkU/view?usp=drivesdk", "category": "Dzheyon_Put-Samsung-Strategii-upravleniya-izmeneniyami-ot-mirovogo-lidera-v-oblasti-innovaciy-i-dizayna.AFgddg.485793.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Дуглас Хаббард, Как измерить всё, что угодно.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1dgOfWDkg-D5kBoNr9T4yAGNRRrHnWq6w/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1dgOfWDkg-D5kBoNr9T4yAGNRRrHnWq6w/view?usp=drivesdk", "category": "Дуглас Хаббард, Как измерить всё, что угодно.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1dgOfWDkg-D5kBoNr9T4yAGNRRrHnWq6w/view?usp=drivesdk", "category": "Дуглас Хаббард, Как измерить всё, что угодно.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "PMBOK 7th Edition Knowdemia.com.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1WN8LD7ciyQ84JVSgmiVPXOuDBP4ydhDE/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1WN8LD7ciyQ84JVSgmiVPXOuDBP4ydhDE/view?usp=drivesdk", "category": "PMBOK 7th Edition Knowdemia.com.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1WN8LD7ciyQ84JVSgmiVPXOuDBP4ydhDE/view?usp=drivesdk", "category": "PMBOK 7th Edition Knowdemia.com.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Оценка_компетенций_методом_интервью.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1Sba4GEGojdpKPFTw0o4ltAX8w1h44Hl1/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1Sba4GEGojdpKPFTw0o4ltAX8w1h44Hl1/view?usp=drivesdk", "category": "Оценка_компетенций_методом_интервью.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1Sba4GEGojdpKPFTw0o4ltAX8w1h44Hl1/view?usp=drivesdk", "category": "Оценка_компетенций_методом_интервью.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Элементы власти.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1LuQbJwY6x9CiFXNE7vqvY1p_6sD9L6Bv/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1LuQbJwY6x9CiFXNE7vqvY1p_6sD9L6Bv/view?usp=drivesdk", "category": "Элементы власти.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1LuQbJwY6x9CiFXNE7vqvY1p_6sD9L6Bv/view?usp=drivesdk", "category": "Элементы власти.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Interviewing users.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1--8_YIo84pWf_3qQ3wrxYrWyaCniElfO/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1--8_YIo84pWf_3qQ3wrxYrWyaCniElfO/view?usp=drivesdk", "category": "Interviewing users.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1--8_YIo84pWf_3qQ3wrxYrWyaCniElfO/view?usp=drivesdk", "category": "Interviewing users.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Копия Программист-прагматик.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1vk_bsssBWvVFYO8r_uxN6zy238-TMe53/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1vk_bsssBWvVFYO8r_uxN6zy238-TMe53/view?usp=drivesdk", "category": "Копия Программист-прагматик.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1vk_bsssBWvVFYO8r_uxN6zy238-TMe53/view?usp=drivesdk", "category": "Копия Программист-прагматик.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "CleanCode_PDFDrive_.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1L4HlMcsQk-2igqtjvui2dvL42kRWjuQe/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1L4HlMcsQk-2igqtjvui2dvL42kRWjuQe/view?usp=drivesdk", "category": "CleanCode_PDFDrive_.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1L4HlMcsQk-2igqtjvui2dvL42kRWjuQe/view?usp=drivesdk", "category": "CleanCode_PDFDrive_.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Erik_Evans-Predmetno-orientirovannoe_proektirov.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1SQut-bMa-RTQKJQ-sM72TopymK9OY8Ex/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1SQut-bMa-RTQKJQ-sM72TopymK9OY8Ex/view?usp=drivesdk", "category": "Erik_Evans-Predmetno-orientirovannoe_proektirov.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1SQut-bMa-RTQKJQ-sM72TopymK9OY8Ex/view?usp=drivesdk", "category": "Erik_Evans-Predmetno-orientirovannoe_proektirov.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Лидер и Племя.epub", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1F1o7lL_6HbtbfqQR6m1LTYVRVI2OIdTi/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1F1o7lL_6HbtbfqQR6m1LTYVRVI2OIdTi/view?usp=drivesdk", "category": "Лидер и Племя.epub"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1F1o7lL_6HbtbfqQR6m1LTYVRVI2OIdTi/view?usp=drivesdk", "category": "Лидер и Племя.epub"}}
{"instruction": "Проаналізуй цей запит", "input": "PMBOK6.pdf", "output": {"text": "Посилання на документ: https://drive.google.com/file/d/1j0fT_gp4dfJ44LDxCqwzSj9XDlRGKxMV/view?usp=drivesdk", "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1j0fT_gp4dfJ44LDxCqwzSj9XDlRGKxMV/view?usp=drivesdk", "category": "PMBOK6.pdf"}}, "metadata": {"language": "ru", "source": "https://drive.google.com/file/d/1j0fT_gp4dfJ44LDxCqwzSj9XDlRGKxMV/view?usp=drivesdk", "category": "PMBOK6.pdf"}}
{"instruction": "Проаналізуй цей запит", "input": "Designers Skills Matrix ", "output": {"text": "Посилання на документ: https://docs.google.com/spreadsheets/d/19wI7RTebrvYEtyXVKO_AeKWrbR4YeWixSFkPj4BlEVQ/edit?usp=drivesdk", "metadata": {"language": "ru", "source": "https://docs.google.com/spreadsheets/d/19wI7RTebrvYEtyXVKO_AeKWrbR4YeWixSFkPj4BlEVQ/edit?usp=drivesdk", "category": "Designers Skills Matrix "}}, "metadata": {"language": "ru", "source": "https://docs.google.com/spreadsheets/d/19wI7RTebrvYEtyXVKO_AeKWrbR4YeWixSFkPj4BlEVQ/edit?usp=drivesdk", "category": "Designers Skills Matrix "}}
{"instruction": "Проаналізуй цей запит", "input": "Soft Skills for Developers", "output": {"text": "Посилання на документ: https://docs.google.com/spreadsheets/d/1Qqzz3U73iwununxSu5yMMSwSK7qKB7pwlC_HUHtC1Z8/edit?usp=drivesdk", "metadata": {"language": "ru", "source": "https://docs.google.com/spreadsheets/d/1Qqzz3U73iwununxSu5yMMSwSK7qKB7pwlC_HUHtC1Z8/edit?usp=drivesdk", "category": "Soft Skills for Developers"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/spreadsheets/d/1Qqzz3U73iwununxSu5yMMSwSK7qKB7pwlC_HUHtC1Z8/edit?usp=drivesdk", "category": "Soft Skills for Developers"}}
{"instruction": "Проаналізуй цей запит", "input": "Soft Skills for Tech_Team Lead", "output": {"text": "Посилання на документ: https://docs.google.com/spreadsheets/d/1Z5IapBVdbOQANjIqEpqzC3xLYAtAKJac32jVucvYV5I/edit?usp=drivesdk", "metadata": {"language": "ru", "source": "https://docs.google.com/spreadsheets/d/1Z5IapBVdbOQANjIqEpqzC3xLYAtAKJac32jVucvYV5I/edit?usp=drivesdk", "category": "Soft Skills for Tech_Team Lead"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/spreadsheets/d/1Z5IapBVdbOQANjIqEpqzC3xLYAtAKJac32jVucvYV5I/edit?usp=drivesdk", "category": "Soft Skills for Tech_Team Lead"}}
{"instruction": "Проаналізуй цей запит", "input": "Soft Skills for People Management ", "output": {"text": "Посилання на документ: https://docs.google.com/spreadsheets/d/1TMfODWMxXevU7ngWB0d4UV4QEI_IDmo0tJTvfkn4Aqs/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/spreadsheets/d/1TMfODWMxXevU7ngWB0d4UV4QEI_IDmo0tJTvfkn4Aqs/edit?usp=drivesdk", "category": "Soft Skills for People Management "}}, "metadata": {"language": "ru", "source": "https://docs.google.com/spreadsheets/d/1TMfODWMxXevU7ngWB0d4UV4QEI_IDmo0tJTvfkn4Aqs/edit?usp=drivesdk", "category": "Soft Skills for People Management "}}
{"instruction": "Проаналізуй цей запит", "input": "Soft Skills for Management (PM)", "output": {"text": "Посилання на документ: https://docs.google.com/spreadsheets/d/1wDMiqSizOGDE9mvmvFbwc3oxDs8uNBiR_DCZ6Z-oW8U/edit?usp=drivesdk", "metadata": {"language": "ua", "source": "https://docs.google.com/spreadsheets/d/1wDMiqSizOGDE9mvmvFbwc3oxDs8uNBiR_DCZ6Z-oW8U/edit?usp=drivesdk", "category": "Soft Skills for Management (PM)"}}, "metadata": {"language": "ru", "source": "https://docs.google.com/spreadsheets/d/1wDMiqSizOGDE9mvmvFbwc3oxDs8uNBiR_DCZ6Z-oW8U/edit?usp=drivesdk", "category": "Soft Skills for Management (PM)"}}
{"instruction": "Проаналізуй цей запит", "input": "Анотація до книги Адизеса 'Управляя изменениями'", "output": {"text": "«Выживают не самые сильные или самые умные виды, а те, которые лучше других приспосабливаются к изменениям»,  – говорил Чарльз Дарвин. Ицхак Адизес продолжает эту мысль: «Мы перестанем сталкиваться с проблемами только при полном отсутствии изменений, а это произойдет, лишь когда мы… умрем». Книга посвящена процессам принятия управленческих решений в условиях постоянных изменений, происходящих как внутри, так и снаружи организации. Проблемы, возникающие вследствие изменений, по мнению Адизеса, не только предсказуемы, но и разрешимы. Автор наглядно показывает, как можно создать и сохранять целостность организации, если вы владеете искусством качественного принятия и внедрения управленческих решений.", "metadata": {"language": "ru", "source": "https://www.litres.ru/ichak-adizes/upravlyaya-izmeneniyami-mastering-change/", "category": "Менеджмент", "subcategory": "Анотація"}}, "metadata": {"language": "ru", "source": "https://www.litres.ru/ichak-adizes/upravlyaya-izmeneniyami-mastering-change/", "category": "Менеджмент", "subcategory": "Анотація"}}
{"instruction": "Проаналізуй цей запит", "input": "Основні тези книги Адизеса 'Управляя изменениями'", "output": {"text": "качественные решения; как предсказать, будет ли решение реализовано; как организовать командную работу; как создать атмосферу взаимного доверия и уважения; CAPI: ключ к управлению изменениями. Книга переведена на иврит, македонский, испанский и другие", "metadata": {"language": "ru", "source": "https://www.litres.ru/ichak-adizes/upravlyaya-izmeneniyami-mastering-change/", "category": "Менеджмент", "subcategory": "Тези"}}, "metadata": {"language": "ru", "source": "https://www.litres.ru/ichak-adizes/upravlyaya-izmeneniyami-mastering-change/", "category": "Менеджмент", "subcategory": "Тези"}}
{"instruction": "Проаналізуй цей запит", "input": "Зміст книги Адизеса 'Управляя изменениями'", "output": {"text": "языки. Ицхак Адизес Предисловие от партнера издания Предисловие Первая беседа Традиционная теория управления Функциональная точка зрения Вторая беседа Четыре роли принятия решений Краткосрочная и долгосрочная результативность Третья беседа Долгосрочная результативность Долгосрочная эффективность Механистическое или органическое сознание? Резюме Четвертая беседа Пятая беседа Одинокий рейнджер: Р000 Бюрократ: 0А00 Поджигатель: 00Е0 Суперпоследователь: 000I Шестая беседа Мертвый пень: 0000 Седьмая беседа Восьмая беседа Проблема Предпроблема Предпредпроблема Девятая беседа Десятая беседа Общий знаменатель успеха Одиннадцатая беседа Двенадцатая беседа Тринадцатая беседа Четырнадцатая беседа Резюме О методологии Адизеса Выражения признательности Об авторе Книги Ицхака Калдерона Адизеса, переведенные на русский язык Об Институте Адизеса Ключевые концепции методологии Адизеса Карта изменений Формула успеха Роли менеджмента Стили неправильного менеджмента Характеристики стилей менеджмента Восприятие реальности capi 8 шагов принятия решений Кривая эмоциональной вовлеченности Принципы/правила работы в команде Роли и ответственность в синертимах Жизненный цикл Цели программы Адизеса PA и EI структуры 11 шагов программы Адизеса notes Сноски 1", "metadata": {"language": "ru", "source": "https://www.litres.ru/ichak-adizes/upravlyaya-izmeneniyami-mastering-change/", "category": "Менеджмент", "subcategory": "Зміст"}}, "metadata": {"language": "ru", "source": "https://www.litres.ru/ichak-adizes/upravlyaya-izmeneniyami-mastering-change/", "category": "Менеджмент", "subcategory": "Зміст"}}
{"instruction": "Проаналізуй цей запит", "input": "Конфликтное поведение – это проявление в эмоциях, разговоре и действиях негативной реакции на конфликтную ситуацию. Такое поведение является следствием конфликта. Что делать, если между коллегами возник конфликт?. Для кого: для всех сотрудников компании от уровня middle - Для чего данный навык: данный навык поможет избежать конфликтных ситуаций между коллегами и эффективно разрешить их, если они все-таки возникнут.. Для чого: ", "output": {"text": "Проясняйте любое напряжение Не надо пытаться создать фальшивую атмосферу гармонии в коллективе, игнорируя напряжение. Негатив будет накапливаться и может вылиться в открытое эмоциональное противостояние. Проще всего решить конфликт на этапе его зарождения. Покажите коллегам, что они не должны замалчивать проблемы, привлекайте их к обсуждению.", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1BWKP9OineazCcZS9-3C1aH8cIbF2zDFLKOfz063pNEw/edit?usp=drive_link", "category": "Effective Communication", "subcategory": "Active Listening"}}, "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1BWKP9OineazCcZS9-3C1aH8cIbF2zDFLKOfz063pNEw/edit?usp=drive_link", "category": "Effective Communication", "subcategory": "Active Listening"}}
{"instruction": "Проаналізуй цей запит", "input": "Активное слушанье. Для кого: для всех. Для чого: уметь расположить к себе собеседника, услышать и понять что он говорит, на примере нашей повседневной работы важно убедиться, что задача и ее цель поняты должным образом.", "output": {"text": "Это метод демонстрации внимания в разговоре, чтобы обеспечить возможность свободного выражения чувств и мыслей собеседником.", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1yTXTnCP3NunKCeuO7O72bRC27OmaVviXnb3Sa2NkE0k/edit?tab=t.0", "category": "Effective Communication", "subcategory": "Active Listening"}}, "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1yTXTnCP3NunKCeuO7O72bRC27OmaVviXnb3Sa2NkE0k/edit?tab=t.0", "category": "Effective Communication", "subcategory": "Active Listening"}}
{"instruction": "Проаналізуй цей запит", "input": "Активное слушанье. Принципы, которых мы придерживаемся:", "output": {"text": "Це один із принципів активного слухання, який допомагає краще зрозуміти співрозмовника та уникнути помилок у роботі.", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1yTXTnCP3NunKCeuO7O72bRC27OmaVviXnb3Sa2NkE0k/edit?tab=t.0", "category": "Effective Communication", "subcategory": "Active Listening"}}, "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1yTXTnCP3NunKCeuO7O72bRC27OmaVviXnb3Sa2NkE0k/edit?tab=t.0", "category": "Effective Communication", "subcategory": "Active Listening"}}
{"instruction": "Проаналізуй цей запит", "input": "Активное слушанье. Принцип 1 - Если по задаче непонятно условие, есть сомнения, нельзя брать ее в работу не уточнив детали", "output": {"text": "Це один із принципів активного слухання, який допомагає краще зрозуміти співрозмовника та уникнути помилок у роботі.", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1yTXTnCP3NunKCeuO7O72bRC27OmaVviXnb3Sa2NkE0k/edit?tab=t.0", "category": "Effective Communication", "subcategory": "Active Listening"}}, "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1yTXTnCP3NunKCeuO7O72bRC27OmaVviXnb3Sa2NkE0k/edit?tab=t.0", "category": "Effective Communication", "subcategory": "Active Listening"}}
{"instruction": "Проаналізуй цей запит", "input": "Активное слушанье. Принцип 2 - Важно погружаться в цельную картину, а не делать только в контексте текущей задачи.", "output": {"text": "Це один із принципів активного слухання, який допомагає краще зрозуміти співрозмовника та уникнути помилок у роботі.", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1yTXTnCP3NunKCeuO7O72bRC27OmaVviXnb3Sa2NkE0k/edit?tab=t.0", "category": "Effective Communication", "subcategory": "Active Listening"}}, "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1yTXTnCP3NunKCeuO7O72bRC27OmaVviXnb3Sa2NkE0k/edit?tab=t.0", "category": "Effective Communication", "subcategory": "Active Listening"}}
{"instruction": "Проаналізуй цей запит", "input": "Активное слушанье. Рассмотрим кейс: Заведена задача, условие которой можно двояко интерпретировать или не хватает деталей. Например, необходимо сверстать экраны с инпутами, если в задаче не указаны правила валидации полей, то нужно попросить РМ-а или техлида добавить в задачу требования к валидации. Или уточнить “правильно ли я понимаю задачу, что здесь подразумевается то-то и то-то?”", "output": {"text": "Цей кейс ілюструє важливість уточнення деталей та розуміння контексту завдання.", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1yTXTnCP3NunKCeuO7O72bRC27OmaVviXnb3Sa2NkE0k/edit?tab=t.0", "category": "Effective Communication", "subcategory": "Active Listening"}}, "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1yTXTnCP3NunKCeuO7O72bRC27OmaVviXnb3Sa2NkE0k/edit?tab=t.0", "category": "Effective Communication", "subcategory": "Active Listening"}}
{"instruction": "Проаналізуй цей запит", "input": "Активное слушанье. Рассмотрим кейс: Поставлена задача сверстать экран, важно понимать роль этого экрана в интерфейсе приложения. Ответить себе на вопросы, какую он несет пользу для пользователя?", "output": {"text": "Цей кейс ілюструє важливість уточнення деталей та розуміння контексту завдання.", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1yTXTnCP3NunKCeuO7O72bRC27OmaVviXnb3Sa2NkE0k/edit?tab=t.0", "category": "Effective Communication", "subcategory": "Active Listening"}}, "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/1yTXTnCP3NunKCeuO7O72bRC27OmaVviXnb3Sa2NkE0k/edit?tab=t.0", "category": "Effective Communication", "subcategory": "Active Listening"}}
{"instruction": "Проаналізуй цей запит", "input": "time-boxing, time management, productivity", "output": {"text": "Time-boxing will improve your life. At the core it’s simple: assign a fixed period of time to a task, schedule it and stick to it. It works because it touches on so many aspects of behaviour: single-tasking and focus to achieve more and feel less stressed, prioritising work to observe deadlines, frequent feelings of accomplishment, and being transparent so people can see what you’re doing and help. The tricky bit is chunking the tasks and estimating how long they’ll take, but this skill improves rapidly with practice. Key to this is time-boxing into a shared calendar and taking commutes, meetings, and other commitments into account.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "time-boxing"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "time-boxing"}}
{"instruction": "Проаналізуй цей запит", "input": "Prioritise, 97.5, productivity", "output": {"text": "The modern worker has a thousand things to do at any one time. These should be ruthlessly and methodically prioritised. Otherwise you’ll consistently add less value at work. Find ways to avoid being distracted by tasks that jump to the front of the queue like email and alerts (see below). You also need a system for prioritising tasks – a simple one will do, and will always be better than none. So list out the tasks you have and, whether it’s a score out of 10 or colour coding, do it and stick to it.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "97.5", "subcategory": "Prioritise"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "97.5", "subcategory": "Prioritise"}}
{"instruction": "Проаналізуй цей запит", "input": "Say no, wellbeing, productivity", "output": {"text": "Stop trying to please everyone! It’s much easier said than done, we know, but by overloading yourself with work, not only do you risk being unable to complete tasks and meet deadlines – the quality of ALL of your work is affected. Sometimes it’s best to politely decline so that you can focus on the most important work. If you do it right, colleagues will understand and respect you for it.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Say no"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Say no"}}
{"instruction": "Проаналізуй цей запит", "input": "Move!, wellbeing, productivity", "output": {"text": "Moving does a lot for you. It gets the blood flowing round your body, can break you out of that daydream and helps stir creative thoughts. It’s good for you and the perfect tonic to our desk-bound lives. Try a wearable that alerts you when you’ve been inactive for too long. Or take a walk for that call, or even that meeting.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Move!"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Move!"}}
{"instruction": "Проаналізуй цей запит", "input": "Control your devices, distractions, productivity", "output": {"text": "Don’t let them control you. We check our phones between 150-221 times a day, depending on which study you’re reading. Even having your phone in sight, without touching it, has been shown to reduce performance in tests, according to a study at the University of Southern Maine. Clear your desk of distracting devices and see how much more you get done, with fewer distractions.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Distractions", "subcategory": "Control your devices"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Distractions", "subcategory": "Control your devices"}}
{"instruction": "Проаналізуй цей запит", "input": "Take short breaks, wellbeing, productivity", "output": {"text": "Building regular, short breaks into working time increases focus and productivity, studies have shown. One popular way to implement this is the Pomodoro Technique, named for the tomato-shaped timer used by the method’s creator, Francesco Cirillo. You use the timer to break work up into short periods, usually 25 minutes, with regular micro-breaks of around 5 minutes. Play around to find what timings suit you best.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Take short breaks"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Take short breaks"}}
{"instruction": "Проаналізуй цей запит", "input": "To-do lists, goals, productivity", "output": {"text": "To-do lists are fundamental. They aren’t a complete solution to time management (time-boxing takes the idea further) but they are essential. Think of a typical day: we’re rushing around from meeting to email to work conversation to conference call, picking up countless tasks along the way. We need to log these tasks somewhere and then ensure that we action them when we finally get a moment of calm. For a lot of people, the next steps are to prioritise them and then schedule them. But it starts with to-do lists.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Goals", "subcategory": "To-do lists"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Goals", "subcategory": "To-do lists"}}
{"instruction": "Проаналізуй цей запит", "input": "Eat well, wellbeing, productivity", "output": {"text": "Loading up on sweets and crisps won’t sustain you over hours of hard work, and will almost certainly result in a crash. This is particularly harmful to productivity as your brain burns more glucose when trying to exert self-control. Eating foods that slowly release energy over time is better for your health and productivity. Think unprocessed, whole foods and a lunch with a balance of protein, veg, fat and carbs.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Eat well"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Eat well"}}
{"instruction": "Проаналізуй цей запит", "input": "2-minute rule, time management, productivity", "output": {"text": "If a task can be done in less than 2 minutes, don’t write it down or put it into a system or discuss it or think about it... just do it. Of course if you have a more important, more urgent job at that same moment, that one will win. But in general we often procrastinate or feel overwhelmed when sometimes it’s better to just get on with some small tasks, build momentum, clear the clutter and gain a degree of control. This works very well for full inboxes, and tends to be more effective when it’s not mixed with longer tasks. Devote 30 minutes to getting 2-minute jobs done and you will have completed 15 (at least!)", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "2-minute rule"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "2-minute rule"}}
{"instruction": "Проаналізуй цей запит", "input": "Control social media, taking a sneak peek at what your friends are up to on facebook during the working, productivity", "output": {"text": "", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Taking a sneak peek at what your friends are up to on facebook during the working", "subcategory": "Control social media"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Taking a sneak peek at what your friends are up to on facebook during the working", "subcategory": "Control social media"}}
{"instruction": "Проаналізуй цей запит", "input": "Choose when to check email, email, productivity", "output": {"text": "Every time we get a ping indicating a new email, comment, or notification of any sort, our brains get a dopamine hit. Dopamine is the neurotransmitter responsible for feelings of reward and pleasure, and it can get addictive. This is why it’s so easy to succumb to constantly checking your emails, as each new message, however mundane, releases dopamine, at the cost of productivity. Combat this by scheduling set times to check emails, and allocate other times to producing your best work.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Email", "subcategory": "Choose when to check email"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Email", "subcategory": "Choose when to check email"}}
{"instruction": "Проаналізуй цей запит", "input": "Organise your workspace, environment, productivity", "output": {"text": "And keep it organised. Spending several minutes excavating the detritus on your desk as you frantically try to find a document is not a good use of your time. Keeping an orderly work space will make you more efficient and calm and exude an aura of control. A self-imposed clean desk policy is a good place to start.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Environment", "subcategory": "Organise your workspace"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Environment", "subcategory": "Organise your workspace"}}
{"instruction": "Проаналізуй цей запит", "input": "Start earlier, time management, productivity", "output": {"text": "Not easy, but simple and effective. From Richard Branson to Michelle Obama, high performers are often also early risers. Whether it’s to fit in a morning workout or an extra hour of distraction-free work, getting up early means you literally get a head start in the day on almost everyone else.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Start earlier"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Start earlier"}}
{"instruction": "Проаналізуй цей запит", "input": "Breathe, you out of the cycle of automatic negative responses and the resulting physiological, productivity", "output": {"text": "With increasing workloads, varied work, colleagues in multiple timezones and devices pinging all around us, it’s no wonder we’re a more stressed workforce than any before. We need simple ways to decompress. Breathing is the simplest. If you feel your mind buzzing with too many things and it’s spinning out of control... focus on your breath and try to slow your breathing down a little. Just 90 seconds can be enough to get", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "You out of the cycle of automatic negative responses and the resulting physiological", "subcategory": "Breathe"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "You out of the cycle of automatic negative responses and the resulting physiological", "subcategory": "Breathe"}}
{"instruction": "Проаналізуй цей запит", "input": "Turn off alerts, distractions, productivity", "output": {"text": "Alerts alert. That means they get your attention. That means they take your attention from whatever it was you were doing. That’s fine if the alert really is important and urgent. But for most of us, most of the time, it’s not. The thing we were doing is more important. So mute alerts, pause them, go into airplane mode. This is about reclaiming control of where your attention goes, and applies to email, Whatsapp, Slack, Skype, internal messaging services – everything. Going full-screen (F11 on a PC or ^ + ⌘ + F on a Mac) is a fast, effective way of muting alerts. Another way is to change your status to ‘Do not disturb’ on your various communications platforms.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Distractions", "subcategory": "Turn off alerts"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Distractions", "subcategory": "Turn off alerts"}}
{"instruction": "Проаналізуй цей запит", "input": "Shorter meetings, meetings, productivity", "output": {"text": "The Babylonians created the concept we now call an “hour”, though they probably didn’t have 21st century business meetings in mind at the time. An hour is a nice, round number but that’s about all it has going for it as a universal time allocation for gatherings. Parkinson’s Law says “work expands to fill the time available for its completion” so if we set aside an hour for every meeting, the meeting will take that time, though we won’t necessarily get more done than if we had allocated it less time. So the advice is to either vary meeting length depending on the agenda (and of course sometimes 60 minutes will be right!) or to universally apply a shorter time, e.g. 30 or 45 minutes. This forces everyone to get the most out of the time you have.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Shorter meetings"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Shorter meetings"}}
{"instruction": "Проаналізуй цей запит", "input": "Site blockers, email, productivity", "output": {"text": "Why expend precious energy on exercising self-control, when you can simply remove all temptation? There are numerous programs available to block access to your most distracting websites for set periods of time, for all operating systems and browsers. Install and activate these when working to free yourself of the burden of choice.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Email", "subcategory": "Site blockers"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Email", "subcategory": "Site blockers"}}
{"instruction": "Проаналізуй цей запит", "input": "Productivity tools, social media posts or reducing the blue light from your screen at night to improve sleep, productivity", "output": {"text": "Tech might be responsible for the majority of our distractions, but it can also be harnessed for greater productivity. There are a whole host of apps, tools and programs out there that can make your life easier and more efficient, whether it be syncing your", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Social media posts or reducing the blue light from your screen at night to improve sleep", "subcategory": "Productivity tools"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Social media posts or reducing the blue light from your screen at night to improve sleep", "subcategory": "Productivity tools"}}
{"instruction": "Проаналізуй цей запит", "input": "plan ahead, time management, productivity", "output": {"text": "Sounds like a no-brainer. We all know that proper planning helps us make better use of our time. So plan ahead. At the beginning of each week, work out the non-negotiables (meetings, deadlines, etc.) then schedule the remaining tasks around them. By creating a scheduled agenda of your activities (try an app like Spark Notebook) you will be more likely to follow through with each task and less likely to procrastinate.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "plan ahead"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "plan ahead"}}
{"instruction": "Проаналізуй цей запит", "input": "single-tasking, you of that task your boss gave you before lunch and that just triggered a series of, productivity", "output": {"text": "Do one thing at a time. Do NOT multitask. This is very difficult. Even if you minimise distractions from devices, tech etc, there are still your dear colleagues who may approach you. And even if you can isolate yourself from them, there are still the swirling thoughts in your mind! You’re writing a report, but your brain keeps reminding", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "You of that task your boss gave you before lunch and that just triggered a series of", "subcategory": "single-tasking"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "You of that task your boss gave you before lunch and that just triggered a series of", "subcategory": "single-tasking"}}
{"instruction": "Проаналізуй цей запит", "input": "sound & music, research proves that people who listen to music generally finish their tasks faster, productivity", "output": {"text": "", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Research proves that people who listen to music generally finish their tasks faster", "subcategory": "sound & music"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Research proves that people who listen to music generally finish their tasks faster", "subcategory": "sound & music"}}
{"instruction": "Проаналізуй цей запит", "input": "Write it down, admin, productivity", "output": {"text": "The moment you are assigned a task, it looms in your face: big, important, unforgettable. However, if often does end up being forgotten. Oops! We’ve all been there. So write it down, make it memorable (hand-drawn visuals, however ridiculous, are effective) and make tasks stand out somehow so when you come back to your notes it’s clear what you still have to do. This could be in some task-management software, a google doc, Word, Notepad, or an actual paper notepad. The important thing is that you have a written log somewhere.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Admin", "subcategory": "Write it down"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Admin", "subcategory": "Write it down"}}
{"instruction": "Проаналізуй цей запит", "input": "Break tasks down, time management, productivity", "output": {"text": "Start with writing down the first thing you need to do, however basic. You’re much more likely to get started on a task (i.e. not procrastinate), especially on something big, when you see the small, manageable steps required to complete it. This will also help you avoid overwhelm and maintain momentum, and ultimately execute in a big way.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Break tasks down"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Break tasks down"}}
{"instruction": "Проаналізуй цей запит", "input": "8020 rule, time management, productivity", "output": {"text": "Also known as the Pareto Principle, this rule states that that across all industries, activities and contexts, 80% of results come from 20% of causes – e.g. 80% of sales come from 20% of clients; 80% of software problems are caused by 20% of bugs. When it comes to your work, target the 20% of tasks and actions that will get you 80% of your results, and you’ll have turbocharged your effectiveness with less effort, minimising time wasted on low-yield activities.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "8020 rule"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "8020 rule"}}
{"instruction": "Проаналізуй цей запит", "input": "be true to yourself, wellbeing, productivity", "output": {"text": "Heed the timeless advice inscribed over the temple of the Greek Delphic oracle: know thyself. Know your most and least productive times of day, and schedule accordingly. Know your biggest distractions (Facebook? Compulsive email checking? Chocolate buttons?) and control for them accordingly. Know your ideal working environment and try to create it wherever possible. Knowledge is power, and the more we have on ourselves, the easier we can create conditions for maximum productivity and success. Know your mood too. If you feel in the mood to write, go with that flow – you may write twice as quickly and three times as well.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "be true to yourself"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "be true to yourself"}}
{"instruction": "Проаналізуй цей запит", "input": "Avoid visual distractions, distractions, productivity", "output": {"text": "When you need to engage in deep work, the most likely distraction is a visual one. So hide the phone, turn off pop-up alerts, and put some headphones on to signal to colleagues that you’re in your own zone. If there’s something else in your field of vision that might grab your attention (like a clock or a permanent news channel on a big monitor), remove it or reposition yourself so it’s not bothering you.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Distractions", "subcategory": "Avoid visual distractions"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Distractions", "subcategory": "Avoid visual distractions"}}
{"instruction": "Проаналізуй цей запит", "input": "sleep, 47.8, productivity", "output": {"text": "We all know sleep is holy, essential for the proper running of every bodily function. Sleep deprivation raises stress hormones, and wrecks your ability to concentrate, control impulses, emotionally regulate, retain information, and basically everything important for productivity, and functioning as a human being in general. Do your health as well as your work a favour, and get a proper night’s sleep, every night.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "47.8", "subcategory": "sleep"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "47.8", "subcategory": "sleep"}}
{"instruction": "Проаналізуй цей запит", "input": "run meetings well, meetings, productivity", "output": {"text": "More often known as time-wasting, sleep-inducing group torture sessions, meetings are frequently badly run. It’s a lose-lose and a waste of everyone’s time. However, if run effectively, meetings can be a powerful tool for team motivation, morale and (you guessed it) productivity. Set a clear agenda for the meeting, and set goals at the end with clear assignments, so everyone knows what they need to do by the next meeting. You can also banish devices, send out important information in advance, be more selective about attendees, and merciless with timekeeping.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "run meetings well"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "run meetings well"}}
{"instruction": "Проаналізуй цей запит", "input": "Batch similar tasks, jumping from one disparate task to the next is inefficient and wastes precious brain, productivity", "output": {"text": "", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Jumping from one disparate task to the next is inefficient and wastes precious brain", "subcategory": "Batch similar tasks"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Jumping from one disparate task to the next is inefficient and wastes precious brain", "subcategory": "Batch similar tasks"}}
{"instruction": "Проаналізуй цей запит", "input": "fewer meetings, meetings, productivity", "output": {"text": "While there’s no denying the necessity for meetings, they are a frequent productivity drain. Minimise this by simply having fewer. This will free up time in your calendar for productive work, and force the meetings you DO hold to be more focussed and efficient.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "fewer meetings"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "fewer meetings"}}
{"instruction": "Проаналізуй цей запит", "input": "Focus on outcomes, goals, productivity", "output": {"text": "This is a little mind hack you can employ with yourself to laser-focus your efforts and keep you motivated when the going gets tough. Think about the end goal of what you are trying to achieve, rather than on the “how” and all the tasks along the way. That way you’ll get clarity on what you are really working for.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Goals", "subcategory": "Focus on outcomes"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Goals", "subcategory": "Focus on outcomes"}}
{"instruction": "Проаналізуй цей запит", "input": "Effective above efficient, time management, productivity", "output": {"text": "Before getting efficient, first prioritise effectiveness. Efficiency allows you to do some­ thing quickly and well, but effectiveness determines what you choose to do in the first place and how well you do it. It’s no use being hyper efficient at a task that has little to no effectiveness when it comes to achieving your goals. Decide on what is effective first. And carrying out a dry/quick-&-dirty/rehearsal version of the task, be it a draft, a sketch or a prototype, will help immeasurably with the quality and effectiveness of your final output. No one gets it 100% right the first time.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Effective above efficient"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Effective above efficient"}}
{"instruction": "Проаналізуй цей запит", "input": "Delegate, outsourcing to others who have the relevant skills and can do it faster and better than, productivity", "output": {"text": "Only do the work that only you can, and delegate the rest wherever possible. Try", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Outsourcing to others who have the relevant skills and can do it faster and better than", "subcategory": "Delegate"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Outsourcing to others who have the relevant skills and can do it faster and better than", "subcategory": "Delegate"}}
{"instruction": "Проаналізуй цей запит", "input": "Ignore the news, can you remember being more productive and encouraged at work as a result of, productivity", "output": {"text": "", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Can you remember being more productive and encouraged at work as a result of", "subcategory": "Ignore the news"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Can you remember being more productive and encouraged at work as a result of", "subcategory": "Ignore the news"}}
{"instruction": "Проаналізуй цей запит", "input": "Change the scenery, environment, productivity", "output": {"text": "Being slumped over a keyboard in the same artificial lighting for hours on end, day in and day out, is going to harm your productivity more than help it. If you can, get outside in nature for a refreshing break. There have been countless studies on the benefits of being out in nature. Even just looking out of the window can freshen you up, while also giving your eyes a necessary break. Failing that, simply looking at an image of a natural scene can have similar calming effects, and help you focus.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Environment", "subcategory": "Change the scenery"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Environment", "subcategory": "Change the scenery"}}
{"instruction": "Проаналізуй цей запит", "input": "Long breaks, wellbeing, productivity", "output": {"text": "While regular, short breaks are important to keep you fresh and focussed, don’t skimp on taking a longer break during the day – typically the lunch hour. A longer break allows you to fully unwind, and to take a 30 minute walk around outside, or a 20-minute nap, and sit down and eat a proper meal away from your desk. These are all essential activities for overall health and wellbeing, which will spill over positively into your work.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Long breaks"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Long breaks"}}
{"instruction": "Проаналізуй цей запит", "input": "Time yourself, time management, productivity", "output": {"text": "There’s nothing like a time limit to spur you on to get more done. Setting yourself time limits on your tasks, and then timing yourself while doing them, will inject a sense of urgency. Even if the deadline is entirely self-imposed and nobody else knows about it, it will still have the effect of urging you on. And shortcuts (worth learning, for programs like Excel, email, etc.) can save minutes each day, adding up to entire days saved over a career.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Time yourself"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Time yourself"}}
{"instruction": "Проаналізуй цей запит", "input": "be positive, likely to cave in and eat an entire pack of cookies while wallowing in your feelings and, productivity", "output": {"text": "There is a direct link between self-control and positivity. Think about it: are you more", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Likely to cave in and eat an entire pack of cookies while wallowing in your feelings and", "subcategory": "be positive"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Likely to cave in and eat an entire pack of cookies while wallowing in your feelings and", "subcategory": "be positive"}}
{"instruction": "Проаналізуй цей запит", "input": "Follow up after meetings, meetings, productivity", "output": {"text": "After a meeting, having a clear list of actions which are assigned to specific people with set deadlines is essential to ensuring things move forward. It’s worth having someone responsible for keeping track of and chasing these tasks, to ensure they get done before the next meeting.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Follow up after meetings"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Follow up after meetings"}}
{"instruction": "Проаналізуй цей запит", "input": "One small change, goals, productivity", "output": {"text": "A journey of a thousand miles begins with one step. Even the biggest achievements are composed of hundreds of small actions. Incorporating small, incremental changes to your habits gives you a much higher chance of succeeding than a sudden, huge change that jars your system and is more likely to demotivate you sooner. Want to learn a new language? Learn just two new words per day. Over time, these small, painless changes, which took so little effort to get started, will build up, and it will get easier to increase the load over time.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Goals", "subcategory": "One small change"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Goals", "subcategory": "One small change"}}
{"instruction": "Проаналізуй цей запит", "input": "Flow, distractions, productivity", "output": {"text": "Getting into a state of “flow” means being completely absorbed in an activity: focussed, in control, and creative. Read: productive. While we have all experienced falling into a flow state at random and emerging, blinking, an hour later having blasted through a load of work, there are also ways of stimulating this state. Distractions are anathema to flow, so nix those first of all. Having specific rituals before beginning work can help, alongside ensuring you are invested in the work, and that the task is just challenging enough to stretch you without being too hard.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Distractions", "subcategory": "Flow"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Distractions", "subcategory": "Flow"}}
{"instruction": "Проаналізуй цей запит", "input": "Drink water, wellbeing, productivity", "output": {"text": "It hydrates your body and fuels your mind. So simple, yet something many of us fail to do. Being well hydrated promotes better focus, energy levels, and sleep. Aim for 8 cups a day. If you’re forgetful, the iDrated app will monitor how hydrated your body is, keep track of the last time you had a drink of water, and tell you when you are due to drink again, allowing you to keep track of your daily water intake. No excuses now!", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Drink water"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Drink water"}}
{"instruction": "Проаналізуй цей запит", "input": "Drink coffee responsibly, wellbeing, productivity", "output": {"text": "Caffeine is a powerful stimulant that, when properly employed, can up our energy levels and productivity game significantly. Get too reliant, however, and it’ll be as bad as any addiction, with lessened effect. Dose strategically between 09:30-11:30 AM and 1:30- 5:00 PM, when your body’s cortisol levels drop, and you will most benefit from a boost.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Drink coffee responsibly"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Drink coffee responsibly"}}
{"instruction": "Проаналізуй цей запит", "input": "Make a public commitment, time management, productivity", "output": {"text": "Simply telling someone else about a task makes you more likely to do it. Once made public, a mix of pride, shame and sense of responsibility will keep you on track to fulfill a commitment more than a promise you’ve merely kept to yourself.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Make a public commitment"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Make a public commitment"}}
{"instruction": "Проаналізуй цей запит", "input": "Acknowledge your success, equally important to take a moment and acknowledge the things you have already, productivity", "output": {"text": "While it’s important to keep looking forward and barrelling toward your goals, it’s", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Equally important to take a moment and acknowledge the things you have already", "subcategory": "Acknowledge your success"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Equally important to take a moment and acknowledge the things you have already", "subcategory": "Acknowledge your success"}}
{"instruction": "Проаналізуй цей запит", "input": "Don’t reread emails, emails, productivity", "output": {"text": "Incorporating a strict “one-time only” read policy on your emails will guarantee that you read with greater care and attention, and will retain the information better than if you skim read, then forget. You’ll reduce the chances of forgetting important messages, and of course save time by not re-reading emails or scrolling through your inbox.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Emails", "subcategory": "Don’t reread emails"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Emails", "subcategory": "Don’t reread emails"}}
{"instruction": "Проаналізуй цей запит", "input": "Help others in meetings, meetings, productivity", "output": {"text": "It’s easy for meetings to get hijacked by the biggest and loudest personalities in the room, but showy doesn’t always equal best. Do your part in encouraging all participants to contribute to the conversation, and you might uncover gold that will help everyone.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Help others in meetings"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Help others in meetings"}}
{"instruction": "Проаналізуй цей запит", "input": "Be on time, meetings, productivity", "output": {"text": "Start at the start. Be on time. According to a recent study by Bain & Company, a meeting that starts five minutes late will be eight percent less productive. When given a precise time limit for meeting objectives, people are more likely to work harder to accomplish them. Be clear on the amount of time you need to commute to your meeting and also be conservative in your calculation – allow an extra 15 minutes for delays.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Be on time"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Be on time"}}
{"instruction": "Проаналізуй цей запит", "input": "Kill your darlings, meetings, productivity", "output": {"text": "We all get irrationally attached to certain ideas or ways of doing things, either because we are used to them, because we came up with the idea ourselves, or because we sim­ ply like them (they’re our “darlings”). But this can come at the cost of real productivity and progress, if the beloved method is actually not that great. Learn to see things more objectively in terms of their true effectiveness, and let go of what isn’t serving your greater purpose, however painful that might sometimes be.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Kill your darlings"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Kill your darlings"}}
{"instruction": "Проаналізуй цей запит", "input": "Work from home, environment, productivity", "output": {"text": "Though this might not be for everyone, working from home can boost some people’s productivity significantly. There are any number of reasons why this might be, but it’s likely to do with the refreshing effect of having a change of scenery now and again. That, alongside skipping a stressful and draining commute, elimination of usual office distractions (noisy phone conversations, colleagues making chit-chat over your desk, etc.) and cutting out decisions such as what to wear to work or where to eat lunch, contributes to more focus available for getting good work done.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Environment", "subcategory": "Work from home"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Environment", "subcategory": "Work from home"}}
{"instruction": "Проаналізуй цей запит", "input": "Productive procrastination, time management, productivity", "output": {"text": "Nobody’s perfect. We all procrastinate sometimes. However, you can upgrade your procrastination time to make even that productive. Get non-work related tasks done while procrastinating: run errands, read or listen to a podcast to continually develop and expand your mind. That way, rather than feeling guilty and a little bit dirty, like you might if you spent that same time scrolling through social media, you can come out the other end of your procrastination time feeling like a more knowledgeable, or more organised person.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Productive procrastination"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Productive procrastination"}}
{"instruction": "Проаналізуй цей запит", "input": "Your biological prime time, time management, productivity", "output": {"text": "For most people, we are most alert and productive within the first few hours of waking, typically 9-11am. You probably already have an idea of when your biological prime time is. Exploit this, and schedule in your most important work for these times, when you’re performing at your best.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Your biological prime time"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Your biological prime time"}}
{"instruction": "Проаналізуй цей запит", "input": "Find time for yourself, difficult for inspiration to hit when your mind is completely absorbed in something, productivity", "output": {"text": "Some of the most innovative ideas come to us in the space between doing tasks. It’s", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Difficult for inspiration to hit when your mind is completely absorbed in something", "subcategory": "Find time for yourself"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Difficult for inspiration to hit when your mind is completely absorbed in something", "subcategory": "Find time for yourself"}}
{"instruction": "Проаналізуй цей запит", "input": "Be realistic, goals, productivity", "output": {"text": "Perfectionism is enemy to productivity. In setting goals, we should choose ones that stretch us but that still reside in the realm of possibility. Having goals that are too lofty will demotivate us because we won’t really believe we can achieve them (with reason), and can harm our progress. Instead, setting goals that are realistic will give us more incentive to pursue them, and allow us to enjoy the success of completing them.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Goals", "subcategory": "Be realistic"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Goals", "subcategory": "Be realistic"}}
{"instruction": "Проаналізуй цей запит", "input": "set clear goals, goals, productivity", "output": {"text": "Ensure that your goals are as clear as they can be. Setting vague goals deprives you of the focus you need to achieve them. Consult yourself. Consider why you want to achieve your goal. If your motivation is not solid, you are unlikely to stick with it. Also, get clear on how you will go about achieving it. Finally, ask yourself what the consequences are for not meeting your goals. Write these down and review them every so often.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Goals", "subcategory": "set clear goals"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Goals", "subcategory": "set clear goals"}}
{"instruction": "Проаналізуй цей запит", "input": "Just start, time management, productivity", "output": {"text": "Don’t sit around and wait for great things to happen to you! Starting a task can be the most daunting part, and we end up wasting time procrastinating and worrying about what could go wrong. Often we just don’t want to get going. The secret to getting start­ ed is ensuring you have broken your large, overwhelming tasks into small manageable chunks and then getting to work on the first one.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Just start"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Just start"}}
{"instruction": "Проаналізуй цей запит", "input": "Devices in meetings, meetings, productivity", "output": {"text": "We all know how distracting our electronic devices are at the best of times. Their allure can become all the more powerful during a snooze-worthy meeting, further lowering concentration levels and engagement, and putting off whoever is speaking. Pre-empt this by enforcing a ban on all devices during meetings.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Devices in meetings"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Devices in meetings"}}
{"instruction": "Проаналізуй цей запит", "input": "Break bad habits, the overwhelming majority of things that prevent us from being productive are just, productivity", "output": {"text": "", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "The overwhelming majority of things that prevent us from being productive are just", "subcategory": "Break bad habits"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "The overwhelming majority of things that prevent us from being productive are just", "subcategory": "Break bad habits"}}
{"instruction": "Проаналізуй цей запит", "input": "Love your job, 39.1, productivity", "output": {"text": "You’re happier, more productive and more efficient when doing something you LOVE. Sometimes you may struggle to love your job and its challenges, but having a positive attitude will help. Use your initiative to find the parts of your job you enjoy doing, and make those a bigger part of your role.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "39.1", "subcategory": "Love your job"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "39.1", "subcategory": "Love your job"}}
{"instruction": "Проаналізуй цей запит", "input": "Show compassion, 3, productivity", "output": {"text": "When you feel helpless...help someone else. In doing so, not only are you making the world a better place, you are empowering yourself and reinforcing your (perhaps weakened) self-belief.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "3", "subcategory": "Show compassion"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "3", "subcategory": "Show compassion"}}
{"instruction": "Проаналізуй цей запит", "input": "Focus on the present, distractions, productivity", "output": {"text": "Dwelling on the past never made anyone more productive. Mindfulness, the idea of being present in the moment, has helped countless people in all areas of their lives, and you can employ it at work to keep you on track. Focussing on the present can help with anxiety too, as that is essentially a fear of a negative future outcome.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Distractions", "subcategory": "Focus on the present"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Distractions", "subcategory": "Focus on the present"}}
{"instruction": "Проаналізуй цей запит", "input": "Systemise, time management, productivity", "output": {"text": "For faster, error-free work, set up a system so that you can’t fail. Automation is the name of the game. It could be something as simple as enabling spell checks, spread­ sheet checks, or automated email forwarding. Anything that takes the effort and decision-making out of small, everyday tasks will pay off in huge dividends over time.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Systemise"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Systemise"}}
{"instruction": "Проаналізуй цей запит", "input": "Start and end on time, meetings, productivity", "output": {"text": "Start and end on time - no exceptions. Simple rule, big results. Just knowing that there’s no flexibility on this will change everyone’s behaviour, allowing for maximum efficiency in the time allocated.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Start and end on time"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Start and end on time"}}
{"instruction": "Проаналізуй цей запит", "input": "Get ergonomic, uncomfortable chair or using equipment that is not optimised for hours on end every, productivity", "output": {"text": "It’s such a pain in the neck when you have... well, a literal pain in the neck. Sitting in an", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Uncomfortable chair or using equipment that is not optimised for hours on end every", "subcategory": "Get ergonomic"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Uncomfortable chair or using equipment that is not optimised for hours on end every", "subcategory": "Get ergonomic"}}
{"instruction": "Проаналізуй цей запит", "input": "Use your commute, time management, productivity", "output": {"text": "Ahh the commute. The bane of every office worker’s life. This is essentially dead time, but you can utilise this to get more things done. Rather than staring bleakly into some­ one’s armpit on the crowded train, harness this time to learn, read, work, meditate. If you have a half-hour commute, that’s an hour every day that can be spent on any of the above.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Use your commute"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Use your commute"}}
{"instruction": "Проаналізуй цей запит", "input": "Unplug, wellbeing, productivity", "output": {"text": "It is far too easy to get pulled into checking work emails at home, or even on the way home on your phone. This age of constant connectedness creates a pressure to always be productive, making unplugging a challenge. Ironically, unplugging is essential for optimal productivity. When you’re away from work, over evenings and weekends, make the effort to fully unplug and give your attention to your family, loved ones, and leisure time. This is the only way to guarantee that you’ll return to work replenished and ready to take on anything.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Unplug"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Unplug"}}
{"instruction": "Проаналізуй цей запит", "input": "Meeting roles, meetings, productivity", "output": {"text": "To ensure your meetings are productive and not soporific, assign specific roles for participants, e.g. timekeeper, notetaker, chair. Active involvement will keep attendees engaged, and ensure maximum group output.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Meeting roles"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Meeting roles"}}
{"instruction": "Проаналізуй цей запит", "input": "Do not do to-do lists, time management, productivity", "output": {"text": "If it isn’t scheduled in, it isn’t getting done. To-do lists are essential in that they clarify what needs doing (see tip #7), but they can make us feel like we’re doing something useful when it’s really little more than procrastination disguised as productivity. Worse, when we inevitably fail to cross off all the items on our list, they can leave us feeling discouraged and incompetent. Instead, timetable tasks that need doing, which will force you to get realistic about how long each item will take, and give you a structure in which to complete them.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Do not do to-do lists"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Time management", "subcategory": "Do not do to-do lists"}}
{"instruction": "Проаналізуй цей запит", "input": "10,000 hours, 34.8, productivity", "output": {"text": "Malcolm Gladwell popularised the idea that it takes 10,000 hours of dedicated practise to master any skill. Following this principle should allow you to eliminate activities that you are not willing to devote this much time to. Think you want to learn to play the banjo? Willing to practise for 10,000 hours before you’re any good? If not, drop it, and move on to your top priorities.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "34.8", "subcategory": "10,000 hours"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "34.8", "subcategory": "10,000 hours"}}
{"instruction": "Проаналізуй цей запит", "input": "Find lost hours, wellbeing, productivity", "output": {"text": "Reclaim time that would otherwise be lost to you. Standing in queues, travelling from place to place, sitting in a waiting room... these pockets of time all accumulate. Make use of them to get small things done, whether it’s listening to an interesting podcast, reading a book, or brainstorming some new ideas.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Find lost hours"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Find lost hours"}}
{"instruction": "Проаналізуй цей запит", "input": "Short- and long-term goals, meetings, productivity", "output": {"text": "It’s difficult enough trying to keep yourself motivated, let alone an entire group of peo­ ple, like your team. Setting shared goals is a surefire way to have everyone aligned and working together. In doing so, set both long- and short-term goals. The long term goals are useful for giving you all a grand vision to work towards, while the short-term goals will help keep you encouraged and sustained along the way.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Short- and long-term goals"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Short- and long-term goals"}}
{"instruction": "Проаналізуй цей запит", "input": "Visualise success, 34.8, productivity", "output": {"text": "A technique used by athletes and successful entrepreneurs alike, visualisation is a powerful tool. Having a clear, compelling and inspiring vision for your goal will goad you into working harder and help you to imagine the steps required to get there.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "34.8", "subcategory": "Visualise success"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "34.8", "subcategory": "Visualise success"}}
{"instruction": "Проаналізуй цей запит", "input": "Reward yourself, 34.8, productivity", "output": {"text": "For this to work you need to ensure you do only reward yourself AFTER you have com­ pleted your task, NOT before. Hands off that chocolate bar! But giving yourself a further incentive to get your work done will only help. It’s also worth keeping records of your completed tasks, which can often be reward enough in itself. This allows you to see the progress you’ve made, keeping up momentum.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "34.8", "subcategory": "Reward yourself"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "34.8", "subcategory": "Reward yourself"}}
{"instruction": "Проаналізуй цей запит", "input": "Rituals, goals, productivity", "output": {"text": "Do you brush your teeth every day? Hopefully the answer is “yes, of course!” It’s a ritual that was probably ingrained in you by your parents from a very young age. That is the power of a ritual – do something enough and it’ll become second nature. We don’t need to expound the benefits of brushing your teeth, but there are other rituals whose benefits might seem less obvious. For example, taking a minute to make your bed in the morning. That might seem uncorrelated to being more productive at work, but it sets you up on the right note for the day. Most high performers have rituals, and there’s a good reason: rituals help get you into a flow state, in which you can produce your best work. 2 34.8", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Goals", "subcategory": "Rituals"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Goals", "subcategory": "Rituals"}}
{"instruction": "Проаналізуй цей запит", "input": "Eric Schmidt’s “9 Rules of Email”, be crisp in your delivery., productivity", "output": {"text": "Eric Schmidt, software developer and business powerhouse, created 9 rules for email. Here are his top 5 - See if any of these make you more efficient with your inbox:", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Be crisp in your delivery.", "subcategory": "Eric Schmidt’s “9 Rules of Email”"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Be crisp in your delivery.", "subcategory": "Eric Schmidt’s “9 Rules of Email”"}}
{"instruction": "Проаналізуй цей запит", "input": "Ask yourself, “What should I have forwarded, but didn’t?”, email, productivity", "output": {"text": "... Maybe you could find the rest out for yourself!", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Email", "subcategory": "Ask yourself, “What should I have forwarded, but didn’t?”"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Email", "subcategory": "Ask yourself, “What should I have forwarded, but didn’t?”"}}
{"instruction": "Проаналізуй цей запит", "input": "Be flexible, environment, productivity", "output": {"text": "Transpose popular project management methodology onto your own personal man­ agement. Being “agile” is a desired trait for any business, so why not try to be agile yourself? The popular SCRUM agile framework sets a number of tasks in service of a larger goal, which are completed in sprints of a week or so. Try applying that to your own work.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Environment", "subcategory": "Be flexible"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Environment", "subcategory": "Be flexible"}}
{"instruction": "Проаналізуй цей запит", "input": "Log all your ideas, you never know when a random idea that has no application now might be a game, productivity", "output": {"text": "", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "You never know when a random idea that has no application now might be a game", "subcategory": "Log all your ideas"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "You never know when a random idea that has no application now might be a game", "subcategory": "Log all your ideas"}}
{"instruction": "Проаналізуй цей запит", "input": "Take control when you can, 34.8, productivity", "output": {"text": "Many of these tips are about exercising greater control – over yourself, or your sched­ ule, or your environment. It is important to have control where you can, as chaos and feeling out of control are not conducive to productive work. However, it is also vital to accept when things are not in your control, and concentrate on the things that are.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "34.8", "subcategory": "Take control when you can"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "34.8", "subcategory": "Take control when you can"}}
{"instruction": "Проаналізуй цей запит", "input": "Make work fun again, probably the number one motivator for any activity is the amount of fun we have doing, productivity", "output": {"text": "", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Probably the number one motivator for any activity is the amount of fun we have doing", "subcategory": "Make work fun again"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Probably the number one motivator for any activity is the amount of fun we have doing", "subcategory": "Make work fun again"}}
{"instruction": "Проаналізуй цей запит", "input": "Natural light, environment, productivity", "output": {"text": "Who doesn’t love a bit of sunshine? The health benefits of sun exposure include vitamin D, better moods and improved sleep. All these will help keep you at your productive best. If you can, try to work by a window, where you will be exposed to natural light.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Environment", "subcategory": "Natural light"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Environment", "subcategory": "Natural light"}}
{"instruction": "Проаналізуй цей запит", "input": "Learn to touch type properly, admin, productivity", "output": {"text": "Think about how much time you spend typing. Learning to touch type could, over a fairly short period of time, save you hours. You can also save your neck the endless looking up and down from the keyboard to the screen, promoting better posture.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Admin", "subcategory": "Learn to touch type properly"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Admin", "subcategory": "Learn to touch type properly"}}
{"instruction": "Проаналізуй цей запит", "input": "Listen actively, meetings, productivity", "output": {"text": "Active listening: a perpetually underrated superpower. We may take for granted that we listen and are listened to over the course of a conversation, but you’d be surprised how little we actually retain: research suggests that its only 25 - 50% of the things that we hear. Active listening ensures that you are fully focused on the speaker and therefore properly taking in what they are saying, rather than half-listening to the buzzing in your own head. Not only will it improve your productivity, it will also improve your relation­ ships – you can’t go wrong!", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Listen actively"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Meetings", "subcategory": "Listen actively"}}
{"instruction": "Проаналізуй цей запит", "input": "zero inbox, email, productivity", "output": {"text": "“Zero” doesn’t refer to the number of emails in your inbox, but the amount of time your mind is in your inbox. Productivity expert Merlin Mann developed the Inbox Zero technique to prevent your inbox becoming a to-do list. Choose one of five actions for each email: delete, delegate, respond, defer and do. He also advocates not leaving your inbox open and only checking email at certain set times of the day. Here’s Merlin talking about it: https://youtu.be/z9UjeTMb3Yk.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Email", "subcategory": "zero inbox"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Email", "subcategory": "zero inbox"}}
{"instruction": "Проаналізуй цей запит", "input": "Voicemail, distractions, productivity", "output": {"text": "In a world of endless pings and text messages, answering a ringing phone can feel like a more “legitimate” reason to allow yourself to be interrupted. But technology also granted us another way: voicemail. Don’t feel obliged to answer phone calls if you are deep in an important task. Let voicemail be your friend.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Distractions", "subcategory": "Voicemail"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Distractions", "subcategory": "Voicemail"}}
{"instruction": "Проаналізуй цей запит", "input": "Templates, email, productivity", "output": {"text": "No need to reinvent the wheel with every new message. Speed up your outgoing email by using templates if you frequently send out emails that are similar in structure.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Email", "subcategory": "Templates"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Email", "subcategory": "Templates"}}
{"instruction": "Проаналізуй цей запит", "input": "Hard stuff first, admin, productivity", "output": {"text": "Wherever you can (while allowing for deadlines), prioritise the hardest tasks. It might be the opposite of what you want to do – it’s so satisfying powering through all the easy and enjoyable tasks to give us a false sense of accomplishment. But by chipping away at the hard and unpleasant ones first, you’ll get a greater sense of satisfaction in the long term and boost your spirits and self-confidence. This also leaves the nice things to do at the end of the day when your energy levels are probably lagging, and the last thing you want to do is face a horrible task.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Admin", "subcategory": "Hard stuff first"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Admin", "subcategory": "Hard stuff first"}}
{"instruction": "Проаналізуй цей запит", "input": "Close open loops in your head, wellbeing, productivity", "output": {"text": "Open loops are tasks that need doing but have no deadline, plan or decision in place. They can be professional or personal (a unpleasant task from your manager, an awk­ ward conversation you need to have with a friend). They are unresolved, open-ended issues that drain your energy, cause anxiety and ultimately detract from your produc­ tivity. Close these open loops by writing them all down, and putting a plan in place.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Close open loops in your head"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "Close open loops in your head"}}
{"instruction": "Проаналізуй цей запит", "input": "Waiting-on list, admin, productivity", "output": {"text": "The waiting-on list is for those tasks that are important to you but that someone else must do. Keep a log of such tasks as soon as you’ve delegated them, or if someone has volunteered to do it. This technique is further strengthened if you log the dates that the task was assigned and its agreed deadline. Avoid creating more admin for yourself by being picky about what is on your waiting-on list (not more than a dozen). A lighter version is to tag all actions for others with ‘WO’ so it is logged, and you can circle back and chase up periodically.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Admin", "subcategory": "Waiting-on list"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Admin", "subcategory": "Waiting-on list"}}
{"instruction": "Проаналізуй цей запит", "input": "Deprioritise the non-essential, email, productivity", "output": {"text": "Sounds pretty obvious, but non-essential emails need to drop down the list of priori­ ties, if not fall off it entirely.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Email", "subcategory": "Deprioritise the non-essential"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Email", "subcategory": "Deprioritise the non-essential"}}
{"instruction": "Проаналізуй цей запит", "input": "Reply by..., 3, productivity", "output": {"text": "Email can derail even those with the best of intentions, because every time a new one pings in, our instinct is to want to open and respond. However, not all emails are made equal, and many do not require an immediate response. Try making a folder for emails and assign those emails a day by which you will reply to them. That way, you free your­ self of the burden of feeling like you need to reply straight away, but you’ve also set yourself a deadline to respond.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "3", "subcategory": "Reply by..."}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "3", "subcategory": "Reply by..."}}
{"instruction": "Проаналізуй цей запит", "input": "Control your inbox, 4, productivity", "output": {"text": "Control your inbox, don’t let your inbox control you. It is all too easy to let the con­ stant incoming flood of our inbox dictate how we spend our time. Take back control by turning off email notifications, allocating set times in which you deal with email (and don’t go near it outside of those times) and organising your email using folders, or tags – whatever works for you.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "4", "subcategory": "Control your inbox"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "4", "subcategory": "Control your inbox"}}
{"instruction": "Проаналізуй цей запит", "input": "Wear a uniform, distractions, productivity", "output": {"text": "Unless your job requires you to wear an actual uniform, deciding what to wear to work will take time out of your morning routine every day. Though the gravity of this deci­ sion depends on how fashion-conscious you are, every decision we make throughout the day drains a little bit more of our cognitive energy, and will eventually lead to de­ cision fatigue. Avoid this by assigning yourself a work uniform. Steve Jobs was famous for his polo neck and jeans combo, and many other successful business people do the same. If you wear the same thing every day, that’s one less decision you have to make, preserving energy for the many others you will need to make at work.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Distractions", "subcategory": "Wear a uniform"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Distractions", "subcategory": "Wear a uniform"}}
{"instruction": "Проаналізуй цей запит", "input": "Set deadlines, admin, productivity", "output": {"text": "Set deadlines for everything, even small things. When delegating, if others don’t know how urgent a task is they can’t know how to prioritise it, and so they won’t. This applies whether you’re communicating with someone who works for you, your boss or your boss’s boss. It’s a matter of clarity. Just make sure that when setting deadlines for others you do so in a polite manner!", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Admin", "subcategory": "Set deadlines"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Admin", "subcategory": "Set deadlines"}}
{"instruction": "Проаналізуй цей запит", "input": "Assign a ‘Task Deputy’, environment, productivity", "output": {"text": "Much as we can try to control ourselves, there’s nothing like being held accountable by someone else to keep us on task. Try assigning a task deputy, such as a colleague or a friend. As long as it is someone whom you can trust to hold you mercilessly to account when you procrastinate or do not fulfill commitments.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Environment", "subcategory": "Assign a ‘Task Deputy’"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Environment", "subcategory": "Assign a ‘Task Deputy’"}}
{"instruction": "Проаналізуй цей запит", "input": "Password manager, 26.1, productivity", "output": {"text": "We’re drowning in passwords these days, and often pointlessly waste time retrieving forgotten or lost passwords. Try using a password manager like Dashlane, which will generate secure passwords for you and allow you to quickly, easily and safely access all your accounts, pain-free.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "26.1", "subcategory": "Password manager"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "26.1", "subcategory": "Password manager"}}
{"instruction": "Проаналізуй цей запит", "input": "Schedule “stress” time., schedule an exact amount of time each week and treat it like an appointment that you, productivity", "output": {"text": "While some stress at work now and then is expected, excessive amounts will interfere with your performance, and impact negatively on physical and emotional health. While we cannot completely avoid stress, we can stay in control. To protect yourself and improve job satisfaction and overall well-being, schedule breaks into your calendar by time blocking. Take a few minutes of quiet time for yourself before you start work.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Schedule an exact amount of time each week and treat it like an appointment that you", "subcategory": "Schedule “stress” time."}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Schedule an exact amount of time each week and treat it like an appointment that you", "subcategory": "Schedule “stress” time."}}
{"instruction": "Проаналізуй цей запит", "input": "Five goals, 13.0, productivity", "output": {"text": "Warren Buffett would have you eliminate all your goals except for the top 5. That’s it – just your 5 most important goals. This exercise forces you to get clear on what really matters, and direct all your energies toward those things. It sounds scary, but is also oddly freeing.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "13.0", "subcategory": "Five goals"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "13.0", "subcategory": "Five goals"}}
{"instruction": "Проаналізуй цей запит", "input": "Convert emails to to-dos, emails, productivity", "output": {"text": "To avoid getting derailed from your carefully pre-planned list of scheduled tasks, put emails that need actioning on tomorrow’s to-do list. That way you can keep to your original plan of action, while still responding to emails in a timely manner.", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Emails", "subcategory": "Convert emails to to-dos"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Emails", "subcategory": "Convert emails to to-dos"}}
{"instruction": "Проаналізуй цей запит", "input": "Old-school alarm clocks, the last thing you want to do as soon as you wake up is to start idly scrolling through, productivity", "output": {"text": "", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "The last thing you want to do as soon as you wake up is to start idly scrolling through", "subcategory": "Old-school alarm clocks"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "The last thing you want to do as soon as you wake up is to start idly scrolling through", "subcategory": "Old-school alarm clocks"}}
{"instruction": "Проаналізуй цей запит", "input": "chewing gum, wellbeing, productivity", "output": {"text": "Chewing gum is an alternative to coffee, which you shouldn’t overdo if you want to avoid the jitters and disturbed sleep patterns. Chewing gum has been shown to help you concentrate and retain information, as well as keeping you awake!", "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "chewing gum"}}, "metadata": {"language": "ua", "source": "https://drive.google.com/file/d/1IAqxLYLJAwvNIY3XNJQ5NxjOMQOQ74oo/view?usp=drive_link", "category": "Wellbeing", "subcategory": "chewing gum"}}
{"instruction": "Проаналізуй цей запит", "input": "ВАЖНО: не копите конфликт в себе, умалчивая то, что вас не устраивает и вызывает недовольство (это называется скрытый конфликт), а постарайтесь озвучить все проблемные места ПМу, HRу, Лиду - тогда появится возможность:. Для кого: для всех сотрудников компании от уровня junior - Для чего данный навык: данный навык помогает избегать конфликтных ситуаций и эффективно выходить из них, если они все-таки возникли. Для чого: ", "output": {"text": "увидеть что есть конфликт/проблема найти пути его разрешения. Несколько правил/советов, как себя вести, чтобы избежать конфликта, если вы в новом коллективе Прежде всего познакомиться с коллегами, понаблюдать за ними, чтобы понять,  как принято в этом коллективе делать свою работу.", "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/14_Spv2knfYKHkoXL1EK80FNfAk_ZZbK-/edit?rtpof=true&tab=t.0", "category": "Effective Communication", "subcategory": "Active Listening"}}, "metadata": {"language": "ua", "source": "https://docs.google.com/document/d/14_Spv2knfYKHkoXL1EK80FNfAk_ZZbK-/edit?rtpof=true&tab=t.0", "category": "Effective Communication", "subcategory": "Active Listening"}}
